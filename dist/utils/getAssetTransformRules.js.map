{"version":3,"file":"getAssetTransformRules.js","names":["_assetExtensions","require","getSvgRule","type","isTypeObject","additionalOptions","options","test","use","loader","native","getAssetTransformRules","inline","remote","svg","extensions","ASSET_EXTENSIONS","filter","ext","remoteOptions","enabled","undefined","rules","push","getAssetExtensionsRegExp"],"sources":["../../src/utils/getAssetTransformRules.ts"],"sourcesContent":["import type { AssetLoaderRemoteOptions } from '../loaders/assetsLoader/options.js';\nimport {\n  ASSET_EXTENSIONS,\n  getAssetExtensionsRegExp,\n} from './assetExtensions.js';\n\ntype SvgType =\n  | 'svgr'\n  | 'xml'\n  | 'uri'\n  | { type: 'svgr'; options: Record<string, any> };\n\nfunction getSvgRule(type: SvgType) {\n  const isTypeObject = typeof type === 'object';\n\n  if (type === 'svgr' || (isTypeObject && type?.type === 'svgr')) {\n    const additionalOptions = isTypeObject && type?.options;\n    return {\n      test: /\\.svg$/,\n      use: {\n        loader: '@svgr/webpack',\n        options: { native: true, ...additionalOptions },\n      },\n    };\n  }\n\n  return {\n    test: /\\.svg$/,\n    type: type === 'xml' ? 'asset/source' : 'asset/inline',\n  };\n}\n\n/**\n * Interface for {@link getAssetTransformRules} options.\n */\ninterface GetAssetTransformRulesOptions {\n  /**\n   * Whether to inline assets as base64 URIs.\n   */\n  inline?: boolean;\n\n  /**\n   * Configuration for remote asset loading.\n   */\n  remote?: Omit<AssetLoaderRemoteOptions, 'enabled'>;\n\n  /**\n   * Determines how SVG files should be processed:\n   * - 'svgr': Uses `@svgr/webpack` to transform SVGs into React Native components\n   * - 'xml': Loads SVGs as raw XML source to be used with SvgXml from react-native-svg\n   * - 'uri': Loads SVGs as inline URIs to be used with SvgUri from react-native-svg\n   */\n  svg?: SvgType;\n}\n\n/**\n * Creates `module.rules` configuration for handling assets in React Native applications.\n *\n * @param options Configuration options\n * @param options.inline Whether to inline assets as base64 URIs (defaults to false)\n * @param options.remote Configuration for remote asset loading with publicPath and optional assetPath function\n * @param options.svg Determines how SVG files should be processed ('svgr', 'xml', or 'uri')\n *\n * @returns Array of webpack/rspack rules for transforming assets\n */\nexport function getAssetTransformRules({\n  inline,\n  remote,\n  svg,\n}: GetAssetTransformRulesOptions = {}) {\n  const extensions = svg\n    ? ASSET_EXTENSIONS.filter((ext) => ext !== 'svg')\n    : ASSET_EXTENSIONS;\n\n  const remoteOptions = remote\n    ? {\n        enabled: true,\n        ...remote,\n      }\n    : undefined;\n\n  const rules = [];\n\n  rules.push({\n    test: getAssetExtensionsRegExp(extensions),\n    use: {\n      loader: '@callstack/repack/assets-loader',\n      options: { inline, remote: remoteOptions },\n    },\n  });\n\n  if (svg) {\n    rules.push(getSvgRule(svg));\n  }\n\n  return rules;\n}\n"],"mappings":";;;;;;AACA,IAAAA,gBAAA,GAAAC,OAAA;AAWA,SAASC,UAAUA,CAACC,IAAa,EAAE;EACjC,MAAMC,YAAY,GAAG,OAAOD,IAAI,KAAK,QAAQ;EAE7C,IAAIA,IAAI,KAAK,MAAM,IAAKC,YAAY,IAAID,IAAI,EAAEA,IAAI,KAAK,MAAO,EAAE;IAC9D,MAAME,iBAAiB,GAAGD,YAAY,IAAID,IAAI,EAAEG,OAAO;IACvD,OAAO;MACLC,IAAI,EAAE,QAAQ;MACdC,GAAG,EAAE;QACHC,MAAM,EAAE,eAAe;QACvBH,OAAO,EAAE;UAAEI,MAAM,EAAE,IAAI;UAAE,GAAGL;QAAkB;MAChD;IACF,CAAC;EACH;EAEA,OAAO;IACLE,IAAI,EAAE,QAAQ;IACdJ,IAAI,EAAEA,IAAI,KAAK,KAAK,GAAG,cAAc,GAAG;EAC1C,CAAC;AACH;;AAEA;AACA;AACA;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASQ,sBAAsBA,CAAC;EACrCC,MAAM;EACNC,MAAM;EACNC;AAC6B,CAAC,GAAG,CAAC,CAAC,EAAE;EACrC,MAAMC,UAAU,GAAGD,GAAG,GAClBE,iCAAgB,CAACC,MAAM,CAAEC,GAAG,IAAKA,GAAG,KAAK,KAAK,CAAC,GAC/CF,iCAAgB;EAEpB,MAAMG,aAAa,GAAGN,MAAM,GACxB;IACEO,OAAO,EAAE,IAAI;IACb,GAAGP;EACL,CAAC,GACDQ,SAAS;EAEb,MAAMC,KAAK,GAAG,EAAE;EAEhBA,KAAK,CAACC,IAAI,CAAC;IACThB,IAAI,EAAE,IAAAiB,yCAAwB,EAACT,UAAU,CAAC;IAC1CP,GAAG,EAAE;MACHC,MAAM,EAAE,iCAAiC;MACzCH,OAAO,EAAE;QAAEM,MAAM;QAAEC,MAAM,EAAEM;MAAc;IAC3C;EACF,CAAC,CAAC;EAEF,IAAIL,GAAG,EAAE;IACPQ,KAAK,CAACC,IAAI,CAACrB,UAAU,CAACY,GAAG,CAAC,CAAC;EAC7B;EAEA,OAAOQ,KAAK;AACd","ignoreList":[]}