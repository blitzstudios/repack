{"version":3,"file":"getJsTransformRules.js","names":["_getCodegenTransformRules","require","_getFlowTransformRules","_getSwcLoaderOptions","getJsTransformRules","options","jsRules","getSwcLoaderOptions","syntax","jsx","swc","tsRules","tsxRules","flowRules","flow","enabled","getFlowTransformRules","codegenRules","codegen","getCodegenTransformRules","type","test","oneOf","use","loader"],"sources":["../../src/utils/getJsTransformRules.ts"],"sourcesContent":["import { getCodegenTransformRules } from './getCodegenTransformRules.js';\nimport { getFlowTransformRules } from './getFlowTransformRules.js';\nimport { getSwcLoaderOptions } from './getSwcLoaderOptions.js';\n\n/**\n * Interface for {@link getJsTransformRules} options.\n */\ninterface GetJsTransformRulesOptions {\n  /** Configuration options for SWC transformations */\n  swc?: {\n    /** Whether to disable transformation of import/export statements */\n    disableImportExportTransform?: boolean;\n    /** Whether to use external helpers for transformations (equivalent of `@babel/runtime`) */\n    externalHelpers?: boolean;\n    /** The source module for JSX runtime imports (defaults to 'react') */\n    importSource?: string;\n    /** The JSX runtime to use ('automatic' for React 17+ new JSX transform or 'classic' for traditional JSX transform) */\n    jsxRuntime?: 'automatic' | 'classic';\n    /** Enable lazy loading for all imports or specific modules */\n    lazyImports?: boolean | string[];\n  };\n  /** Configuration for enabling/disabling Flow transformations */\n  flow?: {\n    /** Whether to enable Flow transformations in the JavaScript transform pipeline */\n    enabled?: boolean;\n    /** Array of module names to include for Flow transformation */\n    include?: string[];\n    /** Array of module names to exclude from Flow transformation */\n    exclude?: string[];\n    /** If true, bypasses looking for @flow pragma comment before parsing */\n    all?: boolean;\n    /** If true, removes uninitialized class fields completely rather than only removing the type */\n    ignoreUninitializedFields?: boolean;\n    /** If true, removes empty import statements which were only used for importing flow types */\n    removeEmptyImports?: boolean;\n  };\n  /** Configuration for enabling/disabling codegen transformations */\n  codegen?: {\n    /** Whether to enable codegen transformations in the JavaScript transform pipeline */\n    enabled?: boolean;\n  };\n}\n\n/**\n * Generates Rspack `module.rules` configuration for transforming JavaScript, TypeScript, and Flow files.\n * It combines SWC loader configuration for JS/TS files with Flow and codegen transformations.\n * You can consider it an equivalent of `@react-native/babel-preset`, but for SWC.\n *\n * @param options Configuration options for JavaScript/TypeScript transformations\n * @param options.swc Configuration options for SWC transformations\n * @param options.flow Configuration for enabling/disabling Flow transformations\n * @param options.codegen Configuration for enabling/disabling codegen transformations\n *\n * @returns Array of Rspack module rules for transforming JavaScript, TypeScript and Flow files\n */\nexport function getJsTransformRules(options?: GetJsTransformRulesOptions) {\n  const jsRules = getSwcLoaderOptions({\n    syntax: 'js',\n    jsx: true,\n    ...options?.swc,\n  });\n  const tsRules = getSwcLoaderOptions({\n    syntax: 'ts',\n    jsx: true,\n    ...options?.swc,\n  });\n  const tsxRules = getSwcLoaderOptions({\n    syntax: 'ts',\n    jsx: true,\n    ...options?.swc,\n  });\n\n  const flowRules =\n    options?.flow?.enabled !== false\n      ? getFlowTransformRules(options?.flow)\n      : [];\n\n  const codegenRules =\n    options?.codegen?.enabled !== false ? getCodegenTransformRules() : [];\n\n  return [\n    {\n      type: 'javascript/auto',\n      test: /\\.([cm]?[jt]sx?|flow)$/,\n      oneOf: [\n        {\n          test: /jsx?$/,\n          use: { loader: 'builtin:swc-loader', options: jsRules },\n        },\n        {\n          test: /ts$/,\n          use: { loader: 'builtin:swc-loader', options: tsRules },\n        },\n        {\n          test: /tsx$/,\n          use: { loader: 'builtin:swc-loader', options: tsxRules },\n        },\n      ],\n    },\n    ...flowRules,\n    ...codegenRules,\n  ];\n}\n"],"mappings":";;;;;;AAAA,IAAAA,yBAAA,GAAAC,OAAA;AACA,IAAAC,sBAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAF,OAAA;AAEA;AACA;AACA;;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,mBAAmBA,CAACC,OAAoC,EAAE;EACxE,MAAMC,OAAO,GAAG,IAAAC,wCAAmB,EAAC;IAClCC,MAAM,EAAE,IAAI;IACZC,GAAG,EAAE,IAAI;IACT,GAAGJ,OAAO,EAAEK;EACd,CAAC,CAAC;EACF,MAAMC,OAAO,GAAG,IAAAJ,wCAAmB,EAAC;IAClCC,MAAM,EAAE,IAAI;IACZC,GAAG,EAAE,IAAI;IACT,GAAGJ,OAAO,EAAEK;EACd,CAAC,CAAC;EACF,MAAME,QAAQ,GAAG,IAAAL,wCAAmB,EAAC;IACnCC,MAAM,EAAE,IAAI;IACZC,GAAG,EAAE,IAAI;IACT,GAAGJ,OAAO,EAAEK;EACd,CAAC,CAAC;EAEF,MAAMG,SAAS,GACbR,OAAO,EAAES,IAAI,EAAEC,OAAO,KAAK,KAAK,GAC5B,IAAAC,4CAAqB,EAACX,OAAO,EAAES,IAAI,CAAC,GACpC,EAAE;EAER,MAAMG,YAAY,GAChBZ,OAAO,EAAEa,OAAO,EAAEH,OAAO,KAAK,KAAK,GAAG,IAAAI,kDAAwB,EAAC,CAAC,GAAG,EAAE;EAEvE,OAAO,CACL;IACEC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE,wBAAwB;IAC9BC,KAAK,EAAE,CACL;MACED,IAAI,EAAE,OAAO;MACbE,GAAG,EAAE;QAAEC,MAAM,EAAE,oBAAoB;QAAEnB,OAAO,EAAEC;MAAQ;IACxD,CAAC,EACD;MACEe,IAAI,EAAE,KAAK;MACXE,GAAG,EAAE;QAAEC,MAAM,EAAE,oBAAoB;QAAEnB,OAAO,EAAEM;MAAQ;IACxD,CAAC,EACD;MACEU,IAAI,EAAE,MAAM;MACZE,GAAG,EAAE;QAAEC,MAAM,EAAE,oBAAoB;QAAEnB,OAAO,EAAEO;MAAS;IACzD,CAAC;EAEL,CAAC,EACD,GAAGC,SAAS,EACZ,GAAGI,YAAY,CAChB;AACH","ignoreList":[]}