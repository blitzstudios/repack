{"version":3,"file":"getResolveOptions.js","names":["_assetExtensions","require","getResolveOptions","platformOrOptions","options","_platform","_options","preferNativePlatform","enablePackageExports","extensions","flatMap","ext","platformExt","nativeExt","exportsFields","conditionNames","byDependency","esm","commonjs","extensionAlias","Object","fromEntries","SCALABLE_ASSETS","map","assetExt","aliases","SCALABLE_RESOLUTIONS","scale","concat","mainFields","aliasFields"],"sources":["../../src/utils/getResolveOptions.ts"],"sourcesContent":["import { SCALABLE_ASSETS, SCALABLE_RESOLUTIONS } from './assetExtensions.js';\n\ninterface GetResolveOptionsResult {\n  mainFields: string[];\n  aliasFields: string[];\n  conditionNames: string[];\n  exportsFields: string[];\n  extensions: string[];\n  extensionAlias: Record<string, string[]>;\n  byDependency: Record<string, { conditionNames: string[] }>;\n}\n\n/**\n * {@link getResolveOptions} additional options.\n */\nexport interface ResolveOptions {\n  /**\n   * Whether to enable Package Exports support. Defaults to `false`.\n   */\n  enablePackageExports?: boolean;\n  /**\n   * Whether to prefer native platform over generic platform. Defaults to `true`\n   */\n  preferNativePlatform?: boolean;\n}\n\n/**\n * Get Webpack's resolve options to properly resolve JavaScript files:\n * - resolve platform extensions (e.g. `file.ios.js`)\n * - resolve native extensions (e.g. `file.native.js`)\n * - optionally use package exports (`exports` field in `package.json`) instead of\n *   main fields (e.g. `main` or `browser` or `react-native`)\n *\n * @param platform Target application platform.\n * @param options Additional options that can modify resolution behaviour.\n * @returns Webpack's resolve options.\n *\n * @category Webpack util\n *\n * @example Usage in Webpack config:\n *\n * ```ts\n * import * as Repack from '@callstack/repack';\n *\n * export default (env) => {\n *   const { platform } = env;\n *\n *   return {\n *     resolve: {\n *       ...Repack.getResolveOptions(platform, {\n *         enablePackageExports: false,\n *         preferNativePlatform: true\n *       }),\n *     },\n *   };\n * };\n * ```\n */\n\nexport function getResolveOptions(\n  options?: ResolveOptions\n): GetResolveOptionsResult;\n\nexport function getResolveOptions(\n  platform: string,\n  options?: ResolveOptions\n): GetResolveOptionsResult;\n\nexport function getResolveOptions(\n  platformOrOptions: unknown,\n  options?: ResolveOptions\n): GetResolveOptionsResult {\n  /* If platform is undefined, use '[platform]' as placeholder */\n  const _platform =\n    typeof platformOrOptions === 'string' ? platformOrOptions : '[platform]';\n  const _options = (\n    typeof platformOrOptions === 'object' ? platformOrOptions : options\n  ) as ResolveOptions | undefined;\n\n  const preferNativePlatform = _options?.preferNativePlatform ?? true;\n  const enablePackageExports = _options?.enablePackageExports ?? false;\n\n  let extensions = ['.js', '.jsx', '.ts', '.tsx', '.json'];\n\n  /* Add platform (e.g. `.ios`, `.android`) and native (`.native`) extensions */\n  extensions = extensions.flatMap((ext) => {\n    const platformExt = `.${_platform}${ext}`;\n    const nativeExt = `.native${ext}`;\n\n    if (preferNativePlatform) {\n      return [platformExt, nativeExt, ext];\n    }\n    return [platformExt, ext];\n  });\n\n  let exportsFields: string[];\n  let conditionNames: string[];\n\n  if (enablePackageExports) {\n    /**\n     * Match what React Native uses in @react-native/metro-config.\n     * Order of conditionNames doesn't matter.\n     * Order inside of target package.json's `exports` field matters.\n     */\n    exportsFields = ['exports'];\n    conditionNames = ['react-native'];\n  } else {\n    conditionNames = [];\n    exportsFields = [];\n  }\n\n  /**\n   * We add `import` and `require` to conditionNames everytime\n   * because package imports are enabled at all times in metro\n   * and they need condition names to be defined.\n   */\n  const byDependency = {\n    esm: { conditionNames: ['import'] },\n    commonjs: { conditionNames: ['require'] },\n  };\n\n  /**\n   * Match what React Native uses from metro-config.\n   * Usage of 'extensionAlias' removes the need for\n   * AssetResolverPlugin altogether.\n   */\n  const extensionAlias = Object.fromEntries(\n    SCALABLE_ASSETS.map((assetExt) => {\n      const ext = '.' + assetExt;\n      const aliases = SCALABLE_RESOLUTIONS.map((scale) => {\n        return '@' + scale + 'x' + ext;\n      });\n      return [ext, aliases.concat(ext)];\n    })\n  );\n\n  /**\n   * Match what React Native uses in @react-native/metro-config.\n   * First entry takes precedence.\n   *\n   * Reference: https://github.com/facebook/react-native/blob/main/packages/metro-config/src/index.flow.js\n   */\n  return {\n    /**\n     * Reference: Webpack's [configuration.resolve.mainFields](https://webpack.js.org/configuration/resolve/#resolvemainfields)\n     */\n    mainFields: ['react-native', 'browser', 'main'],\n    /**\n     * Reference: Webpack's [configuration.resolve.aliasFields](https://webpack.js.org/configuration/resolve/#resolvealiasfields)\n     */\n    aliasFields: ['react-native', 'browser', 'main'],\n    /**\n     * Reference: Webpack's [configuration.resolve.conditionNames](https://webpack.js.org/configuration/resolve/#resolveconditionnames)\n     */\n    conditionNames: conditionNames,\n    /**\n     * Reference: Webpack's [configuration.resolve.exportsFields](https://webpack.js.org/configuration/resolve/#resolveexportsfields)\n     */\n    exportsFields: exportsFields,\n    /**\n     * Reference: Webpack's [configuration.resolve.extensions](https://webpack.js.org/configuration/resolve/#resolveextensions)\n     */\n    extensions: extensions,\n    /**\n     * Reference: Webpack's [configuration.resolve.extensionAlias](https://webpack.js.org/configuration/resolve/#resolveextensionalias)\n     */\n    extensionAlias: extensionAlias,\n    /**\n     * Reference: Webpack's [configuration.resolve.byDependency](https://webpack.js.org/configuration/resolve/#resolvebydependency)\n     */\n    byDependency: byDependency,\n  };\n}\n"],"mappings":";;;;;;AAAA,IAAAA,gBAAA,GAAAC,OAAA;AAYA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWO,SAASC,iBAAiBA,CAC/BC,iBAA0B,EAC1BC,OAAwB,EACC;EACzB;EACA,MAAMC,SAAS,GACb,OAAOF,iBAAiB,KAAK,QAAQ,GAAGA,iBAAiB,GAAG,YAAY;EAC1E,MAAMG,QAAQ,GACZ,OAAOH,iBAAiB,KAAK,QAAQ,GAAGA,iBAAiB,GAAGC,OAC/B;EAE/B,MAAMG,oBAAoB,GAAGD,QAAQ,EAAEC,oBAAoB,IAAI,IAAI;EACnE,MAAMC,oBAAoB,GAAGF,QAAQ,EAAEE,oBAAoB,IAAI,KAAK;EAEpE,IAAIC,UAAU,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC;;EAExD;EACAA,UAAU,GAAGA,UAAU,CAACC,OAAO,CAAEC,GAAG,IAAK;IACvC,MAAMC,WAAW,GAAG,IAAIP,SAAS,GAAGM,GAAG,EAAE;IACzC,MAAME,SAAS,GAAG,UAAUF,GAAG,EAAE;IAEjC,IAAIJ,oBAAoB,EAAE;MACxB,OAAO,CAACK,WAAW,EAAEC,SAAS,EAAEF,GAAG,CAAC;IACtC;IACA,OAAO,CAACC,WAAW,EAAED,GAAG,CAAC;EAC3B,CAAC,CAAC;EAEF,IAAIG,aAAuB;EAC3B,IAAIC,cAAwB;EAE5B,IAAIP,oBAAoB,EAAE;IACxB;AACJ;AACA;AACA;AACA;IACIM,aAAa,GAAG,CAAC,SAAS,CAAC;IAC3BC,cAAc,GAAG,CAAC,cAAc,CAAC;EACnC,CAAC,MAAM;IACLA,cAAc,GAAG,EAAE;IACnBD,aAAa,GAAG,EAAE;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAME,YAAY,GAAG;IACnBC,GAAG,EAAE;MAAEF,cAAc,EAAE,CAAC,QAAQ;IAAE,CAAC;IACnCG,QAAQ,EAAE;MAAEH,cAAc,EAAE,CAAC,SAAS;IAAE;EAC1C,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMI,cAAc,GAAGC,MAAM,CAACC,WAAW,CACvCC,gCAAe,CAACC,GAAG,CAAEC,QAAQ,IAAK;IAChC,MAAMb,GAAG,GAAG,GAAG,GAAGa,QAAQ;IAC1B,MAAMC,OAAO,GAAGC,qCAAoB,CAACH,GAAG,CAAEI,KAAK,IAAK;MAClD,OAAO,GAAG,GAAGA,KAAK,GAAG,GAAG,GAAGhB,GAAG;IAChC,CAAC,CAAC;IACF,OAAO,CAACA,GAAG,EAAEc,OAAO,CAACG,MAAM,CAACjB,GAAG,CAAC,CAAC;EACnC,CAAC,CACH,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,OAAO;IACL;AACJ;AACA;IACIkB,UAAU,EAAE,CAAC,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC;IAC/C;AACJ;AACA;IACIC,WAAW,EAAE,CAAC,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC;IAChD;AACJ;AACA;IACIf,cAAc,EAAEA,cAAc;IAC9B;AACJ;AACA;IACID,aAAa,EAAEA,aAAa;IAC5B;AACJ;AACA;IACIL,UAAU,EAAEA,UAAU;IACtB;AACJ;AACA;IACIU,cAAc,EAAEA,cAAc;IAC9B;AACJ;AACA;IACIH,YAAY,EAAEA;EAChB,CAAC;AACH","ignoreList":[]}