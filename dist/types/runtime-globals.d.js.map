{"version":3,"file":"runtime-globals.d.js","names":[],"sources":["../../src/types/runtime-globals.d.ts"],"sourcesContent":["declare namespace RepackRuntimeGlobals {\n  declare interface HMRInfo {\n    type: string;\n    chain: Array<string | number>;\n    error?: Error;\n    moduleId: string | number;\n  }\n\n  declare type HMRStatus =\n    | 'idle'\n    | 'check'\n    | 'prepare'\n    | 'ready'\n    | 'dispose'\n    | 'apply'\n    | 'abort'\n    | 'fail';\n\n  declare interface HMRApplyOptions {\n    ignoreUnaccepted?: boolean;\n    ignoreDeclined?: boolean;\n    ignoreErrored?: boolean;\n    onDeclined?: (info: HMRInfo) => void;\n    onUnaccepted?: (info: HMRInfo) => void;\n    onAccepted?: (info: HMRInfo) => void;\n    onDisposed?: (info: HMRInfo) => void;\n    onErrored?: (info: HMRInfo) => void;\n  }\n\n  declare interface HotApi {\n    status(): HMRStatus;\n    check(autoPlay: boolean | HMRApplyOptions): Promise<Array<string | number>>;\n    apply(options: HMRApplyOptions): Promise<Array<string | number>>;\n  }\n\n  declare interface LoadScriptEvent {\n    type: 'load' | string;\n    target?: { src: string };\n  }\n\n  declare interface RepackRuntimeObject {\n    shared: {\n      scriptManager?: import(\n        '../modules/ScriptManager/ScriptManager.js'\n      ).ScriptManager;\n      enqueuedResolvers: [\n        import('../modules/ScriptManager/types.js').ScriptLocatorResolver,\n        { key?: string },\n      ][];\n    };\n  }\n\n  declare type ModuleExports = Record<string | number | symbol, any>;\n\n  declare type ModuleObject = {\n    id: number;\n    loaded: boolean;\n    error?: any;\n    exports: ModuleExports;\n  };\n\n  declare type WebpackModuleExecutionInterceptor = ((options: {\n    id: number;\n    factory: (\n      moduleObject: ModuleObject,\n      moduleExports: ModuleExports,\n      webpackRequire: WebpackRequire\n    ) => void;\n    module: ModuleObject;\n    require: WebpackRequire;\n  }) => void)[];\n\n  declare type WebpackLoadScript = (\n    url: string,\n    done: (event?: LoadScriptEvent) => void,\n    key?: string,\n    chunkId?: string\n  ) => void;\n\n  declare type WebpackPublicPath = () => string;\n\n  declare type WebpackGetChunkScriptFilename = (id: string) => string;\n\n  declare type WebpackRequire = {\n    (moduleId: string): ModuleExports;\n    i: WebpackModuleExecutionInterceptor;\n    l: WebpackLoadScript;\n    p: WebpackPublicPath;\n    u: WebpackGetChunkScriptFilename;\n    repack: RepackRuntimeObject;\n  };\n}\n\ndeclare var __DEV__: boolean;\ndeclare var __PUBLIC_PROTOCOL__: string;\ndeclare var __PUBLIC_HOST__: string;\ndeclare var __PUBLIC_PORT__: number;\ndeclare var __LISTENER_IP__: string;\ndeclare var __PLATFORM__: string;\ndeclare var __REACT_NATIVE_MAJOR_VERSION__: number;\ndeclare var __REACT_NATIVE_MINOR_VERSION__: number;\ndeclare var __REACT_NATIVE_PATCH_VERSION__: number;\ndeclare var __webpack_public_path__: string;\ndeclare var __webpack_hash__: string;\ndeclare var __repack__: RepackRuntimeGlobals.RepackRuntimeObject;\ndeclare var __webpack_require__: RepackRuntimeGlobals.WebpackRequire;\n\ndeclare interface NodeModule {\n  hot?: RepackRuntimeGlobals.HotApi;\n}\n"],"mappings":"","ignoreList":[]}