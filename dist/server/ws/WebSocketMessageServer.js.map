{"version":3,"sources":["../../../src/server/ws/WebSocketMessageServer.ts"],"names":["WebSocketMessageServer","WebSocketServer","isBroadcast","message","method","id","undefined","target","isRequest","isResponse","requestId","clientId","result","error","constructor","fastify","Map","parseMessage","data","binary","log","msg","JSON","parse","version","PROTOCOL_VERSION","toString","e","getClientSocket","socket","clients","get","Error","handleError","errorMessage","params","send","stringify","forwardRequest","forwardResponse","processServerRequest","output","forEach","peerSocket","peerId","searchParams","URL","upgradeReq","url","entries","reduce","acc","key","value","sendBroadcast","broadcasterId","forwarded","size","warn","broadcast","onConnection","request","nextClientId","client","set","debug","onClose","removeAllListeners","delete","addEventListener","event"],"mappings":"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","sourcesContent":["import { IncomingMessage } from 'http';\nimport { URL } from 'url';\nimport WebSocket from 'ws';\nimport { FastifyDevServer } from '../types';\nimport { WebSocketServer } from './WebSocketServer';\n\n/**\n * Holds {@link ReactNativeMessage} `id` data.\n */\nexport interface ReactNativeIdObject {\n  requestId: string;\n  clientId: string;\n}\n\n/**\n * Message representation used by {@link WebSocketMessageServer}.\n */\nexport interface ReactNativeMessage {\n  version?: string;\n  id?: ReactNativeIdObject;\n  method?: string;\n  target: string;\n  result?: any;\n  error?: Error;\n  params?: Record<string, any>;\n}\n\ntype WebSocketWithUpgradeReq = WebSocket & { upgradeReq?: IncomingMessage };\n\n/**\n * Class for creating a WebSocket server and sending messages between development server\n * and the React Native applications.\n *\n * Based on: https://github.com/react-native-community/cli/blob/v4.14.0/packages/cli-server-api/src/websocket/messageSocketServer.ts\n *\n * @category Development server\n */\nexport class WebSocketMessageServer extends WebSocketServer {\n  static readonly PROTOCOL_VERSION = 2;\n\n  /**\n   * Check if message is a broadcast request.\n   *\n   * @param message Message to check.\n   * @returns True if message is a broadcast request and should be broadcasted\n   * with {@link sendBroadcast}.\n   */\n  static isBroadcast(message: Partial<ReactNativeMessage>) {\n    return (\n      typeof message.method === 'string' &&\n      message.id === undefined &&\n      message.target === undefined\n    );\n  }\n\n  /**\n   * Check if message is a method request.\n   *\n   * @param message Message to check.\n   * @returns True if message is a request.\n   */\n  static isRequest(message: Partial<ReactNativeMessage>) {\n    return (\n      typeof message.method === 'string' && typeof message.target === 'string'\n    );\n  }\n\n  /**\n   * Check if message is a response with results of performing some request.\n   *\n   * @param message Message to check.\n   * @returns True if message is a response.\n   */\n  static isResponse(message: Partial<ReactNativeMessage>) {\n    return (\n      typeof message.id === 'object' &&\n      typeof message.id.requestId !== 'undefined' &&\n      typeof message.id.clientId === 'string' &&\n      (message.result !== undefined || message.error !== undefined)\n    );\n  }\n\n  private clients = new Map<string, WebSocketWithUpgradeReq>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketMessageServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   */\n  constructor(fastify: FastifyDevServer) {\n    super(fastify, '/message');\n  }\n\n  /**\n   * Parse stringified message into a {@link ReactNativeMessage}.\n   *\n   * @param data Stringified message.\n   * @param binary Additional binary data if any.\n   * @returns Parsed message or `undefined` if parsing failed.\n   */\n  parseMessage(\n    data: string,\n    binary: any\n  ): Partial<ReactNativeMessage> | undefined {\n    if (binary) {\n      this.fastify.log.error({\n        msg: 'Failed to parse message - expected text message, got binary',\n      });\n      return undefined;\n    }\n    try {\n      const message = JSON.parse(data) as Partial<ReactNativeMessage>;\n      if (\n        message.version === WebSocketMessageServer.PROTOCOL_VERSION.toString()\n      ) {\n        return message;\n      }\n      this.fastify.log.error({\n        msg: 'Received message had wrong protocol version',\n        message,\n      });\n    } catch (e) {\n      this.fastify.log.error({\n        msg: 'Failed to parse the message as JSON',\n        data,\n      });\n    }\n    return undefined;\n  }\n\n  /**\n   * Get client's WebSocket connection for given `clientId`.\n   * Throws if no such client is connected.\n   *\n   * @param clientId Id of the client.\n   * @returns WebSocket connection.\n   */\n  getClientSocket(clientId: string) {\n    const socket = this.clients.get(clientId);\n    if (socket === undefined) {\n      throw new Error(`Could not find client with id \"${clientId}\"`);\n    }\n    return socket;\n  }\n\n  /**\n   * Process error by sending an error message to the client whose message caused the error\n   * to occur.\n   *\n   * @param clientId Id of the client whose message caused an error.\n   * @param message Original message which caused the error.\n   * @param error Concrete instance of an error that occurred.\n   */\n  handleError(\n    clientId: string,\n    message: Partial<ReactNativeMessage>,\n    error: Error\n  ) {\n    const errorMessage = {\n      id: message.id,\n      method: message.method,\n      target: message.target,\n      error: message.error === undefined ? 'undefined' : 'defined',\n      params: message.params === undefined ? 'undefined' : 'defined',\n      result: message.result === undefined ? 'undefined' : 'defined',\n    };\n\n    if (message.id === undefined) {\n      this.fastify.log.error({\n        msg: 'Handling message failed',\n        clientId,\n        error,\n        errorMessage,\n      });\n    } else {\n      try {\n        const socket = this.getClientSocket(clientId);\n        socket.send(\n          JSON.stringify({\n            version: WebSocketMessageServer.PROTOCOL_VERSION,\n            error,\n            id: message.id,\n          })\n        );\n      } catch (error) {\n        this.fastify.log.error('Failed to reply', {\n          clientId,\n          error,\n          errorMessage,\n        });\n      }\n    }\n  }\n\n  /**\n   * Send given request `message` to it's designated client's socket based on `message.target`.\n   * The target client must be connected, otherwise it will throw an error.\n   *\n   * @param clientId Id of the client that requested the forward.\n   * @param message Message to forward.\n   */\n  forwardRequest(clientId: string, message: Partial<ReactNativeMessage>) {\n    if (!message.target) {\n      this.fastify.log.error({\n        msg: 'Failed to forward request - message.target is missing',\n        clientId,\n        message,\n      });\n      return;\n    }\n\n    const socket = this.getClientSocket(message.target);\n    socket.send(\n      JSON.stringify({\n        version: WebSocketMessageServer.PROTOCOL_VERSION,\n        method: message.method,\n        params: message.params,\n        id:\n          message.id === undefined\n            ? undefined\n            : { requestId: message.id, clientId },\n      })\n    );\n  }\n\n  /**\n   * Send given response `message` to it's designated client's socket based\n   * on `message.id.clientId`.\n   * The target client must be connected, otherwise it will throw an error.\n   *\n   * @param message Message to forward.\n   */\n  forwardResponse(message: Partial<ReactNativeMessage>) {\n    if (!message.id) {\n      return;\n    }\n\n    const socket = this.getClientSocket(message.id.clientId);\n    socket.send(\n      JSON.stringify({\n        version: WebSocketMessageServer.PROTOCOL_VERSION,\n        result: message.result,\n        error: message.error,\n        id: message.id.requestId,\n      })\n    );\n  }\n\n  /**\n   * Process request message targeted towards this {@link WebSocketMessageServer}\n   * and send back the results.\n   *\n   * @param clientId Id of the client who send the message.\n   * @param message The message to process by the server.\n   */\n  processServerRequest(clientId: string, message: Partial<ReactNativeMessage>) {\n    let result: string | Record<string, Record<string, string>>;\n\n    switch (message.method) {\n      case 'getid':\n        result = clientId;\n        break;\n      case 'getpeers': {\n        const output: Record<string, Record<string, string>> = {};\n        this.clients.forEach((peerSocket, peerId) => {\n          if (clientId !== peerId) {\n            const { searchParams } = new URL(peerSocket.upgradeReq?.url || '');\n            output[peerId] = [...searchParams.entries()].reduce(\n              (acc, [key, value]) => ({\n                ...acc,\n                [key]: value,\n              }),\n              {}\n            );\n          }\n        });\n        result = output;\n        break;\n      }\n      default:\n        throw new Error(\n          `Cannot process server request - unknown method ${JSON.stringify({\n            clientId,\n            message,\n          })}`\n        );\n    }\n\n    const socket = this.getClientSocket(clientId);\n    socket.send(\n      JSON.stringify({\n        version: WebSocketMessageServer.PROTOCOL_VERSION,\n        result,\n        id: message.id,\n      })\n    );\n  }\n\n  /**\n   * Broadcast given message to all connected clients.\n   *\n   * @param broadcasterId Id of the client who is broadcasting.\n   * @param message Message to broadcast.\n   */\n  sendBroadcast(\n    broadcasterId: string | undefined,\n    message: Partial<ReactNativeMessage>\n  ) {\n    const forwarded = {\n      version: WebSocketMessageServer.PROTOCOL_VERSION,\n      method: message.method,\n      params: message.params,\n    };\n\n    if (this.clients.size === 0) {\n      this.fastify.log.warn({\n        msg:\n          'No apps connected. ' +\n          `Sending \"${message.method}\" to all React Native apps failed. ` +\n          'Make sure your app is running in the simulator or on a phone connected via USB.',\n      });\n    }\n\n    for (const [clientId, socket] of this.clients) {\n      if (clientId !== broadcasterId) {\n        try {\n          socket.send(JSON.stringify(forwarded));\n        } catch (error) {\n          this.fastify.log.error({\n            msg: 'Failed to send broadcast',\n            clientId,\n            error,\n            forwarded,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Send method broadcast to all connected clients.\n   *\n   * @param method Method name to broadcast.\n   * @param params Method parameters.\n   */\n  broadcast(method: string, params?: Record<string, any>) {\n    this.sendBroadcast(undefined, { method, params });\n  }\n\n  /**\n   * Process new client's WebSocket connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   * @param request Upgrade request for the connection.\n   */\n  onConnection(socket: WebSocket, request: IncomingMessage) {\n    const clientId = `client#${this.nextClientId++}`;\n    let client: WebSocketWithUpgradeReq = socket;\n    client.upgradeReq = request;\n    this.clients.set(clientId, client);\n    this.fastify.log.debug({ msg: 'Message client connected', clientId });\n\n    const onClose = () => {\n      this.fastify.log.debug({ msg: 'Message client disconnected', clientId });\n      socket.removeAllListeners();\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n    socket.addEventListener('message', (event) => {\n      const message = this.parseMessage(\n        event.data,\n        // @ts-ignore\n        event.binary\n      );\n\n      if (!message) {\n        this.fastify.log.error({\n          msg: 'Received message not matching protocol',\n          clientId,\n          message,\n        });\n        return;\n      }\n\n      try {\n        if (WebSocketMessageServer.isBroadcast(message)) {\n          this.sendBroadcast(clientId, message);\n        } else if (WebSocketMessageServer.isRequest(message)) {\n          if (message.target === 'server') {\n            this.processServerRequest(clientId, message);\n          } else {\n            this.forwardRequest(clientId, message);\n          }\n        } else if (WebSocketMessageServer.isResponse(message)) {\n          this.forwardResponse(message);\n        } else {\n          throw new Error(\n            `Invalid message, did not match the protocol ${JSON.stringify({\n              clientId,\n              message,\n            })}`\n          );\n        }\n      } catch (error) {\n        this.handleError(clientId, message, error as Error);\n      }\n    });\n  }\n}\n"],"file":"WebSocketMessageServer.js"}