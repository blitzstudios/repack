{"version":3,"sources":["../../../src/server/ws/WebSocketDevClientServer.ts"],"names":["WebSocketDevClientServer","WebSocketServer","constructor","fastify","Map","processMessage","message","type","body","JSON","parse","level","log","error","issuer","msg","data","warn","info","onConnection","socket","clientId","nextClientId","clients","set","onClose","delete","addEventListener","event","toString"],"mappings":";;;;;;;AAEA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,wBAAN,SAAuCC,gCAAvC,CAAuD;AAI5D;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,OAAD,EAA4B;AACrC,UAAMA,OAAN,EAAe,WAAf;;AADqC,qCATrB,IAAIC,GAAJ,EASqB;;AAAA,0CARhB,CAQgB;AAEtC;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,cAAc,CAACC,OAAD,EAAkB;AAC9B,UAAM;AAAEC,MAAAA,IAAF;AAAQ,SAAGC;AAAX,QAAoBC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAA1B;;AACA,YAAQC,IAAR;AACE,WAAK,YAAL;AACE,YAAIC,IAAI,CAACG,KAAL,KAAe,OAAnB,EAA4B;AAC1B,eAAKR,OAAL,CAAaS,GAAb,CAAiBC,KAAjB,CAAuB;AAAEC,YAAAA,MAAM,EAAE,SAAV;AAAqBC,YAAAA,GAAG,EAAEP,IAAI,CAACQ;AAA/B,WAAvB;AACD,SAFD,MAEO,IAAIR,IAAI,CAACG,KAAL,KAAe,MAAnB,EAA2B;AAChC,eAAKR,OAAL,CAAaS,GAAb,CAAiBK,IAAjB,CAAsB;AAAEH,YAAAA,MAAM,EAAE,SAAV;AAAqBC,YAAAA,GAAG,EAAEP,IAAI,CAACQ;AAA/B,WAAtB;AACD,SAFM,MAEA;AACL,eAAKb,OAAL,CAAaS,GAAb,CAAiBM,IAAjB,CAAsB;AAAEJ,YAAAA,MAAM,EAAE,SAAV;AAAqBC,YAAAA,GAAG,EAAEP,IAAI,CAACQ;AAA/B,WAAtB;AACD;;AACD;;AACF;AACE,aAAKb,OAAL,CAAaS,GAAb,CAAiBK,IAAjB,CAAsB;AAAEF,UAAAA,GAAG,EAAE,wBAAP;AAAiCT,UAAAA;AAAjC,SAAtB;AAXJ;AAaD;AAED;AACF;AACA;AACA;AACA;;;AACEa,EAAAA,YAAY,CAACC,MAAD,EAAoB;AAC9B,UAAMC,QAAQ,GAAI,UAAS,KAAKC,YAAL,EAAoB,EAA/C;AACA,SAAKC,OAAL,CAAaC,GAAb,CAAiBH,QAAjB,EAA2BD,MAA3B;AAEA,SAAKjB,OAAL,CAAaS,GAAb,CAAiBM,IAAjB,CAAsB;AAAEH,MAAAA,GAAG,EAAE,+BAAP;AAAwCM,MAAAA;AAAxC,KAAtB;AACA,SAAKE,OAAL,CAAaC,GAAb,CAAiBH,QAAjB,EAA2BD,MAA3B;;AAEA,UAAMK,OAAO,GAAG,MAAM;AACpB,WAAKtB,OAAL,CAAaS,GAAb,CAAiBM,IAAjB,CAAsB;AACpBH,QAAAA,GAAG,EAAE,kCADe;AAEpBM,QAAAA;AAFoB,OAAtB;AAIA,WAAKE,OAAL,CAAaG,MAAb,CAAoBL,QAApB;AACD,KAND;;AAQAD,IAAAA,MAAM,CAACO,gBAAP,CAAwB,OAAxB,EAAiCF,OAAjC;AACAL,IAAAA,MAAM,CAACO,gBAAP,CAAwB,OAAxB,EAAiCF,OAAjC;AACAL,IAAAA,MAAM,CAACO,gBAAP,CAAwB,SAAxB,EAAoCC,KAAD,IAAW;AAC5C,WAAKvB,cAAL,CAAoBuB,KAAK,CAACZ,IAAN,CAAWa,QAAX,EAApB;AACD,KAFD;AAGD;;AA7D2D","sourcesContent":["import WebSocket from 'ws';\nimport { FastifyDevServer } from '../types';\nimport { WebSocketServer } from './WebSocketServer';\n\n/**\n * Class for creating a WebSocket server for communication with React Native clients.\n * All client logs - logs from React Native application - are processed here.\n *\n * @category Development server\n */\nexport class WebSocketDevClientServer extends WebSocketServer {\n  private clients = new Map<string, WebSocket>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketDevClientServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   */\n  constructor(fastify: FastifyDevServer) {\n    super(fastify, '/__client');\n  }\n\n  /**\n   * Process client message.\n   *\n   * @param message Stringified client message.\n   */\n  processMessage(message: string) {\n    const { type, ...body } = JSON.parse(message);\n    switch (type) {\n      case 'client-log':\n        if (body.level === 'error') {\n          this.fastify.log.error({ issuer: 'Console', msg: body.data });\n        } else if (body.level === 'warn') {\n          this.fastify.log.warn({ issuer: 'Console', msg: body.data });\n        } else {\n          this.fastify.log.info({ issuer: 'Console', msg: body.data });\n        }\n        break;\n      default:\n        this.fastify.log.warn({ msg: 'Unknown client message', message });\n    }\n  }\n\n  /**\n   * Process new WebSocket connection from client application.\n   *\n   * @param socket Incoming client's WebSocket connection.\n   */\n  onConnection(socket: WebSocket) {\n    const clientId = `client#${this.nextClientId++}`;\n    this.clients.set(clientId, socket);\n\n    this.fastify.log.info({ msg: 'React Native client connected', clientId });\n    this.clients.set(clientId, socket);\n\n    const onClose = () => {\n      this.fastify.log.info({\n        msg: 'React Native client disconnected',\n        clientId,\n      });\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n    socket.addEventListener('message', (event) => {\n      this.processMessage(event.data.toString());\n    });\n  }\n}\n"],"file":"WebSocketDevClientServer.js"}