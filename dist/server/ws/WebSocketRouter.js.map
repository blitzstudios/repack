{"version":3,"sources":["../../../src/server/ws/WebSocketRouter.ts"],"names":["WebSocketRouter","constructor","fastify","server","on","request","socket","head","pathname","URL","url","matched","servers","shouldUpgrade","upgrade","log","debug","msg","destroy","registerServer","push"],"mappings":";;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,eAAN,CAAsB;AAC3B;;AAGA;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAASC,OAAT,EAAoC;AAAA,SAA3BA,OAA2B,GAA3BA,OAA2B;;AAAA,qCARR,EAQQ;;AAC7C,SAAKA,OAAL,CAAaC,MAAb,CAAoBC,EAApB,CACE,SADF,EAEE,CAACC,OAAD,EAA2BC,MAA3B,EAA2CC,IAA3C,KAA4D;AAC1D,YAAM;AAAEC,QAAAA;AAAF,UAAe,IAAIC,GAAJ,CAAQJ,OAAO,CAACK,GAAR,IAAe,EAAvB,EAA2B,kBAA3B,CAArB;AACA,UAAIC,OAAO,GAAG,KAAd;;AACA,WAAK,MAAMR,MAAX,IAAqB,KAAKS,OAA1B,EAAmC;AACjC,YAAIT,MAAM,CAACU,aAAP,CAAqBL,QAArB,CAAJ,EAAoC;AAClCG,UAAAA,OAAO,GAAG,IAAV;AACAR,UAAAA,MAAM,CAACW,OAAP,CAAeT,OAAf,EAAwBC,MAAxB,EAAgCC,IAAhC;AACA;AACD;AACF;;AAED,UAAI,CAACI,OAAL,EAAc;AACZ,aAAKT,OAAL,CAAaa,GAAb,CAAiBC,KAAjB,CAAuB;AACrBC,UAAAA,GAAG,EAAE,uDADgB;AAErBT,UAAAA;AAFqB,SAAvB;AAIAF,QAAAA,MAAM,CAACY,OAAP;AACD;AACF,KApBH;AAsBD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,cAAc,CAA4BhB,MAA5B,EAA0C;AACtD,SAAKS,OAAL,CAAaQ,IAAb,CAAkBjB,MAAlB;AACA,WAAOA,MAAP;AACD;;AA7C0B","sourcesContent":["import { IncomingMessage } from 'http';\nimport { Socket } from 'net';\nimport { FastifyDevServer } from '../types';\nimport { WebSocketServer } from './WebSocketServer';\n\n/**\n * Class for creating a WebSocket router to forward connections to the\n * respective {@link WebSocketServer} as long as the connection is accepted for the upgrade by the\n * server.\n *\n * If the connection is not accepted by any `WebSocketServer`, it will be destroyed to avoid\n * creating handling connections and potentially throwing `ECONNRESET` errors.\n *\n * @category Development server\n */\nexport class WebSocketRouter {\n  /** The list of all register WebSocket servers. */\n  protected servers: WebSocketServer[] = [];\n\n  /**\n   * Create new instance of `WebSocketRouter` and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket router to.\n   */\n  constructor(private fastify: FastifyDevServer) {\n    this.fastify.server.on(\n      'upgrade',\n      (request: IncomingMessage, socket: Socket, head: Buffer) => {\n        const { pathname } = new URL(request.url || '', 'http://localhost');\n        let matched = false;\n        for (const server of this.servers) {\n          if (server.shouldUpgrade(pathname)) {\n            matched = true;\n            server.upgrade(request, socket, head);\n            break;\n          }\n        }\n\n        if (!matched) {\n          this.fastify.log.debug({\n            msg: 'Destroying socket connection as no server was matched',\n            pathname,\n          });\n          socket.destroy();\n        }\n      }\n    );\n  }\n\n  /**\n   * Register a new {@link WebSocketServer}. New connection will now\n   * check if the given server will accept them and forward them.\n   *\n   * @param server WebSocket server to register.\n   * @returns The same instance of the WebSocket server after it's been registered.\n   */\n  registerServer<T extends WebSocketServer>(server: T): T {\n    this.servers.push(server);\n    return server;\n  }\n}\n"],"file":"WebSocketRouter.js"}