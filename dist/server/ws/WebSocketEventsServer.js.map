{"version":3,"sources":["../../../src/server/ws/WebSocketEventsServer.ts"],"names":["WebSocketEventsServer","WebSocketServer","constructor","fastify","config","verifyClient","origin","test","Map","parseMessage","data","message","JSON","parse","version","PROTOCOL_VERSION","log","error","msg","undefined","serializeMessage","toSerialize","Error","escapeString","highlight","maxDepth","min","type","map","item","plugins","prettyFormat","ReactElement","stringify","broadcastEvent","event","clients","size","serialized","clientId","socket","entries","send","_skipBroadcast","onConnection","nextClientId","set","debug","onClose","removeAllListeners","delete","addEventListener","toString","webSocketMessageServer","broadcast","command","params"],"mappings":"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","sourcesContent":["import WebSocket from 'ws';\nimport prettyFormat from 'pretty-format';\nimport { FastifyDevServer } from '../types';\nimport { WebSocketServer } from './WebSocketServer';\nimport { WebSocketMessageServer } from './WebSocketMessageServer';\n\n/**\n * {@link WebSocketEventsServer} configuration options.\n */\nexport interface WebSocketEventsServerConfig {\n  /** Instance of a {@link WebSocketMessageServer} which can be used for broadcasting. */\n  webSocketMessageServer: WebSocketMessageServer;\n}\n\n/**\n * Represents a command that connected clients can send to the {@link WebSocketEventsServer}.\n */\nexport interface Command {\n  version: number;\n  type: 'command';\n  command: string;\n  params?: any;\n}\n\n/**\n * Represents an event message.\n */\nexport interface EventMessage {\n  error?: Error | string;\n  type?: string;\n  data?: any;\n}\n\n/**\n * Class for creating a WebSocket server to process events and reports.\n *\n * Based on: https://github.com/react-native-community/cli/blob/v4.14.0/packages/cli-server-api/src/websocket/eventsSocketServer.ts\n *\n * @category Development server\n */\nexport class WebSocketEventsServer extends WebSocketServer {\n  static readonly PROTOCOL_VERSION = 2;\n\n  private clients = new Map<string, WebSocket>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketHMRServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   * @param config Configuration object.\n   */\n  constructor(\n    fastify: FastifyDevServer,\n    private config: WebSocketEventsServerConfig\n  ) {\n    super(fastify, '/events', {\n      verifyClient: (({ origin }) => {\n        return /^(https?:\\/\\/localhost|file:\\/\\/)/.test(origin);\n      }) as WebSocket.VerifyClientCallbackSync,\n    });\n  }\n\n  /**\n   * Parse received command message from connected client.\n   *\n   * @param data Stringified command message to parse.\n   * @returns Parsed command or `undefined` if parsing failed.\n   */\n  parseMessage(data: string): Command | undefined {\n    try {\n      const message = JSON.parse(data);\n      if (message.version === WebSocketEventsServer.PROTOCOL_VERSION) {\n        return message;\n      }\n      this.fastify.log.error({\n        msg: 'Received message had wrong protocol version',\n        message,\n      });\n    } catch {\n      this.fastify.log.error({\n        msg: 'Failed to parse the message as JSON',\n        data,\n      });\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Stringify `message` into a format that can be transported as a `string`.\n   *\n   * @param message Message to serialize.\n   * @returns String representation of a `message` or `undefined` if serialization failed.\n   */\n  serializeMessage(message: EventMessage) {\n    let toSerialize = message;\n    if (message.error && message.error instanceof Error) {\n      toSerialize = {\n        ...message,\n        error: prettyFormat(message.error, {\n          escapeString: true,\n          highlight: true,\n          maxDepth: 3,\n          min: true,\n        }),\n      };\n    } else if (message && message.type === 'client_log') {\n      toSerialize = {\n        ...message,\n        data: message.data.map((item: any) =>\n          typeof item === 'string'\n            ? item\n            : prettyFormat(item, {\n                escapeString: true,\n                highlight: true,\n                maxDepth: 3,\n                min: true,\n                plugins: [prettyFormat.plugins.ReactElement],\n              })\n        ),\n      };\n    }\n    try {\n      return JSON.stringify(toSerialize);\n    } catch (error) {\n      this.fastify.log.error({ msg: 'Failed to serialize', error });\n      return undefined;\n    }\n  }\n\n  /**\n   * Broadcast event to all connected clients.\n   *\n   * @param event Event message to broadcast.\n   */\n  broadcastEvent(event: EventMessage) {\n    if (!this.clients.size) {\n      return;\n    }\n\n    const serialized = this.serializeMessage(event);\n    if (!serialized) {\n      return;\n    }\n\n    for (const [clientId, socket] of this.clients.entries()) {\n      try {\n        socket.send(serialized);\n      } catch (error) {\n        this.fastify.log.error({\n          msg: 'Failed to send broadcast to client',\n          clientId,\n          error,\n          _skipBroadcast: true,\n        });\n      }\n    }\n  }\n\n  /**\n   * Process new client's WebSocket connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   */\n  onConnection(socket: WebSocket) {\n    const clientId = `client#${this.nextClientId++}`;\n    this.clients.set(clientId, socket);\n    this.fastify.log.debug({ msg: 'Events client connected', clientId });\n\n    const onClose = () => {\n      this.fastify.log.debug({ msg: 'Events client disconnected', clientId });\n      socket.removeAllListeners();\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n    socket.addEventListener('message', (event) => {\n      const message = this.parseMessage(event.data.toString());\n\n      if (!message) {\n        return;\n      }\n\n      if (message.type === 'command') {\n        try {\n          this.config.webSocketMessageServer.broadcast(\n            message.command,\n            message.params\n          );\n        } catch (error) {\n          this.fastify.log.error({\n            msg: 'Failed to forward message to clients',\n            error,\n          });\n        }\n      } else {\n        this.fastify.log.error({\n          msg: 'Unknown message type',\n          message,\n        });\n      }\n    });\n  }\n}\n"],"file":"WebSocketEventsServer.js"}