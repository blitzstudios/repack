{"version":3,"sources":["../../../src/server/ws/WebSocketHMRServer.ts"],"names":["WebSocketHMRServer","WebSocketServer","constructor","fastify","config","Map","compiler","hooks","invalid","tap","sendAction","done","stats","latestStats","action","clients","size","body","toJson","all","cached","children","modules","timings","hash","errors","warnings","log","warn","msg","hasStats","Boolean","module","identifier","name","undefined","time","event","JSON","stringify","clientId","socket","send","error","onConnection","nextClientId","set","info","onClose","delete","addEventListener"],"mappings":"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","sourcesContent":["import WebSocket from 'ws';\nimport webpack from 'webpack';\nimport { FastifyDevServer } from '../types';\nimport { HMRMessage, HMRMessageBody } from '../../types';\nimport { WebSocketServer } from './WebSocketServer';\n\n/**\n * {@link WebSocketHMRServer} configuration options.\n */\nexport interface WebSocketHMRServerConfig {\n  /** Instance of Webpack compiler */\n  compiler: webpack.Compiler;\n}\n\n/**\n * Class for creating a WebSocket server for Hot Module Replacement.\n *\n * @category Development server\n */\nexport class WebSocketHMRServer extends WebSocketServer {\n  private latestStats?: webpack.Stats;\n  private clients = new Map<string, WebSocket>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketHMRServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   */\n  constructor(\n    fastify: FastifyDevServer,\n    private config: WebSocketHMRServerConfig\n  ) {\n    super(fastify, '/__hmr');\n\n    const { compiler } = this.config;\n\n    compiler.hooks.invalid.tap('WebSocketHMRServer', () => {\n      this.sendAction('building');\n    });\n\n    compiler.hooks.done.tap('WebSocketHMRServer', (stats) => {\n      this.latestStats = stats;\n      this.sendAction('built');\n    });\n  }\n\n  /**\n   * Send action to all connected HMR clients.\n   *\n   * @param action Action to send to the clients.\n   */\n  sendAction(action: HMRMessage['action']) {\n    if (!this.clients.size) {\n      return;\n    }\n\n    let body: HMRMessageBody | null = null;\n    if (action !== 'building') {\n      const stats = this.latestStats?.toJson({\n        all: false,\n        cached: true,\n        children: true,\n        modules: true,\n        timings: true,\n        hash: true,\n        errors: true,\n        warnings: false,\n      });\n\n      if (!stats) {\n        this.fastify.log.warn({\n          msg: 'Cannot send action to client since stats are missing',\n          action,\n          hasStats: Boolean(this.latestStats),\n        });\n        return;\n      }\n\n      const modules: Record<string, string> = {};\n      for (const module of stats.modules ?? []) {\n        const { identifier, name } = module;\n        if (identifier !== undefined && name) {\n          modules[identifier] = name;\n        }\n      }\n\n      body = {\n        name: stats.name ?? '',\n        time: stats.time ?? 0,\n        hash: stats.hash ?? '',\n        warnings: stats.warnings || [],\n        errors: stats.errors || [],\n        modules,\n      };\n    }\n\n    const event = JSON.stringify({\n      action,\n      body,\n    });\n\n    for (const [clientId, socket] of this.clients) {\n      try {\n        socket.send(event);\n      } catch (error) {\n        this.fastify.log.error({\n          msg: 'Cannot send action to client',\n          action,\n          error,\n          clientId,\n        });\n      }\n    }\n  }\n\n  /**\n   * Process new WebSocket connection from HMR client.\n   *\n   * @param socket Incoming HMR client's WebSocket connection.\n   */\n  onConnection(socket: WebSocket) {\n    const clientId = `client#${this.nextClientId++}`;\n    this.clients.set(clientId, socket);\n\n    this.fastify.log.info({ msg: 'HMR client connected', clientId });\n\n    const onClose = () => {\n      this.fastify.log.info({ msg: 'HMR client disconnected', clientId });\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n\n    this.sendAction('sync');\n  }\n}\n"],"file":"WebSocketHMRServer.js"}