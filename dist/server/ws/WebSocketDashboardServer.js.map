{"version":3,"sources":["../../../src/server/ws/WebSocketDashboardServer.ts"],"names":["WebSocketDashboardServer","WebSocketServer","constructor","fastify","config","Map","compiler","hooks","invalid","tap","send","JSON","stringify","kind","event","name","done","message","socket","clients","entries","onConnection","clientId","nextClientId","set","log","info","msg","onClose","delete","addEventListener"],"mappings":";;;;;;;AAGA;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,wBAAN,SAAuCC,gCAAvC,CAAuD;AAI5D;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CACTC,OADS,EAEDC,MAFC,EAGT;AACA,UAAMD,OAAN,EAAe,gBAAf;AADA,SADQC,MACR,GADQA,MACR;;AAAA,qCAZgB,IAAIC,GAAJ,EAYhB;;AAAA,0CAXqB,CAWrB;;AAGA,QAAI,KAAKD,MAAT,EAAiB;AAAA;;AACf,oCAAKA,MAAL,CAAYE,QAAZ,gFAAsBC,KAAtB,CAA4BC,OAA5B,CAAoCC,GAApC,CACE,0BADF,EAEE,MAAM;AACJ,aAAKC,IAAL,CACEC,IAAI,CAACC,SAAL,CAAe;AACbC,UAAAA,IAAI,EAAE,aADO;AAEbC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR;AAFM,SAAf,CADF;AAMD,OATH;AAYA,qCAAKX,MAAL,CAAYE,QAAZ,kFAAsBC,KAAtB,CAA4BS,IAA5B,CAAiCP,GAAjC,CAAqC,0BAArC,EAAiE,MAAM;AACrE,aAAKC,IAAL,CACEC,IAAI,CAACC,SAAL,CAAe;AACbC,UAAAA,IAAI,EAAE,aADO;AAEbC,UAAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE;AADD;AAFM,SAAf,CADF;AAQD,OATD;AAUD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEL,EAAAA,IAAI,CAACO,OAAD,EAAkB;AACpB,SAAK,MAAM,GAAGC,MAAH,CAAX,IAAyB,KAAKC,OAAL,CAAaC,OAAb,EAAzB,EAAiD;AAC/C,UAAI;AACFF,QAAAA,MAAM,CAACR,IAAP,CAAYO,OAAZ;AACD,OAFD,CAEE,MAAM,CACN;AACD;AACF;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEI,EAAAA,YAAY,CAACH,MAAD,EAAoB;AAC9B,UAAMI,QAAQ,GAAI,UAAS,KAAKC,YAAL,EAAoB,EAA/C;AACA,SAAKJ,OAAL,CAAaK,GAAb,CAAiBF,QAAjB,EAA2BJ,MAA3B;AAEA,SAAKf,OAAL,CAAasB,GAAb,CAAiBC,IAAjB,CAAsB;AAAEC,MAAAA,GAAG,EAAE,4BAAP;AAAqCL,MAAAA;AAArC,KAAtB;AACA,SAAKH,OAAL,CAAaK,GAAb,CAAiBF,QAAjB,EAA2BJ,MAA3B;;AAEA,UAAMU,OAAO,GAAG,MAAM;AACpB,WAAKzB,OAAL,CAAasB,GAAb,CAAiBC,IAAjB,CAAsB;AACpBC,QAAAA,GAAG,EAAE,+BADe;AAEpBL,QAAAA;AAFoB,OAAtB;AAIA,WAAKH,OAAL,CAAaU,MAAb,CAAoBP,QAApB;AACD,KAND;;AAQAJ,IAAAA,MAAM,CAACY,gBAAP,CAAwB,OAAxB,EAAiCF,OAAjC;AACAV,IAAAA,MAAM,CAACY,gBAAP,CAAwB,OAAxB,EAAiCF,OAAjC;AACD;;AA/E2D","sourcesContent":["import WebSocket from 'ws';\nimport webpack from 'webpack';\nimport { FastifyDevServer } from '../types';\nimport { WebSocketServer } from './WebSocketServer';\n\n/**\n * {@link WebSocketDashboardServer} configuration options.\n */\ninterface WebSocketDashboardServerConfig {\n  /** Instance of Webpack compiler */\n  compiler?: webpack.Compiler;\n}\n\n/**\n * Class for creating a WebSocket server for Dashboard client.\n * It's used by built-in Dashboard web-app to receive compilation\n * events, logs and other necessary messages.\n *\n * @category Development server\n */\nexport class WebSocketDashboardServer extends WebSocketServer {\n  private clients = new Map<string, WebSocket>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketDashboardServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   */\n  constructor(\n    fastify: FastifyDevServer,\n    private config?: WebSocketDashboardServerConfig\n  ) {\n    super(fastify, '/api/dashboard');\n\n    if (this.config) {\n      this.config.compiler?.hooks.invalid.tap(\n        'WebSocketDashboardServer',\n        () => {\n          this.send(\n            JSON.stringify({\n              kind: 'compilation',\n              event: { name: 'invalid' },\n            })\n          );\n        }\n      );\n\n      this.config.compiler?.hooks.done.tap('WebSocketDashboardServer', () => {\n        this.send(\n          JSON.stringify({\n            kind: 'compilation',\n            event: {\n              name: 'done',\n            },\n          })\n        );\n      });\n    }\n  }\n\n  /**\n   * Send message to all connected Dashboard clients.\n   *\n   * @param message Stringified message to sent.\n   */\n  send(message: string) {\n    for (const [, socket] of this.clients.entries()) {\n      try {\n        socket.send(message);\n      } catch {\n        // NOOP\n      }\n    }\n  }\n\n  /**\n   * Process new WebSocket connection from client application.\n   *\n   * @param socket Incoming client's WebSocket connection.\n   */\n  onConnection(socket: WebSocket) {\n    const clientId = `client#${this.nextClientId++}`;\n    this.clients.set(clientId, socket);\n\n    this.fastify.log.info({ msg: 'Dashboard client connected', clientId });\n    this.clients.set(clientId, socket);\n\n    const onClose = () => {\n      this.fastify.log.info({\n        msg: 'Dashboard client disconnected',\n        clientId,\n      });\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n  }\n}\n"],"file":"WebSocketDashboardServer.js"}