{"version":3,"sources":["../../../src/server/ws/WebSocketDebuggerServer.ts"],"names":["WebSocketDebuggerServer","WebSocketServer","constructor","fastify","isDebuggerConnected","Boolean","debuggerSocket","send","socket","message","error","log","warn","msg","onConnection","request","url","indexOf","info","onDebuggerConnection","onClientConnection","close","onClose","undefined","clientSocket","removeAllListeners","addEventListener","data","toString","JSON","stringify","method"],"mappings":"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","sourcesContent":["import { IncomingMessage } from 'http';\nimport WebSocket from 'ws';\nimport { FastifyDevServer } from '../types';\nimport { WebSocketServer } from './WebSocketServer';\n\n/**\n * Class for creating a WebSocket server and providing a bridge between\n * debugger UI (Remote JS debugger) and the running React Native application.\n *\n * React Native application (aka client) will send and receive messages from the debugger UI\n * which runs inside a browser.\n *\n * @category Development server\n */\nexport class WebSocketDebuggerServer extends WebSocketServer {\n  /**\n   * A WebSocket connection with the debugger UI.\n   */\n  private debuggerSocket: WebSocket | undefined;\n\n  /**\n   * A WebSocket connection with the client (React Native app).\n   */\n  private clientSocket: WebSocket | undefined;\n\n  /**\n   * Create new instance of WebSocketDebuggerServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   */\n  constructor(fastify: FastifyDevServer) {\n    super(fastify, '/debugger-proxy');\n  }\n\n  /**\n   * Check if debugger UI is connected to the WebSocketDebuggerServer.\n   */\n  isDebuggerConnected() {\n    return Boolean(this.debuggerSocket);\n  }\n\n  /**\n   * Send a message to a given WebSocket connection.\n   *\n   * @param socket WebSocket connection to send the message to.\n   * @param message Message to send.\n   */\n  send(socket: WebSocket | undefined, message: string) {\n    try {\n      socket?.send(message);\n    } catch (error) {\n      this.fastify.log.warn({ msg: 'Failed to send data to socket', error });\n    }\n  }\n\n  /**\n   * Process new WebSocket connection. The upgrade request should contain `role` query param\n   * for determining the type of the connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   * @param request Upgrade request for the connection.\n   */\n  onConnection(socket: WebSocket, request: IncomingMessage) {\n    const { url = '' } = request;\n    if (url.indexOf('role=debugger') >= 0) {\n      this.fastify.log.info({ msg: 'Chrome Remote JS debugger connected' });\n      this.onDebuggerConnection(socket);\n    } else if (url.indexOf('role=client') >= 0) {\n      this.fastify.log.info({ msg: 'React Native app connected to debugger' });\n      this.onClientConnection(socket);\n    } else {\n      socket.close(1011, 'Missing role param');\n    }\n  }\n\n  /**\n   * Process new WebSocket connection from Debugger UI (Remote JS Debugger).\n   * If there's already open connection, the new one gets closed automatically.\n   *\n   * @param socket Incoming debugger WebSocket connection.\n   */\n  onDebuggerConnection(socket: WebSocket) {\n    if (this.debuggerSocket) {\n      socket.close(1011, 'Another debugger is already connected');\n      return;\n    }\n    this.debuggerSocket = socket;\n    const onClose = () => {\n      this.fastify.log.info({ msg: 'Chrome Remote JS debugger disconnected' });\n      this.debuggerSocket = undefined;\n      if (this.clientSocket) {\n        this.clientSocket.removeAllListeners();\n        this.clientSocket.close(1011, 'Debugger was disconnected');\n      }\n    };\n    this.debuggerSocket.addEventListener('error', onClose);\n    this.debuggerSocket.addEventListener('close', onClose);\n    this.debuggerSocket.addEventListener('message', ({ data }) => {\n      this.send(this.clientSocket, data.toString());\n    });\n  }\n\n  /**\n   * Process new WebSocket connection from React Native app (client)\n   * and close any previous connection.\n   *\n   * @param socket Incoming client WebSocket connection.\n   */\n  onClientConnection(socket: WebSocket) {\n    if (this.clientSocket) {\n      this.clientSocket.removeAllListeners();\n      this.clientSocket.close(1011, 'Another client is connected');\n      this.clientSocket = undefined;\n    }\n\n    const onClose = () => {\n      this.fastify.log.info({\n        msg: 'React Native app disconnected from debugger',\n      });\n      this.clientSocket = undefined;\n      this.send(\n        this.debuggerSocket,\n        JSON.stringify({ method: '$disconnected' })\n      );\n    };\n\n    this.clientSocket = socket;\n    this.clientSocket.addEventListener('error', onClose);\n    this.clientSocket.addEventListener('close', onClose);\n    this.clientSocket.addEventListener('message', ({ data }) => {\n      this.send(this.debuggerSocket, data.toString());\n    });\n  }\n}\n"],"file":"WebSocketDebuggerServer.js"}