{"version":3,"sources":["../../../src/server/ws/WebSocketServer.ts"],"names":["WebSocketServer","constructor","fastify","path","wssOptions","server","WebSocket","Server","noServer","on","onConnection","bind","paths","Array","isArray","shouldUpgrade","pathname","includes","upgrade","request","socket","head","handleUpgrade","webSocket","emit"],"mappings":";;;;;;;AAEA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACO,MAAeA,eAAf,CAA+B;AACpC;;AAGA;;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CACTC,OADS,EAETC,IAFS,EAGTC,UAGC,GAAG,EANK,EAOT;AAAA;;AAAA;;AAAA;;AACA,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKG,MAAL,GAAc,IAAIC,YAAUC,MAAd,CAAqB;AACjCC,MAAAA,QAAQ,EAAE,IADuB;AAEjC,SAAGJ;AAF8B,KAArB,CAAd;AAIA,SAAKC,MAAL,CAAYI,EAAZ,CAAe,YAAf,EAA6B,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAA7B;AACA,SAAKC,KAAL,GAAaC,KAAK,CAACC,OAAN,CAAcX,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA1C;AACD;;AAEDY,EAAAA,aAAa,CAACC,QAAD,EAAmB;AAC9B,WAAO,KAAKJ,KAAL,CAAWK,QAAX,CAAoBD,QAApB,CAAP;AACD;;AAEDE,EAAAA,OAAO,CAACC,OAAD,EAA2BC,MAA3B,EAA2CC,IAA3C,EAAyD;AAC9D,SAAKhB,MAAL,CAAYiB,aAAZ,CAA0BH,OAA1B,EAAmCC,MAAnC,EAA2CC,IAA3C,EAAkDE,SAAD,IAAe;AAC9D,WAAKlB,MAAL,CAAYmB,IAAZ,CAAiB,YAAjB,EAA+BD,SAA/B,EAA0CJ,OAA1C;AACD,KAFD;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;;;AAjDsC","sourcesContent":["import { IncomingMessage } from 'http';\nimport { Socket } from 'net';\nimport WebSocket from 'ws';\nimport { FastifyDevServer } from '../types';\n\n/**\n * Abstract class for providing common logic (eg routing) for all WebSocket servers.\n *\n * @category Development server\n */\nexport abstract class WebSocketServer {\n  /** An instance of the underlying WebSocket server. */\n  public readonly server: WebSocket.Server;\n\n  /** Fastify instance from which {@link server} will receive upgrade connections. */\n  protected fastify: FastifyDevServer;\n\n  public readonly paths: string[];\n\n  /**\n   * Create a new instance of the WebSocketServer.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to which the WebSocket will be attached to.\n   * @param path Path on which this WebSocketServer will be accepting connections.\n   * @param wssOptions WebSocket Server options.\n   */\n  constructor(\n    fastify: FastifyDevServer,\n    path: string | string[],\n    wssOptions: Omit<\n      WebSocket.ServerOptions,\n      'noServer' | 'server' | 'host' | 'port' | 'path'\n    > = {}\n  ) {\n    this.fastify = fastify;\n    this.server = new WebSocket.Server({\n      noServer: true,\n      ...wssOptions,\n    });\n    this.server.on('connection', this.onConnection.bind(this));\n    this.paths = Array.isArray(path) ? path : [path];\n  }\n\n  shouldUpgrade(pathname: string) {\n    return this.paths.includes(pathname);\n  }\n\n  upgrade(request: IncomingMessage, socket: Socket, head: Buffer) {\n    this.server.handleUpgrade(request, socket, head, (webSocket) => {\n      this.server.emit('connection', webSocket, request);\n    });\n  }\n\n  /**\n   * Process incoming WebSocket connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   * @param request Upgrade request for the connection.\n   */\n  abstract onConnection(socket: WebSocket, request: IncomingMessage): void;\n}\n"],"file":"WebSocketServer.js"}