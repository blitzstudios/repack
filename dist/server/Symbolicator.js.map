{"version":3,"sources":["../../src/server/Symbolicator.ts"],"names":["readFileAsync","fs","readFile","Symbolicator","inferPlatformFromStack","stack","frame","file","searchParams","pathname","URL","platform","get","bundleFilename","split","reverse","platformOrExtension","extension","constructor","projectRoot","logger","readFileFromWdm","readSourceMapFromWdm","process","frames","startsWith","includes","push","processedFrames","sourceMapConsumerCache","rawSourceMap","sourceMapConsumer","SourceMapConsumer","processedFrame","processFrame","codeFrame","getCodeFrame","key","destroy","lineNumber","column","collapse","consumer","lookup","originalPositionFor","line","source","methodName","name","test","undefined","filename","path","join","replace","content","start","forceColor","location","row","fileName","error","msg","message"],"mappings":"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","sourcesContent":["import { URL } from 'url';\nimport path from 'path';\nimport fs from 'fs';\nimport { promisify } from 'util';\nimport { codeFrameColumns } from '@babel/code-frame';\nimport { SourceMapConsumer } from 'source-map';\nimport { FastifyDevServer } from './types';\n\nconst readFileAsync = promisify(fs.readFile);\n\n/**\n * Raw React Native stack frame.\n */\nexport interface ReactNativeStackFrame {\n  lineNumber: number | null;\n  column: number | null;\n  file: string | null;\n  methodName: string;\n}\n\n/**\n * React Native stack frame used as input when processing by {@link Symbolicator}.\n */\nexport interface InputStackFrame extends ReactNativeStackFrame {\n  file: string;\n}\n\n/**\n * Final symbolicated stack frame.\n */\nexport interface StackFrame extends InputStackFrame {\n  collapse: boolean;\n}\n\n/**\n * Represents [@babel/core-frame](https://babeljs.io/docs/en/babel-code-frame).\n */\nexport interface CodeFrame {\n  content: string;\n  location: {\n    row: number;\n    column: number;\n  };\n  fileName: string;\n}\n\n/**\n * Represents results of running {@link process} method on {@link Symbolicator} instance.\n */\nexport interface SymbolicatorResults {\n  codeFrame: CodeFrame | null;\n  stack: StackFrame[];\n}\n\n/**\n * Class for transforming stack traces from React Native application with using Source Map.\n * Raw stack frames produced by React Native, points to some location from the bundle\n * eg `index.bundle?platform=ios:567:1234`. By using Source Map for that bundle `Symbolicator`\n * produces frames that point to source code inside your project eg `Hello.tsx:10:9`.\n */\nexport class Symbolicator {\n  /**\n   * Infer platform from stack frames.\n   * Usually at least one frame has `file` field with the bundle URL eg:\n   * `http://localhost:8081/index.bundle?platform=ios&...`, which can be used to infer platform.\n   *\n   * @param stack Array of stack frames.\n   * @returns Inferred platform or `undefined` if cannot infer.\n   */\n  static inferPlatformFromStack(stack: ReactNativeStackFrame[]) {\n    for (const frame of stack) {\n      if (!frame.file) {\n        return;\n      }\n\n      const { searchParams, pathname } = new URL(frame.file, 'file://');\n      const platform = searchParams.get('platform');\n      if (platform) {\n        return platform;\n      } else {\n        const [bundleFilename] = pathname.split('/').reverse();\n        const [, platformOrExtension, extension] = bundleFilename.split('.');\n        if (extension) {\n          return platformOrExtension;\n        }\n      }\n    }\n  }\n\n  /**\n   * Cache with initialized `SourceMapConsumer` to improve symbolication performance.\n   */\n  sourceMapConsumerCache: Record<string, SourceMapConsumer> = {};\n\n  /**\n   * Constructs new `Symbolicator` instance.\n   *\n   * @param projectRoot Absolute path to root directory of the project.\n   * @param logger Fastify logger instance.\n   * @param readFileFromWdm Function to read arbitrary file from webpack-dev-middleware.\n   * @param readSourceMapFromWdm Function to read Source Map file from webpack-dev-middleware.\n   */\n  constructor(\n    private projectRoot: string,\n    private logger: FastifyDevServer['log'],\n    private readFileFromWdm: (fileUrl: string) => Promise<string>,\n    private readSourceMapFromWdm: (fileUrl: string) => Promise<string>\n  ) {}\n\n  /**\n   * Process raw React Native stack frames and transform them using Source Maps.\n   * Method will try to symbolicate as much data as possible, but if the Source Maps\n   * are not available, invalid or the original positions/data is not found in Source Maps,\n   * the method will return raw values - the same as supplied with `stack` parameter.\n   * For example out of 10 frames, it's possible that only first 7 will be symbolicated and the\n   * remaining 3 will be unchanged.\n   *\n   * @param stack Raw stack frames.\n   * @returns Symbolicated stack frames.\n   */\n  async process(stack: ReactNativeStackFrame[]): Promise<SymbolicatorResults> {\n    // TODO: add debug logging\n    const frames: InputStackFrame[] = [];\n    for (const frame of stack) {\n      const { file } = frame;\n      if (file?.startsWith('http') && !file.includes('debuggerWorker')) {\n        frames.push(frame as InputStackFrame);\n      }\n    }\n\n    try {\n      const processedFrames: StackFrame[] = [];\n      for (const frame of frames) {\n        if (!this.sourceMapConsumerCache[frame.file]) {\n          const rawSourceMap = await this.readSourceMapFromWdm(frame.file);\n          const sourceMapConsumer = await new SourceMapConsumer(rawSourceMap);\n          this.sourceMapConsumerCache[frame.file] = sourceMapConsumer;\n        }\n        const processedFrame = this.processFrame(frame);\n        processedFrames.push(processedFrame);\n      }\n\n      return {\n        stack: processedFrames,\n        codeFrame: (await this.getCodeFrame(processedFrames)) ?? null,\n      };\n    } finally {\n      for (const key in this.sourceMapConsumerCache) {\n        this.sourceMapConsumerCache[key].destroy();\n        delete this.sourceMapConsumerCache[key];\n      }\n    }\n  }\n\n  private processFrame(frame: InputStackFrame): StackFrame {\n    if (!frame.lineNumber || !frame.column) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const consumer = this.sourceMapConsumerCache[frame.file];\n    if (!consumer) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const lookup = consumer.originalPositionFor({\n      line: frame.lineNumber,\n      column: frame.column,\n    });\n\n    // If lookup fails, we get the same shape object, but with\n    // all values set to null\n    if (!lookup.source) {\n      // It is better to gracefully return the original frame\n      // than to throw an exception\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    return {\n      lineNumber: lookup.line || frame.lineNumber,\n      column: lookup.column || frame.column,\n      file: lookup.source,\n      methodName: lookup.name || frame.methodName,\n      collapse: false,\n    };\n  }\n\n  private async getCodeFrame(\n    processedFrames: StackFrame[]\n  ): Promise<CodeFrame | undefined> {\n    for (const frame of processedFrames) {\n      if (frame.collapse || !frame.lineNumber || !frame.column) {\n        continue;\n      }\n\n      // If the frame points to internal bootstrap/module system logic, skip the code frame.\n      if (/webpack[/\\\\]runtime[/\\\\].+\\s/.test(frame.file)) {\n        return undefined;\n      }\n\n      try {\n        let filename;\n        let source;\n        if (\n          frame.file.startsWith('http') &&\n          frame.file.includes('index.bundle')\n        ) {\n          // Frame points to the bundle so we need to read bundle from WDM's FS.\n          filename = frame.file;\n          source = await this.readFileFromWdm('/index.bundle');\n        } else {\n          filename = path.join(\n            this.projectRoot,\n            frame.file.replace('webpack://', '')\n          );\n          source = await readFileAsync(filename, 'utf8');\n        }\n\n        return {\n          content: codeFrameColumns(\n            source,\n            {\n              start: { column: frame.column, line: frame.lineNumber },\n            },\n            { forceColor: true }\n          ),\n          location: {\n            row: frame.lineNumber,\n            column: frame.column,\n          },\n          fileName: filename,\n        };\n      } catch (error) {\n        this.logger.error({\n          msg: 'Failed to create code frame',\n          error: (error as Error).message,\n        });\n      }\n\n      return undefined;\n    }\n  }\n}\n"],"file":"Symbolicator.js"}