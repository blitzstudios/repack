{"version":3,"sources":["../../src/server/DevServer.ts"],"names":["DevServer","BaseDevServer","getLoggerOptions","compiler","platform","webpackLogger","getInfrastructureLogger","logStream","Writable","write","chunk","_encoding","callback","data","toString","logEntry","type","message","stream","level","constructor","config","wdm","mimeTypes","bundle","hmrServer","wsRouter","registerServer","WebSocketHMRServer","fastify","wsDashboardServer","WebSocketDashboardServer","symbolicator","Symbolicator","context","log","fileUrl","filename","Error","fallbackSourceMapFilename","sourceMappingUrl","exec","undefined","sourceMapBasename","split","sourceMapFilename","path","join","dirname","sourceMap","warn","msg","setup","register","fastifyExpress","use","post","request","reply","stack","JSON","parse","body","inferPlatformFromStack","code","send","results","process","error","lastStats","hooks","done","tap","stats","get","_","toJson","preset","assets","builtAt","chunks","chunkModules","errors","warnings","timings","run","exit"],"mappings":"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","sourcesContent":["import { Writable } from 'stream';\nimport path from 'path';\nimport fastifyExpress from 'fastify-express';\nimport devMiddleware, { WebpackDevMiddleware } from 'webpack-dev-middleware';\nimport getFilenameFromUrl from 'webpack-dev-middleware/dist/utils/getFilenameFromUrl';\nimport webpack from 'webpack';\nimport { isVerbose } from '../env';\nimport { ReactNativeStackFrame, Symbolicator } from './Symbolicator';\nimport { BaseDevServer, BaseDevServerConfig } from './BaseDevServer';\nimport { readFileFromWdm } from './utils/readFileFromWdm';\nimport { transformFastifyLogToLogEntry } from './utils/transformFastifyLogToWebpackLogEntry';\nimport { WebSocketHMRServer } from './ws';\nimport { DevServerLoggerOptions } from './types';\nimport { WebSocketDashboardServer } from './ws/WebSocketDashboardServer';\n\n/**\n * {@link DevServer} configuration options.\n */\nexport interface DevServerConfig extends BaseDevServerConfig {}\n\n/**\n * Class for setting up and running development server for React Native application.\n * It's usually created by the {@link DevServerPlugin}.\n *\n * Each `DevServer` instance is platform-specific, for example for `ios` and `android` platforms,\n * you need 2 `DevServer` running (on different ports). Alternatively you can\n * use {@link DevServerProxy} to spawn new processes with Webpack compilations for each platform.\n *\n * @category Development server\n */\nexport class DevServer extends BaseDevServer {\n  private static getLoggerOptions(\n    compiler: webpack.Compiler,\n    platform: string\n  ): DevServerLoggerOptions {\n    const webpackLogger = compiler.getInfrastructureLogger(\n      `DevServer@${platform}`\n    );\n    const logStream = new Writable({\n      write: (chunk, _encoding, callback) => {\n        const data = chunk.toString();\n        const logEntry = transformFastifyLogToLogEntry(data);\n        webpackLogger[logEntry.type](...logEntry.message);\n        callback();\n      },\n    });\n\n    return { stream: logStream, level: isVerbose() ? 'debug' : 'info' };\n  }\n\n  /** [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) instance. */\n  wdm: WebpackDevMiddleware;\n  /** HMR WebSocket server instance to allow HMR clients to receive updates. */\n  hmrServer: WebSocketHMRServer;\n  /** Dashboard WebSocket server instance to provide events to dashboard web client. */\n  wsDashboardServer: WebSocketDashboardServer;\n  /** Symbolicator instance to transform stack traces using Source Maps. */\n  symbolicator: Symbolicator;\n\n  /**\n   * Constructs new `DevServer` instance.\n   *\n   * @param config Configuration options.\n   * @param compiler Webpack compiler instance.\n   */\n  constructor(config: DevServerConfig, private compiler: webpack.Compiler) {\n    super(config, DevServer.getLoggerOptions(compiler, config.platform));\n\n    this.wdm = devMiddleware(this.compiler, {\n      mimeTypes: {\n        bundle: 'text/javascript',\n      },\n    });\n\n    this.hmrServer = this.wsRouter.registerServer(\n      new WebSocketHMRServer(this.fastify, {\n        compiler: this.compiler,\n      })\n    );\n\n    this.wsDashboardServer = this.wsRouter.registerServer(\n      new WebSocketDashboardServer(this.fastify, { compiler: this.compiler })\n    );\n\n    this.symbolicator = new Symbolicator(\n      this.compiler.context,\n      this.fastify.log,\n      async (fileUrl) => {\n        const filename = getFilenameFromUrl(this.wdm.context, fileUrl);\n        if (filename) {\n          return (await readFileFromWdm(this.wdm, filename)).toString();\n        } else {\n          throw new Error(`Cannot infer filename from url: ${fileUrl}`);\n        }\n      },\n      async (fileUrl) => {\n        const filename = getFilenameFromUrl(this.wdm.context, fileUrl);\n        if (filename) {\n          const fallbackSourceMapFilename = `${filename}.map`;\n          const bundle = (await readFileFromWdm(this.wdm, filename)).toString();\n          const [, sourceMappingUrl] = /sourceMappingURL=(.+)$/.exec(\n            bundle\n          ) || [undefined, undefined];\n          const [sourceMapBasename] = sourceMappingUrl?.split('?') ?? [\n            undefined,\n          ];\n\n          let sourceMapFilename = fallbackSourceMapFilename;\n          if (sourceMapBasename) {\n            sourceMapFilename = path.join(\n              path.dirname(filename),\n              sourceMapBasename\n            );\n          }\n\n          try {\n            const sourceMap = await readFileFromWdm(\n              this.wdm,\n              sourceMapFilename\n            );\n            return sourceMap.toString();\n          } catch {\n            this.fastify.log.warn({\n              msg: 'Failed to read source map from sourceMappingURL, trying fallback',\n              sourceMappingUrl,\n              sourceMapFilename,\n            });\n            const sourceMap = await readFileFromWdm(\n              this.wdm,\n              fallbackSourceMapFilename\n            );\n            return sourceMap.toString();\n          }\n        } else {\n          throw new Error(`Cannot infer filename from url: ${fileUrl}`);\n        }\n      }\n    );\n  }\n\n  /**\n   * Sets up Fastify plugins and routes.\n   */\n  async setup() {\n    await super.setup();\n\n    await this.fastify.register(fastifyExpress);\n    this.fastify.use(this.wdm);\n\n    this.fastify.post('/symbolicate', async (request, reply) => {\n      try {\n        const { stack } = JSON.parse(request.body as string) as {\n          stack: ReactNativeStackFrame[];\n        };\n        const platform = Symbolicator.inferPlatformFromStack(stack);\n        if (!platform) {\n          reply.code(400).send();\n        } else {\n          const results = await this.symbolicator.process(stack);\n          reply.send(results);\n        }\n      } catch (error) {\n        this.fastify.log.error({\n          msg: 'Failed to symbolicate',\n          error: (error as Error).message,\n        });\n        reply.code(500).send();\n      }\n    });\n\n    let lastStats: webpack.Stats | undefined;\n    this.compiler.hooks.done.tap('DevServer', (stats) => {\n      lastStats = stats;\n    });\n    this.fastify.get('/api/dashboard/stats', (_, reply) => {\n      if (lastStats)\n        reply.send(\n          lastStats.toJson({\n            preset: 'summary',\n            assets: true,\n            builtAt: true,\n            chunks: true,\n            chunkModules: false,\n            errors: true,\n            warnings: true,\n            timings: true,\n          })\n        );\n      else {\n        reply.code(404).send();\n      }\n    });\n  }\n\n  /**\n   * Runs development server.\n   */\n  async run() {\n    try {\n      await this.setup();\n      await super.run();\n    } catch (error) {\n      this.fastify.log.error(error);\n      process.exit(1);\n    }\n  }\n}\n"],"file":"DevServer.js"}