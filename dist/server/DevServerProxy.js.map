{"version":3,"sources":["../../src/server/DevServerProxy.ts"],"names":["DevServerProxy","BaseDevServer","getLoggerOptions","getReporter","reporter","logStream","Writable","write","chunk","_encoding","callback","data","toString","logEntry","issuer","process","stream","level","constructor","config","cliOptions","wsRouter","registerServer","WebSocketDashboardServer","fastify","Reporter","wsEventsServer","wsDashboardServer","runWorker","platform","workers","log","warn","msg","port","cliOptionsWithPlatform","arguments","start","Promise","resolve","env","CLI_OPTIONS_ENV_KEY","JSON","stringify","WORKER_ENV_KEY","VERBOSE_ENV_KEY","undefined","info","debug","execa","node","path","join","__dirname","webpackConfigPath","stdio","isResolved","onStdData","event","trim","parse","error","message","stdout","pipe","on","stderr","send","kind","name","forwardRequest","request","reply","host","headers","url","raw","code","compilerWorkerUrl","method","body","from","setup","dashboardPublicDir","register","fastifyStatic","root","prefix","prefixAvoidTrailingSlash","decorateReply","fastifyReplyFrom","undici","headersTimeout","bodyTimeout","get","_","sendFile","platforms","all","Object","keys","map","id","logs","getLogBuffer","post","stack","Symbolicator","inferPlatformFromStack","route","schema","querystring","type","properties","handler","query","console","run","https","exit"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { Writable } from 'stream';\nimport execa from 'execa';\nimport getPort from 'get-port';\nimport split2 from 'split2';\nimport fastifyStatic from 'fastify-static';\nimport fastifyReplyFrom from 'fastify-reply-from';\nimport { CliOptions, StartArguments } from '../types';\nimport { Reporter } from '../Reporter';\nimport {\n  CLI_OPTIONS_ENV_KEY,\n  isVerbose,\n  VERBOSE_ENV_KEY,\n  WORKER_ENV_KEY,\n} from '../env';\nimport { DevServerReply, DevServerRequest } from './types';\nimport { ReactNativeStackFrame, Symbolicator } from './Symbolicator';\nimport { BaseDevServer, BaseDevServerConfig } from './BaseDevServer';\nimport { transformFastifyLogToLogEntry } from './utils/transformFastifyLogToWebpackLogEntry';\nimport { WebSocketDashboardServer } from './ws/WebSocketDashboardServer';\n\n/**\n * {@link DevServerProxy} configuration options.\n */\nexport interface DevServerProxyConfig extends BaseDevServerConfig {}\n\n/**\n * Represents a process that runs Webpack compilation and {@link DevServer}\n * via {@link DevServerPlugin}.\n */\nexport interface CompilerWorker {\n  /** Spawned process with the Webpack compilation. */\n  process: execa.ExecaChildProcess;\n  /** Port on which {@link DevServer} is running. */\n  port: number;\n}\n\n/**\n * Class for spawning new compiler workers for each requested platform and forwarding requests\n * to respective platform-specific {@link DevServer}.\n *\n * The overall architecture is:\n * ```\n * `DevServerProxy`\n * ├── <compiler worker platform=ios>\n * │   └── <webpack compilation>\n * │       └── `DevServerPlugin`\n * │           └── `DevServer`\n * ├── <compiler worker platform=android>\n * │   └── <webpack compilation>\n * │       └── `DevServerPlugin`\n * │           └── `DevServer`\n * └── ...\n * ```\n *\n * Each worker is lazy, meaning it will be spawned upon receiving first request from which\n * `platform` can be inferred. This would usually be a request\n * for bundle eg: `index.bundle?platform=ios&...`.\n *\n * @category Development server\n */\nexport class DevServerProxy extends BaseDevServer {\n  private static getLoggerOptions(getReporter: () => Reporter) {\n    let reporter: Reporter;\n    const logStream = new Writable({\n      write: (chunk, _encoding, callback) => {\n        if (!reporter) {\n          reporter = getReporter();\n        }\n        const data = chunk.toString();\n        const logEntry = transformFastifyLogToLogEntry(data);\n        logEntry.issuer = 'DevServerProxy';\n        reporter.process(logEntry);\n        callback();\n      },\n    });\n\n    return { stream: logStream, level: isVerbose() ? 'debug' : 'info' };\n  }\n\n  /** Platform to worker mappings. */\n  workers: Record<string, Promise<CompilerWorker> | undefined> = {};\n  wsDashboardServer = this.wsRouter.registerServer(\n    new WebSocketDashboardServer(this.fastify)\n  );\n  /** Reporter instance. */\n  reporter = new Reporter({\n    wsEventsServer: this.wsEventsServer,\n    wsDashboardServer: this.wsDashboardServer,\n  });\n\n  /**\n   * Constructs new `DevServerProxy`.\n   *\n   * @param config Configuration options.\n   * @param cliOptions CLI options (usually provided by {@link start} command based on arguments\n   * from React Native CLI.)\n   */\n  constructor(config: DevServerProxyConfig, private cliOptions: CliOptions) {\n    super(\n      config,\n      DevServerProxy.getLoggerOptions(() => this.reporter)\n    );\n  }\n\n  /**\n   * Spawn new compiler worker for given `platform`.\n   * If the worker is already running, a warning is emitted and the method stops it's execution.\n   * The port on which {@link DevServer} inside worker will be running is random, so no assumptions\n   * should be taken regarding the port number.\n   *\n   * @param platform Application platform for which to spawn new worker.\n   */\n  async runWorker(platform: string) {\n    if (this.workers[platform]) {\n      this.fastify.log.warn({\n        msg: 'Compiler worker is already running',\n        platform,\n      });\n      return;\n    }\n\n    const port = await getPort();\n    const cliOptionsWithPlatform: CliOptions = {\n      ...this.cliOptions,\n      arguments: {\n        start: {\n          ...(this.cliOptions.arguments as { start: StartArguments }).start,\n          platform,\n          port,\n        },\n      },\n    };\n\n    this.workers[platform] = new Promise((resolve) => {\n      const env = {\n        [CLI_OPTIONS_ENV_KEY]: JSON.stringify(cliOptionsWithPlatform),\n        [WORKER_ENV_KEY]: '1',\n        [VERBOSE_ENV_KEY]: isVerbose() ? '1' : undefined,\n      };\n\n      this.fastify.log.info({\n        msg: 'Starting compiler worker',\n        platform,\n        port,\n      });\n      this.fastify.log.debug({\n        msg: 'Compiler worker settings',\n        env,\n      });\n\n      const process = execa.node(\n        path.join(__dirname, './compilerWorker.js'),\n        [cliOptionsWithPlatform.config.webpackConfigPath],\n        {\n          stdio: 'pipe',\n          env,\n        }\n      );\n\n      let isResolved = false;\n\n      const onStdData = (event: string | Buffer) => {\n        const data = event.toString().trim();\n        if (data) {\n          try {\n            const logEntry = JSON.parse(data);\n            this.reporter.process(logEntry);\n          } catch {\n            this.fastify.log.error({\n              msg: 'Cannot parse compiler worker message',\n              platform,\n              message: data,\n            });\n          }\n        }\n      };\n\n      process.stdout?.pipe(split2()).on('data', onStdData);\n      process.stderr?.pipe(split2()).on('data', onStdData);\n\n      process.on('message', (data) => {\n        const { event } = data as { event: 'watchRun' };\n        if (event === 'watchRun') {\n          if (!isResolved) {\n            isResolved = true;\n\n            this.wsDashboardServer.send(\n              JSON.stringify({\n                kind: 'compilation',\n                event: {\n                  name: 'watchRun',\n                  port,\n                  platform,\n                },\n              })\n            );\n\n            resolve({\n              port,\n              process,\n            });\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Forward request to a {@link DevServer} running inside compiler worker for the `platform`.\n   *\n   * @param platform Application platform.\n   * @param request Request instance to forward.\n   * @param reply Reply instance to send received data through.\n   */\n  async forwardRequest(\n    platform: string,\n    request: DevServerRequest,\n    reply: DevServerReply\n  ) {\n    if (!this.workers[platform]) {\n      await this.runWorker(platform);\n    }\n\n    const { port } = await (this.workers[platform] as Promise<CompilerWorker>);\n    const host = request.headers[':authority'] || request.headers.host;\n    const url = request.headers[':path'] || request.raw.url;\n    if (!url || !host) {\n      reply.code(500).send();\n    } else {\n      const compilerWorkerUrl = `http://localhost:${port}${url}`;\n      this.fastify.log.debug({\n        msg: 'Fetching from worker',\n        url: compilerWorkerUrl,\n        method: request.method,\n        body: request.body,\n      });\n      reply.from(compilerWorkerUrl);\n    }\n  }\n\n  /**\n   * Sets up routes.\n   */\n  async setup() {\n    // TODO: figure out if we need it\n    // await this.fastify.register(fastifyGracefulShutdown);\n    // this.fastify.gracefulShutdown(async (code, cb) => {\n    //   for (const platform in this.workers) {\n    //     const worker = await this.workers[platform];\n    //     worker.process.kill(code);\n    //   }\n\n    //   this.fastify.log.info({\n    //     msg: 'Shutting down dev server proxy',\n    //     port: this.config.port,\n    //     code,\n    //   });\n    //   cb();\n    // });\n\n    await super.setup();\n\n    const dashboardPublicDir = path.join(\n      __dirname,\n      '../../first-party/dashboard'\n    );\n    await this.fastify.register(fastifyStatic, {\n      root: dashboardPublicDir,\n      prefix: '/dashboard',\n      prefixAvoidTrailingSlash: true,\n      decorateReply: false,\n    });\n\n    this.fastify.register(fastifyReplyFrom, {\n      undici: {\n        headersTimeout: 5 * 60 * 1000,\n        bodyTimeout: 5 * 60 * 1000,\n      },\n    });\n\n    this.fastify.get('/dashboard/:page', (_, reply) => {\n      reply.sendFile('index.html', dashboardPublicDir);\n    });\n\n    this.fastify.get('/api/dashboard/platforms', async () => {\n      const platforms = await Promise.all(\n        Object.keys(this.workers).map(async (platform) => ({\n          id: platform,\n          port: (await this.workers[platform])?.port,\n        }))\n      );\n\n      return {\n        platforms,\n      };\n    });\n\n    this.fastify.get('/api/dashboard/server-logs', (_, reply) => {\n      reply.send({\n        logs: this.reporter.getLogBuffer(),\n      });\n    });\n\n    this.fastify.post('/symbolicate', async (request, reply) => {\n      const { stack } = JSON.parse(request.body as string) as {\n        stack: ReactNativeStackFrame[];\n      };\n      const platform = Symbolicator.inferPlatformFromStack(stack);\n      if (!platform) {\n        reply.code(400).send();\n      } else {\n        await this.forwardRequest(platform, request, reply);\n      }\n\n      return reply;\n    });\n\n    this.fastify.route({\n      method: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD'],\n      url: '*',\n      schema: {\n        querystring: {\n          type: 'object',\n          properties: {\n            platform: {\n              type: 'string',\n            },\n          },\n        },\n      },\n      handler: async (request, reply) => {\n        const platform = (request.query as { platform?: string } | undefined)\n          ?.platform;\n\n        if (!platform) {\n          this.fastify.log.warn({\n            msg: 'Missing platform query param',\n            query: request.query,\n            method: request.method,\n            url: request.url,\n          });\n          reply.code(400).send();\n        } else {\n          try {\n            await this.forwardRequest(platform, request, reply);\n          } catch (error) {\n            console.error(error);\n            reply.code(500).send();\n          }\n        }\n\n        return reply;\n      },\n    });\n  }\n\n  /**\n   * Runs the proxy.\n   */\n  async run() {\n    try {\n      await this.setup();\n      await super.run();\n      this.fastify.log.info({\n        msg: `Dashboard available at: http${this.config.https ? 's' : ''}://${\n          this.config.host || 'localhost'\n        }:${this.config.port}/dashboard`,\n      });\n    } catch (error) {\n      console.error(error);\n      process.exit(1);\n    }\n  }\n}\n"],"file":"DevServerProxy.js"}