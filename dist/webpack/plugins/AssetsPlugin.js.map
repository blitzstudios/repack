{"version":3,"sources":["../../../src/webpack/plugins/AssetsPlugin.ts"],"names":["AssetsPlugin","constructor","config","configureLoader","extensions","ASSET_EXTENSIONS","scalableExtensions","SCALABLE_ASSETS","apply","compiler","assetResolver","AssetResolver","options","module","rules","push","test","use","loader","require","resolve","platform","scalableAssetExtensions","devServerEnabled","plugins","concat"],"mappings":";;;;;;;AAEA;;AAKA;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,YAAN,CAA4C;AACjD;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAASC,MAAT,EAAqC;AAAA;;AAAA,SAA5BA,MAA4B,GAA5BA,MAA4B;AAC9C,SAAKA,MAAL,CAAYC,eAAZ,4BAA8B,KAAKD,MAAL,CAAYC,eAA1C,yEAA6D,IAA7D;AACA,SAAKD,MAAL,CAAYE,UAAZ,4BAAyB,KAAKF,MAAL,CAAYE,UAArC,yEAAmDC,iCAAnD;AACA,SAAKH,MAAL,CAAYI,kBAAZ,4BACE,KAAKJ,MAAL,CAAYI,kBADd,yEACoCC,gCADpC;AAED;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAACC,QAAD,EAA6B;AAChC,UAAMC,aAAa,GAAG,IAAIC,4BAAJ,CAAkB,KAAKT,MAAvB,EAA+BO,QAA/B,CAAtB;;AAEA,QAAI,KAAKP,MAAL,CAAYC,eAAhB,EAAiC;AAC/BM,MAAAA,QAAQ,CAACG,OAAT,CAAiBC,MAAjB,CAAwBC,KAAxB,CAA8BC,IAA9B,CAAmC;AACjCC,QAAAA,IAAI,EAAE,+CAAyBN,aAAa,CAACR,MAAd,CAAqBE,UAA9C,CAD2B;AAEjCa,QAAAA,GAAG,EAAE,CACH;AACEC,UAAAA,MAAM,EAAEC,OAAO,CAACC,OAAR,CAAgB,2BAAhB,CADV;AAEER,UAAAA,OAAO,EAAE;AACPS,YAAAA,QAAQ,EAAE,KAAKnB,MAAL,CAAYmB,QADf;AAEPC,YAAAA,uBAAuB,EAAEf,gCAFlB;AAGPgB,YAAAA,gBAAgB,EAAE,KAAKrB,MAAL,CAAYqB;AAHvB;AAFX,SADG;AAF4B,OAAnC;AAaD;;AACDd,IAAAA,QAAQ,CAACG,OAAT,CAAiBQ,OAAjB,CAAyBI,OAAzB,GAAmC,CACjCf,QAAQ,CAACG,OAAT,CAAiBQ,OAAjB,CAAyBI,OAAzB,IAAoC,EADH,EAEjCC,MAFiC,CAE1Bf,aAF0B,CAAnC;AAGD;;AAvCgD","sourcesContent":["import webpack from 'webpack';\nimport { WebpackPlugin } from '../../types';\nimport {\n  ASSET_EXTENSIONS,\n  getAssetExtensionsRegExp,\n  SCALABLE_ASSETS,\n} from '../utils/assetExtensions';\nimport {\n  AssetResolver,\n  AssetResolverConfig,\n} from './AssetsResolverPlugin/AssetResolver';\n\n/**\n * {@link AssetsPlugin} configuration options.\n */\nexport interface AssetsPluginConfig extends AssetResolverConfig {\n  /**\n   * Whether the development server is enabled.\n   */\n  devServerEnabled?: boolean;\n\n  /**\n   * Whether `AssetsPlugin` should configure asset loader automatically.\n   *\n   * Set to `false` if you want to configure it manually, for example if you are using\n   * `@svgr/webpack`.\n   */\n  configureLoader?: boolean;\n}\n\n/**\n * Plugin for loading and processing assets (images, audio, video etc) for\n * React Native applications.\n *\n * Assets processing in React Native differs from Web, Node.js or other targets. This plugin allows\n * you to use assets in the same way as you would do when using Metro.\n *\n * @deprecated Use dedicated rule with `@callstack/repack/assets-loader` and `AssetsResolverPlugin`.\n * More information can be found here: https://github.com/callstack/repack/pull/81\n *\n * @category Webpack Plugin\n */\nexport class AssetsPlugin implements WebpackPlugin {\n  /**\n   * Constructs new `AssetsPlugin`.\n   *\n   * @param config Plugin configuration options.\n   */\n  constructor(private config: AssetsPluginConfig) {\n    this.config.configureLoader = this.config.configureLoader ?? true;\n    this.config.extensions = this.config.extensions ?? ASSET_EXTENSIONS;\n    this.config.scalableExtensions =\n      this.config.scalableExtensions ?? SCALABLE_ASSETS;\n  }\n\n  /**\n   * Apply the plugin.\n   *\n   * @param compiler Webpack compiler instance.\n   */\n  apply(compiler: webpack.Compiler) {\n    const assetResolver = new AssetResolver(this.config, compiler);\n\n    if (this.config.configureLoader) {\n      compiler.options.module.rules.push({\n        test: getAssetExtensionsRegExp(assetResolver.config.extensions!),\n        use: [\n          {\n            loader: require.resolve('../../../assets-loader.js'),\n            options: {\n              platform: this.config.platform,\n              scalableAssetExtensions: SCALABLE_ASSETS,\n              devServerEnabled: this.config.devServerEnabled,\n            },\n          },\n        ],\n      });\n    }\n    compiler.options.resolve.plugins = (\n      compiler.options.resolve.plugins || []\n    ).concat(assetResolver);\n  }\n}\n"],"file":"AssetsPlugin.js"}