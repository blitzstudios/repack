{"version":3,"sources":["../../../src/webpack/plugins/OutputPlugin.ts"],"names":["OutputPlugin","constructor","config","platform","Error","apply","compiler","cliOptions","JSON","parse","process","env","CLI_OPTIONS_ENV_KEY","arguments","devServerEnabled","logger","getInfrastructureLogger","args","bundle","bundleOutput","assetsDest","sourcemapOutput","path","isAbsolute","join","root","bundleOutputDir","dirname","remoteChunksOutput","debug","isLocalChunk","chunkId","webpack","ModuleFilenameHelpers","matchObject","include","localChunks","entryGroup","remoteChunks","hooks","compilation","tap","processAssets","name","stage","Compilation","PROCESS_ASSETS_STAGE_ADDITIONS","chunkGroups","find","group","isInitial","sharedChunks","Set","entryChunk","chunk","chunks","has","getAllInitialChunks","filter","sharedChunk","forEach","add","push","id","toString","isUsedByLocalChunk","some","localChunk","includes","mainBundleAssetName","files","updateAsset","source","sources","ConcatSource","stringify","local","map","afterEmit","tapPromise","outputPath","outputOptions","localAssetsCopyProcessor","AssetsCopyProcessor","remoteAssetsCopyProcessor","enqueueChunk","isEntry","Promise","all","execute"],"mappings":"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","sourcesContent":["import path from 'path';\nimport webpack from 'webpack';\nimport { CLI_OPTIONS_ENV_KEY } from '../../env';\nimport { CliOptions, Rule, WebpackPlugin } from '../../types';\nimport { AssetsCopyProcessor } from './utils/AssetsCopyProcessor';\n\n/**\n * {@link OutputPlugin} configuration options.\n */\nexport interface OutputPluginConfig {\n  /** Target application platform. */\n  platform: string;\n  /** Whether the development server is enabled and running. */\n  devServerEnabled?: boolean;\n  /**\n   * Mark all chunks as a local chunk, meaning they will be bundled into the `.ipa`/`.apk` file.\n   * All chunks not matched by the rule(s) will become a remote one.\n   */\n  localChunks?: Rule | Rule[];\n  /**\n   * Output directory for all remote chunks and assets that are not bundled into\n   * the `.ipa`/`.apk` file.\n   * When left unspecified (`undefined`), the files will be available under `output.path`, next to\n   * the main/index bundle and other local chunks.\n   */\n  remoteChunksOutput?: string;\n}\n\n/**\n * Plugin for copying generated files (bundle, chunks, assets) from Webpack's built location to the\n * React Native application directory, so that the files can be packed together into the `ipa`/`apk`.\n *\n * @category Webpack Plugin\n */\nexport class OutputPlugin implements WebpackPlugin {\n  /**\n   * Constructs new `OutputPlugin`.\n   *\n   * @param config Plugin configuration options.\n   */\n  constructor(private config: OutputPluginConfig) {\n    if (!this.config.platform) {\n      throw new Error('Missing `platform` option in `OutputPlugin`');\n    }\n  }\n\n  /**\n   * Apply the plugin.\n   *\n   * @param compiler Webpack compiler instance.\n   */\n  apply(compiler: webpack.Compiler) {\n    const cliOptions: CliOptions | null = JSON.parse(\n      process.env[CLI_OPTIONS_ENV_KEY] ?? 'null'\n    );\n\n    // Noop when running from Webpack CLI or when running with dev server\n    if (\n      !cliOptions ||\n      'start' in cliOptions.arguments ||\n      this.config.devServerEnabled\n    ) {\n      return;\n    }\n\n    const logger = compiler.getInfrastructureLogger('ReactNativeOutputPlugin');\n\n    const args = cliOptions.arguments.bundle;\n    let { bundleOutput, assetsDest = '', sourcemapOutput = '' } = args;\n    if (!path.isAbsolute(bundleOutput)) {\n      bundleOutput = path.join(cliOptions.config.root, bundleOutput);\n    }\n    const bundleOutputDir = path.dirname(bundleOutput);\n\n    if (!sourcemapOutput) {\n      sourcemapOutput = `${bundleOutput}.map`;\n    }\n    if (!path.isAbsolute(sourcemapOutput)) {\n      sourcemapOutput = path.join(cliOptions.config.root, sourcemapOutput);\n    }\n\n    if (!assetsDest) {\n      assetsDest = bundleOutputDir;\n    }\n\n    let remoteChunksOutput = this.config.remoteChunksOutput;\n    if (remoteChunksOutput && !path.isAbsolute(remoteChunksOutput)) {\n      remoteChunksOutput = path.join(\n        cliOptions.config.root,\n        remoteChunksOutput\n      );\n    }\n\n    logger.debug('Detected output paths:', {\n      bundleOutput,\n      sourcemapOutput,\n      assetsDest,\n      remoteChunksOutput,\n    });\n\n    const isLocalChunk = (chunkId: string): boolean =>\n      webpack.ModuleFilenameHelpers.matchObject(\n        {\n          include: this.config.localChunks ?? [],\n        },\n        chunkId\n      );\n\n    let entryGroup: webpack.Compilation['chunkGroups'][0] | undefined;\n    const localChunks: webpack.Chunk[] = [];\n    const remoteChunks: webpack.Chunk[] = [];\n\n    compiler.hooks.compilation.tap('OutputPlugin', (compilation) => {\n      compilation.hooks.processAssets.tap(\n        {\n          name: 'OutputPlugin',\n          stage: webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS,\n        },\n        () => {\n          entryGroup = compilation.chunkGroups.find((group) =>\n            group.isInitial()\n          );\n          const sharedChunks = new Set<webpack.Chunk>();\n          let entryChunk: webpack.Chunk | undefined;\n\n          for (const chunk of compilation.chunks) {\n            // Do not process shared chunks right now.\n            if (sharedChunks.has(chunk)) {\n              continue;\n            }\n\n            [...chunk.getAllInitialChunks()]\n              .filter((sharedChunk) => sharedChunk !== chunk)\n              .forEach((sharedChunk) => {\n                sharedChunks.add(sharedChunk);\n              });\n\n            // Entry chunk\n            if (entryGroup?.chunks[0] === chunk) {\n              entryChunk = chunk;\n              localChunks.push(chunk);\n            } else if (isLocalChunk(chunk.name ?? chunk.id?.toString())) {\n              localChunks.push(chunk);\n            } else {\n              remoteChunks.push(chunk);\n            }\n          }\n\n          // Process shared chunks to add them either as local or remote chunk.\n          for (const sharedChunk of sharedChunks) {\n            const isUsedByLocalChunk = localChunks.some((localChunk) => {\n              return [...localChunk.getAllInitialChunks()].includes(\n                sharedChunk\n              );\n            });\n            if (\n              isUsedByLocalChunk ||\n              isLocalChunk(sharedChunk.name ?? sharedChunk.id?.toString())\n            ) {\n              localChunks.push(sharedChunk);\n            } else {\n              remoteChunks.push(sharedChunk);\n            }\n          }\n\n          if (!entryChunk) {\n            throw new Error(\n              'Cannot infer entry chunk - this should have not happened.'\n            );\n          }\n\n          const mainBundleAssetName = [...entryChunk.files][0];\n          compilation.updateAsset(\n            mainBundleAssetName,\n            (source) =>\n              new webpack.sources.ConcatSource(\n                `var __CHUNKS__=${JSON.stringify({\n                  local: localChunks.map(\n                    (localChunk) => localChunk.name ?? localChunk.id\n                  ),\n                })};`,\n                '\\n',\n                source\n              )\n          );\n        }\n      );\n    });\n\n    compiler.hooks.afterEmit.tapPromise('OutputPlugin', async (compilation) => {\n      const outputPath = compilation.outputOptions.path;\n      if (!outputPath) {\n        throw new Error('Cannot infer output path from compilation');\n      }\n\n      const localAssetsCopyProcessor = new AssetsCopyProcessor({\n        platform: this.config.platform,\n        compilation,\n        outputPath,\n        bundleOutput,\n        bundleOutputDir,\n        sourcemapOutput,\n        assetsDest,\n        logger,\n      });\n      const remoteAssetsCopyProcessor = new AssetsCopyProcessor({\n        platform: this.config.platform,\n        compilation,\n        outputPath,\n        bundleOutput: '',\n        bundleOutputDir: remoteChunksOutput ?? '',\n        sourcemapOutput: '',\n        assetsDest: remoteChunksOutput ?? '',\n        logger,\n      });\n\n      for (const chunk of localChunks) {\n        // Process entry chunk\n        localAssetsCopyProcessor.enqueueChunk(chunk, {\n          isEntry: entryGroup?.chunks[0] === chunk,\n        });\n      }\n\n      if (remoteChunksOutput) {\n        for (const chunk of remoteChunks) {\n          remoteAssetsCopyProcessor.enqueueChunk(chunk, { isEntry: false });\n        }\n      }\n\n      await Promise.all([\n        ...localAssetsCopyProcessor.execute(),\n        ...remoteAssetsCopyProcessor.execute(),\n      ]);\n    });\n  }\n}\n"],"file":"OutputPlugin.js"}