{"version":3,"sources":["../../../../src/webpack/plugins/AssetsResolverPlugin/AssetResolver.ts"],"names":["AssetResolver","collectScales","scalableAssetExtensions","files","name","type","platform","regex","includes","RegExp","priority","queryPlatform","indexOf","output","file","match","exec","scale","constructor","config","compiler","apply","resolver","test","extensions","logger","getInfrastructureLogger","getHook","tapAsync","request","_context","callback","requestPath","path","debug","fileSystem","readdir","dirname","error","results","basename","replace","extname","substring","filter","result","resolved","undefined","map","scalableExtensions","key","Object","keys","sort","a","b","Number","resolve","scales","resolvedFile","relativePath","join"],"mappings":"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","sourcesContent":["import path from 'path';\nimport escapeStringRegexp from 'escape-string-regexp';\nimport webpack from 'webpack';\nimport { HookMap, SyncHook } from 'tapable';\nimport { getAssetExtensionsRegExp } from '../../utils/assetExtensions';\n\n/**\n * {@link AssetResolver} configuration options.\n */\nexport interface AssetResolverConfig {\n  /**\n   * Override default asset extensions. If the asset matches one of the extensions, it will be process\n   * by the custom React Native asset resolver. Otherwise, the resolution will process normally and\n   * the asset will be handled by Webpack.\n   */\n  extensions?: string[];\n\n  /**\n   * Override default scalable extensions, which processes only scalable assets like images\n   * to create a map of DPI variants of the asset.\n   */\n  scalableExtensions?: string[];\n\n  /** Target application platform. */\n  platform: string;\n}\n\ninterface CollectedScales {\n  [key: string]: {\n    platform: string;\n    name: string;\n  };\n}\n\ninterface CollectOptions {\n  name: string;\n  platform: string;\n  type: string;\n}\n\n// Resolver is not directly exposed from webpack types so we need to do some TS trickery to\n// get the type.\ntype Resolver =\n  webpack.Compiler['resolverFactory']['hooks']['resolver'] extends HookMap<\n    infer H\n  >\n    ? H extends SyncHook<infer S>\n      ? S extends any[]\n        ? S[0]\n        : never\n      : never\n    : never;\n\nexport class AssetResolver {\n  static collectScales(\n    scalableAssetExtensions: string[],\n    files: string[],\n    { name, type, platform }: CollectOptions\n  ): CollectedScales {\n    const regex = scalableAssetExtensions.includes(type)\n      ? new RegExp(\n          `^${escapeStringRegexp(\n            name\n          )}(@\\\\d+(\\\\.\\\\d+)?x)?(\\\\.(${platform}|native))?.${escapeStringRegexp(\n            type\n          )}$`\n        )\n      : new RegExp(\n          `^${escapeStringRegexp(name)}(\\\\.(${platform}|native))?\\\\.${type}$`\n        );\n\n    const priority = (queryPlatform: string) =>\n      ['native', platform].indexOf(queryPlatform);\n\n    // Build a map of files according to the scale\n    const output: CollectedScales = {};\n    for (const file of files) {\n      const match = regex.exec(file);\n      if (match) {\n        let [, scale, , , platform] = match;\n        scale = scale || '@1x';\n        if (\n          !output[scale] ||\n          priority(platform) > priority(output[scale].platform)\n        ) {\n          output[scale] = { platform, name: file };\n        }\n      }\n    }\n\n    return output;\n  }\n\n  constructor(\n    public readonly config: AssetResolverConfig,\n    private compiler: webpack.Compiler\n  ) {}\n\n  apply(resolver: Resolver) {\n    const platform = this.config.platform;\n    const test = getAssetExtensionsRegExp(this.config.extensions!);\n\n    const logger = this.compiler.getInfrastructureLogger(\n      'ReactNativeAssetResolver'\n    );\n\n    resolver\n      .getHook('file')\n      .tapAsync('ReactNativeAssetResolver', (request, _context, callback) => {\n        const requestPath = request.path;\n        if (\n          (typeof requestPath === 'string' && !test.test(requestPath)) ||\n          requestPath === false\n        ) {\n          callback();\n          return;\n        }\n\n        logger.debug('Processing asset:', requestPath);\n\n        resolver.fileSystem.readdir(\n          path.dirname(requestPath),\n          (error, results) => {\n            if (error) {\n              callback();\n              return;\n            }\n\n            const basename = path.basename(requestPath);\n            const name = basename.replace(/\\.[^.]+$/, '');\n            const type = path.extname(requestPath).substring(1);\n            const files = ((results as Array<string | Buffer>)?.filter(\n              (result) => typeof result === 'string'\n            ) ?? []) as string[];\n\n            let resolved = files.includes(basename) ? requestPath : undefined;\n\n            if (!resolved) {\n              const map = AssetResolver.collectScales(\n                this.config.scalableExtensions!,\n                files,\n                {\n                  name,\n                  type,\n                  platform,\n                }\n              );\n              const key = map['@1x']\n                ? '@1x'\n                : Object.keys(map).sort(\n                    (a, b) =>\n                      Number(a.replace(/[^\\d.]/g, '')) -\n                      Number(b.replace(/[^\\d.]/g, ''))\n                  )[0];\n\n              resolved = map[key]?.name\n                ? path.resolve(path.dirname(requestPath), map[key].name)\n                : undefined;\n\n              if (!resolved) {\n                logger.error('Cannot resolve:', requestPath, {\n                  files,\n                  scales: map,\n                });\n                callback();\n                return;\n              }\n            }\n\n            const resolvedFile = {\n              ...request,\n              path: resolved,\n              relativePath:\n                request.relativePath &&\n                resolver.join(request.relativePath, resolved),\n              file: true,\n            };\n\n            logger.debug('Asset resolved:', requestPath, '->', resolved);\n\n            callback(null, resolvedFile);\n          }\n        );\n      });\n  }\n}\n"],"file":"AssetResolver.js"}