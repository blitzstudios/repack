{"version":3,"sources":["../../../src/webpack/plugins/LoggerPlugin.ts"],"names":["LoggerPlugin","constructor","config","Reporter","output","undefined","console","file","reporter","enableFileLogging","createEntry","issuer","type","args","timestamp","SUPPORTED_TYPES","includes","Date","now","message","processEntry","entry","listener","process","apply","compiler","options","stats","devServerEnabled","webpack","ProgressPlugin","percentage","text","progress","value","label","platform","hooks","infrastructureLog","tap","thisCompilation","compilation","log","intercept","call","time","done","errors","warnings","toJson","timings","entires","length","map","error","moduleName","warning","filter","Boolean","statsEntry","toString","flushFileLogs","stop","on","errorEntry"],"mappings":"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","sourcesContent":["import webpack from 'webpack';\nimport { Reporter } from '../../Reporter';\nimport { LogEntry, LogType, WebpackPlugin } from '../../types';\n\nexport type GenericFilter = Array<string | RegExp>;\n\n/**\n * {@link LoggerPlugin} configuration options.\n */\nexport interface LoggerPluginConfig {\n  /** Target application platform. */\n  platform: string;\n  /** Whether development server is running/enabled. */\n  devServerEnabled?: boolean;\n  /** Logging output config. */\n  output?: {\n    /** Whether to log to console. */\n    console?: boolean;\n    /** Absolute path to file to log messages to. */\n    file?: string;\n    /** Listener for new messages. */\n    listener?: (logEntry: LogEntry) => void;\n  };\n}\n\n/**\n * Logger plugin that handles all logging coming from the Webpack ecosystem, including compilation\n * progress as well as debug logs from other plugins and resolvers.\n *\n * @category Webpack Plugin\n */\nexport class LoggerPlugin implements WebpackPlugin {\n  private static SUPPORTED_TYPES: string[] = ['debug', 'info', 'warn', 'error'];\n\n  /** {@link Reporter} instance used to actually writing logs to terminal/file. */\n  readonly reporter = new Reporter();\n\n  /**\n   * Constructs new `LoggerPlugin`.\n   *\n   * @param config Plugin configuration options.\n   */\n  constructor(private config: LoggerPluginConfig) {\n    if (this.config.output === undefined) {\n      this.config.output = { console: true };\n    }\n    // TODO: disable console in reporter\n    if (this.config.output.file) {\n      this.reporter.enableFileLogging(this.config.output.file);\n    }\n  }\n\n  /**\n   * Create log entry from Webpack log message from {@link WebpackLogger}.\n   *\n   * @param issuer Issuer of the message.\n   * @param type Type of the message.\n   * @param args The body of the message.\n   * @param timestamp Timestamp when the message was recorder.\n   * @returns Log entry object or undefined when if message is invalid.\n   */\n  createEntry(\n    issuer: string,\n    type: string,\n    args: any[],\n    timestamp?: number\n  ): LogEntry | undefined {\n    if (LoggerPlugin.SUPPORTED_TYPES.includes(type)) {\n      return {\n        timestamp: timestamp ?? Date.now(),\n        issuer: issuer.includes('reactNativeAssetsLoader')\n          ? 'reactNativeAssetsLoader'\n          : issuer,\n        type: type as LogType,\n        message: args,\n      };\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Process log entry and pass it to {@link reporter} instance.\n   *\n   * @param entry Log entry to process\n   */\n  processEntry(entry: LogEntry) {\n    if (\n      !this.config.output?.console &&\n      !this.config.output?.file &&\n      !this.config.output?.listener\n    ) {\n      return;\n    }\n\n    this.reporter.process(entry);\n\n    if (this.config.output.listener) {\n      this.config.output.listener(entry);\n    }\n  }\n\n  /**\n   * Apply the plugin.\n   *\n   * @param compiler Webpack compiler instance.\n   */\n  apply(compiler: webpack.Compiler) {\n    // Make sure webpack-cli doesn't print stats by default.\n    compiler.options.stats = 'none';\n\n    if (this.config.devServerEnabled) {\n      new webpack.ProgressPlugin((percentage, message, text) => {\n        const entry = this.createEntry('LoggerPlugin', 'info', [\n          {\n            progress: {\n              value: percentage,\n              label: message,\n              message: text,\n              platform: this.config.platform,\n            },\n          },\n        ]);\n        if (entry) {\n          this.processEntry(entry);\n        }\n      }).apply(compiler);\n    }\n\n    compiler.hooks.infrastructureLog.tap(\n      'LoggerPlugin',\n      (issuer, type, args) => {\n        const entry = this.createEntry(issuer, type, args);\n        if (entry) {\n          this.processEntry(entry);\n        }\n        return true;\n      }\n    );\n\n    compiler.hooks.thisCompilation.tap('LoggerPlugin', (compilation) => {\n      compilation.hooks.log.intercept({\n        call: (issuer, { time, type, args }) => {\n          const entry = this.createEntry(issuer, type, args, time);\n          if (entry) {\n            this.processEntry(entry);\n          }\n        },\n      });\n    });\n\n    compiler.hooks.done.tap('LoggerPlugin', (stats) => {\n      if (this.config.devServerEnabled) {\n        const { time, errors, warnings } = stats.toJson({\n          timings: true,\n          errors: true,\n          warnings: true,\n        });\n\n        let entires: Array<LogEntry | undefined> = [];\n        if (errors?.length) {\n          entires = [\n            this.createEntry('LoggerPlugin', 'error', [\n              'Failed to build bundle due to errors',\n            ]),\n            ...errors.map((error) =>\n              this.createEntry('LoggerPlugin', 'error', [\n                `Error in \"${error.moduleName}\": ${error.message}`,\n              ])\n            ),\n          ];\n        } else {\n          entires = [\n            this.createEntry('LoggerPlugin', 'info', [\n              warnings?.length ? 'Bundle built with warnings' : 'Bundle built',\n              { time },\n            ]),\n            ...(warnings?.map((warning) =>\n              this.createEntry('LoggerPlugin', 'warn', [\n                `Warning in \"${warning.moduleName}\": ${warning.message}`,\n              ])\n            ) ?? []),\n          ];\n        }\n\n        for (const entry of entires.filter(Boolean) as LogEntry[]) {\n          this.processEntry(entry);\n        }\n      } else {\n        const statsEntry = this.createEntry('LoggerPlugin', 'info', [\n          stats.toString('all'),\n        ]);\n        if (statsEntry) {\n          this.processEntry(statsEntry);\n        }\n      }\n\n      this.reporter.flushFileLogs();\n      this.reporter.stop();\n    });\n\n    process.on('uncaughtException', (error) => {\n      const errorEntry = this.createEntry('LoggerPlugin', 'error', [error]);\n      if (errorEntry) {\n        this.processEntry(errorEntry);\n      }\n      this.reporter.flushFileLogs();\n      this.reporter.stop();\n    });\n\n    process.on('exit', () => {\n      this.reporter.flushFileLogs();\n      this.reporter.stop();\n    });\n  }\n}\n"],"file":"LoggerPlugin.js"}