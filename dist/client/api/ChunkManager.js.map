{"version":3,"sources":["../../../src/client/api/ChunkManager.ts"],"names":["NativeModules","ChunkManagerBackend","ChunkManager","backend","configure","config","resolveChunk","chunkId","parentChunkId","loadChunk","preloadChunk","invalidateChunks","chunksIds"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,mBAAT,QAAoC,uBAApC;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAN,CAAmB;AACxB;AACF;AACA;AACA;AACA;AACA;AACwB,SAAPC,OAAO,GAAG,IAAIF,mBAAJ,CAAwBD,aAAa,CAACE,YAAtC,CAAH;AAEtB;AACF;AACA;AACA;AACA;AACA;AACA;;AACkB,SAATE,SAAS,CAACC,MAAD,EAA6B;AAC3CH,IAAAA,YAAY,CAACC,OAAb,CAAqBC,SAArB,CAA+BC,MAA/B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC2B,eAAZC,YAAY,CAACC,OAAD,EAAkBC,aAAlB,EAA0C;AACjE,WAAON,YAAY,CAACC,OAAb,CAAqBG,YAArB,CAAkCC,OAAlC,EAA2CC,aAA3C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACwB,eAATC,SAAS,CAACF,OAAD,EAAkBC,aAAlB,EAA0C;AAC9D,WAAON,YAAY,CAACC,OAAb,CAAqBM,SAArB,CAA+BF,OAA/B,EAAwCC,aAAxC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AAC2B,eAAZE,YAAY,CAACH,OAAD,EAAkB;AACzC,WAAOL,YAAY,CAACC,OAAb,CAAqBO,YAArB,CAAkCH,OAAlC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC+B,eAAhBI,gBAAgB,CAACC,SAAmB,GAAG,EAAvB,EAA2B;AACtD,WAAOV,YAAY,CAACC,OAAb,CAAqBQ,gBAArB,CAAsCC,SAAtC,CAAP;AACD;;AAlEuB","sourcesContent":["// @ts-ignore\nimport { NativeModules } from 'react-native';\nimport { ChunkManagerBackend } from './ChunkManagerBackend';\nimport { ChunkManagerConfig } from './types';\n\n/**\n * A manager to ease resolving, downloading and executing additional code from async chunks or\n * any arbitrary JavaScript files.\n *\n * - In development mode, all chunks will be resolved and downloaded from the Development server.\n * - In production mode, local chunks will be resolved and loaded from filesystem and remote\n * chunks will be resolved and downloaded based on the `resolveRemoteChunk` function.\n * - You can force all resolution, regardless of the mode, to go through `resolveRemoteChunk`\n * function by setting `forceRemoteChunkResolution: true` in `ChunkManager.configure(...)`.\n *\n * This API is only useful if you are working with any form of Code Splitting.\n *\n * Example of using this API with async chunks:\n * ```js\n * import * as React from 'react';\n * import { ChunkManager } from '@callstack/repack/client';\n *\n * ChunkManager.configure({\n *   resolveRemoteChunk: async (chunkId) => {\n *     return {\n *       url: `http://domain.exaple/apps/${chunkId}`,\n *     };\n *   },\n * });\n *\n * // ChunkManager.loadChunk is called internally when running `import()`\n * const TeacherModule = React.lazy(() => import('./Teacher.js'));\n * const StudentModule = React.lazy(() => import('./Student.js'));\n *\n * export function App({ role }) {\n *   if (role === 'teacher') {\n *     return <TeacherModule />;\n *   }\n *\n *   return <StudentModule />\n * }\n * ```\n */\nexport class ChunkManager {\n  /**\n   * A instance of `ChunkManagerBackend`.\n   * Should not be used directly.\n   *\n   * @internal\n   */\n  private static backend = new ChunkManagerBackend(NativeModules.ChunkManager);\n\n  /**\n   * Configures `ChunkManager` to be able to resolve location of additional\n   * chunks (or arbitrary code) in production.\n   * Optionally, it also allows to set up caching to avoid over-fetching of chunks.\n   *\n   * @param config Configuration options.\n   */\n  static configure(config: ChunkManagerConfig) {\n    ChunkManager.backend.configure(config);\n  }\n\n  /**\n   * Resolves a URL to a given chunks and  whether to download a chunk\n   * or reuse previously downloaded one.\n   *\n   * @param chunkId Id of the chunk.\n   * @returns Promise with chunk's URL as `url` and a boolean `fetch` whether to download a chunk\n   * or reuse previously downloaded one.\n   */\n  static async resolveChunk(chunkId: string, parentChunkId?: string) {\n    return ChunkManager.backend.resolveChunk(chunkId, parentChunkId);\n  }\n\n  /**\n   * Resolves given chunk's location, download and execute it.\n   * Once the returned Promise is resolved, the code should have been evaluated.\n   *\n   * The execution of the code is handled internally by threading in React Native.\n   *\n   * @param chunkId Id of the chunk.\n   * @param parentChunkId Id of the parent chunk.\n   */\n  static async loadChunk(chunkId: string, parentChunkId?: string) {\n    return ChunkManager.backend.loadChunk(chunkId, parentChunkId);\n  }\n\n  /**\n   * Resolves given chunk's location and download it without executing.\n   *\n   * This function can be awaited to detect if the chunk was downloaded and for error handling.\n   *\n   * @param chunkId Id of the chunk.\n   */\n  static async preloadChunk(chunkId: string) {\n    return ChunkManager.backend.preloadChunk(chunkId);\n  }\n\n  /**\n   * Clears the cache (if configured in {@link ChunkManager.configure}) and removes downloaded\n   * files for given chunks from the filesystem.\n   *\n   * This function can be awaited to detect if the chunks were invalidated and for error handling.\n   *\n   * @param chunksIds Array of chunk Ids to clear from cache and remove from filesystem.\n   */\n  static async invalidateChunks(chunksIds: string[] = []) {\n    return ChunkManager.backend.invalidateChunks(chunksIds);\n  }\n}\n"],"file":"ChunkManager.js"}