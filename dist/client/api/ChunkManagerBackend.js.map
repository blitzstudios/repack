{"version":3,"sources":["../../../src/client/api/ChunkManagerBackend.ts"],"names":["EventEmitter","shallowEqual","LoadEvent","Chunk","CACHE_KEY","__DEV__","DEFAULT_TIMEOUT","ChunkManagerBackend","forceRemoteChunkResolution","eventEmitter","constructor","nativeModule","configure","config","storage","resolveRemoteChunk","__repack__","loadChunkCallback","push","parentPush","data","emit","bind","initCache","cache","JSON","parse","getItem","undefined","saveCache","setItem","stringify","resolveChunk","chunkId","parentChunkId","method","url","fetch","absolute","query","body","headers","timeout","fromDevServer","global","__CHUNKS__","includes","fromFileSystem","Error","fromRemote","excludeExtension","URLSearchParams","toString","Object","entries","reduce","acc","key","value","join","Headers","forEach","toLowerCase","FormData","tempBody","console","warn","loadChunk","error","message","loadedPromise","Promise","resolve","once","code","preloadChunk","invalidateChunks","chunksIds","ids","keys","urls"],"mappings":"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","sourcesContent":["/* globals __DEV__, __repack__, Headers, FormData */\n\nimport EventEmitter from 'events';\nimport shallowEqual from 'shallowequal';\nimport { LoadEvent } from '../shared/LoadEvent';\nimport { Chunk } from './Chunk';\nimport {\n  ChunkConfig,\n  ChunkManagerConfig,\n  RemoteChunkResolver,\n  StorageApi,\n} from './types';\n\nconst CACHE_KEY = `Repack.ChunkManager.Cache.v2.${\n  __DEV__ ? 'debug' : 'release'\n}`;\n\nexport const DEFAULT_TIMEOUT = 30000; // 30s\n\ntype Cache = Record<string, Omit<ChunkConfig, 'fetch'>>;\n\nexport class ChunkManagerBackend {\n  private cache?: Cache;\n  private resolveRemoteChunk?: RemoteChunkResolver;\n  private storage?: StorageApi;\n  private forceRemoteChunkResolution = false;\n  private eventEmitter = new EventEmitter();\n\n  constructor(private nativeModule: any) {}\n\n  configure(config: ChunkManagerConfig) {\n    this.storage = config.storage;\n    this.forceRemoteChunkResolution =\n      config.forceRemoteChunkResolution ?? false;\n    this.resolveRemoteChunk = config.resolveRemoteChunk;\n\n    __repack__.loadChunkCallback.push = ((\n      parentPush: typeof Array.prototype.push,\n      ...data: string[]\n    ) => {\n      this.eventEmitter.emit('loaded', data[0]);\n      return parentPush(...data);\n    }).bind(\n      null,\n      __repack__.loadChunkCallback.push.bind(__repack__.loadChunkCallback)\n    );\n  }\n\n  private async initCache() {\n    if (!this.cache) {\n      const cache: Cache | null | undefined = JSON.parse(\n        (await this.storage?.getItem(CACHE_KEY)) ?? '{}'\n      );\n      this.cache = cache ?? undefined;\n    }\n  }\n\n  private async saveCache() {\n    await this.storage?.setItem(CACHE_KEY, JSON.stringify(this.cache));\n  }\n\n  async resolveChunk(\n    chunkId: string,\n    parentChunkId?: string\n  ): Promise<ChunkConfig> {\n    await this.initCache();\n\n    let method: ChunkConfig['method'] = 'GET';\n    let url: ChunkConfig['url'];\n    let fetch = false;\n    let absolute = false;\n    let query: ChunkConfig['query'];\n    let body: ChunkConfig['body'];\n    let headers: ChunkConfig['headers'];\n    let timeout: ChunkConfig['timeout'] = DEFAULT_TIMEOUT;\n\n    if (__DEV__ && !this.forceRemoteChunkResolution) {\n      url = Chunk.fromDevServer(chunkId);\n      fetch = true;\n    } else if (\n      global.__CHUNKS__?.['local']?.includes(chunkId) &&\n      !this.forceRemoteChunkResolution\n    ) {\n      url = Chunk.fromFileSystem(chunkId);\n    } else {\n      if (!this.resolveRemoteChunk) {\n        throw new Error(\n          'No remote chunk resolver was provided. Did you forget to add `ChunkManager.configure({ resolveRemoteChunk: ... })`?'\n        );\n      }\n\n      const config = await this.resolveRemoteChunk(chunkId, parentChunkId);\n      absolute = config.absolute ?? absolute;\n      timeout = config.timeout ?? timeout;\n      method = config.method ?? method;\n      url = Chunk.fromRemote(config.url, {\n        excludeExtension: config.excludeExtension,\n      });\n\n      if (config.query instanceof URLSearchParams) {\n        query = config.query.toString();\n      } else if (typeof config.query === 'string') {\n        query = config.query;\n      } else if (config.query) {\n        query = Object.entries(config.query)\n          .reduce(\n            (acc, [key, value]) => [...acc, `${key}=${value}`],\n            [] as string[]\n          )\n          .join('&');\n      }\n\n      if (config.headers instanceof Headers) {\n        config.headers.forEach((value, key) => {\n          headers = headers ?? {};\n          headers[key.toLowerCase()] = value;\n        });\n      } else if (config.headers) {\n        headers = Object.entries(config.headers).reduce(\n          (acc, [key, value]) => ({\n            ...acc,\n            [key.toLowerCase()]: value,\n          }),\n          {}\n        );\n      }\n\n      if (config.body instanceof FormData) {\n        const tempBody: Record<string, string> = {};\n        config.body.forEach((value, key) => {\n          if (typeof value === 'string') {\n            tempBody[key] = value;\n          } else {\n            console.warn(\n              'ChunkManager.resolveChunk does not support File as FormData key in body'\n            );\n          }\n        });\n        body = JSON.stringify(tempBody);\n      } else if (config.body instanceof URLSearchParams) {\n        const tempBody: Record<string, string> = {};\n        config.body.forEach((value, key) => {\n          tempBody[key] = value;\n        });\n        body = JSON.stringify(tempBody);\n      } else {\n        body = config.body ?? undefined;\n      }\n    }\n\n    if (\n      !this.cache![chunkId] ||\n      this.cache![chunkId].url !== url ||\n      this.cache![chunkId].query !== query ||\n      !shallowEqual(this.cache![chunkId].headers, headers) ||\n      this.cache![chunkId].body !== body\n    ) {\n      fetch = true;\n      this.cache![chunkId] = {\n        url,\n        method,\n        query,\n        body,\n        headers,\n        timeout,\n        absolute,\n      };\n      await this.saveCache();\n    }\n\n    return {\n      ...this.cache![chunkId],\n      fetch,\n    };\n  }\n\n  async loadChunk(chunkId: string, parentChunkId?: string) {\n    let config: ChunkConfig;\n    try {\n      config = await this.resolveChunk(chunkId, parentChunkId);\n    } catch (error) {\n      console.error(\n        'ChunkManager.resolveChunk error:',\n        (error as Error).message\n      );\n      throw new LoadEvent('resolution', chunkId, error);\n    }\n\n    try {\n      const loadedPromise = new Promise<void>((resolve) => {\n        this.eventEmitter.once('loaded', (data: string) => {\n          if (data === chunkId) {\n            resolve();\n          }\n        });\n      });\n      await this.nativeModule.loadChunk(chunkId, config);\n      await loadedPromise;\n    } catch (error) {\n      const { message, code } = error as Error & { code: string };\n      console.error(\n        'ChunkManager.loadChunk invocation failed:',\n        message,\n        code ? `[${code}]` : '',\n        config\n      );\n      throw new LoadEvent('load', config.url, error);\n    }\n  }\n\n  async preloadChunk(chunkId: string, parentChunkId?: string) {\n    let config: ChunkConfig;\n    try {\n      config = await this.resolveChunk(chunkId, parentChunkId);\n    } catch (error) {\n      console.error(\n        'ChunkManager.resolveChunk error:',\n        (error as Error).message\n      );\n      throw new LoadEvent('resolution', chunkId, error);\n    }\n\n    try {\n      await this.nativeModule.preloadChunk(chunkId, config);\n    } catch (error) {\n      const { message, code } = error as Error & { code: string };\n      console.error(\n        'ChunkManager.preloadChunk invocation failed:',\n        message,\n        code ? `[${code}]` : '',\n        config\n      );\n      throw new LoadEvent('load', config.url, error);\n    }\n  }\n\n  async invalidateChunks(chunksIds: string[] = []) {\n    try {\n      await this.initCache();\n      const ids = chunksIds ?? Object.keys(this.cache!.urls);\n\n      for (const chunkId of ids) {\n        delete this.cache![chunkId];\n      }\n      await this.saveCache();\n\n      await this.nativeModule.invalidateChunks(ids);\n    } catch (error) {\n      const { message, code } = error as Error & { code: string };\n      console.error(\n        'ChunkManager.invalidateChunks invocation failed:',\n        message,\n        code ? `[${code}]` : ''\n      );\n      throw error;\n    }\n  }\n}\n"],"file":"ChunkManagerBackend.js"}