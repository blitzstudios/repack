{"version":3,"sources":["../../../../src/client/setup/modules/DevServerClient.ts"],"names":["DevServerClient","constructor","initSocket","address","host","socket","WebSocket","onClose","event","console","warn","message","undefined","onclose","onerror","onopen","flushBuffer","__DEV__","send","level","data","JSON","stringify","type","map","item","escapeString","highlight","maxDepth","min","plugins","prettyFormat","ReactElement","buffer","log","readyState","OPEN","push","client","module","exports","setup","enable","disable","registerBundle"],"mappings":";;AAGA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,eAAN,CAAsB;AAIpBC,EAAAA,WAAW,GAAG;AAAA;;AAAA,oCAFkC,EAElC;;AACZ,UAAMC,UAAU,GAAG,MAAM;AACvB,YAAMC,OAAO,GAAI,QAAO,kDAAuBC,IAAK,WAApD;AACA,WAAKC,MAAL,GAAc,IAAIC,SAAJ,CAAcH,OAAd,CAAd;;AAEA,YAAMI,OAAO,GAAIC,KAAD,IAAkB;AAChCC,QAAAA,OAAO,CAACC,IAAR,CACE,mCADF,EAEGF,KAAD,CAAiDG,OAFnD;AAIA,aAAKN,MAAL,GAAcO,SAAd;AACD,OAND;;AAQA,WAAKP,MAAL,CAAYQ,OAAZ,GAAsBN,OAAtB;AACA,WAAKF,MAAL,CAAYS,OAAZ,GAAsBP,OAAtB;;AACA,WAAKF,MAAL,CAAYU,MAAZ,GAAqB,MAAM;AACzB,aAAKC,WAAL;AACD,OAFD;AAGD,KAjBD;;AAmBA,QAAIC,OAAJ,EAAa;AACXf,MAAAA,UAAU;AACX;AACF;;AAEDgB,EAAAA,IAAI,CAACC,KAAD,EAAgBC,IAAhB,EAA6B;AAC/B,QAAI;AAAA;;AACF,2BAAKf,MAAL,8DAAaa,IAAb,CACEG,IAAI,CAACC,SAAL,CAAe;AACbC,QAAAA,IAAI,EAAE,YADO;AAEbJ,QAAAA,KAFa;AAGbC,QAAAA,IAAI,EAAEA,IAAI,CAACI,GAAL,CAAUC,IAAD,IACb,OAAOA,IAAP,KAAgB,QAAhB,GACIA,IADJ,GAEI,2BAAaA,IAAb,EAAmB;AACjBC,UAAAA,YAAY,EAAE,IADG;AAEjBC,UAAAA,SAAS,EAAE,IAFM;AAGjBC,UAAAA,QAAQ,EAAE,CAHO;AAIjBC,UAAAA,GAAG,EAAE,IAJY;AAKjBC,UAAAA,OAAO,EAAE,CAACC,sBAAaD,OAAb,CAAqBE,YAAtB;AALQ,SAAnB,CAHA;AAHO,OAAf,CADF;AAiBD,KAlBD,CAkBE,MAAM,CACN;AACD;AACF;;AAEDhB,EAAAA,WAAW,GAAG;AACZ,SAAK,MAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAX,IAA8B,KAAKa,MAAnC,EAA2C;AACzC,WAAKf,IAAL,CAAUC,KAAV,EAAiBC,IAAjB;AACD;;AAED,SAAKa,MAAL,GAAc,EAAd;AACD;;AAEDC,EAAAA,GAAG,CAACf,KAAD,EAAgBC,IAAhB,EAA6B;AAC9B,QAAI,KAAKf,MAAL,IAAe,KAAKA,MAAL,CAAY8B,UAAZ,KAA2B7B,SAAS,CAAC8B,IAAxD,EAA8D;AAC5D,WAAKpB,WAAL;AACA,WAAKE,IAAL,CAAUC,KAAV,EAAiBC,IAAjB;AACD,KAHD,MAGO;AACL,WAAKa,MAAL,CAAYI,IAAZ,CAAiB;AAAElB,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAjB;AACD;AACF;;AApEmB;;AAuEtB,MAAMkB,MAAM,GAAG,IAAItC,eAAJ,EAAf;AAEAuC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,KAAK,GAAG,CAAE,CADK;;AAEfC,EAAAA,MAAM,GAAG,CAAE,CAFI;;AAGfC,EAAAA,OAAO,GAAG,CAAE,CAHG;;AAIfC,EAAAA,cAAc,GAAG,CAAE,CAJJ;;AAKfV,EAAAA,GAAG,CAACf,KAAD,EAAgBC,IAAhB,EAA6B;AAC9BkB,IAAAA,MAAM,CAACJ,GAAP,CAAWf,KAAX,EAAkBC,IAAlB;AACD;;AAPc,CAAjB","sourcesContent":["/* eslint-env browser */\ndeclare var __DEV__: boolean;\n\nimport prettyFormat from 'pretty-format';\nimport { getDevServerLocation } from '../utils/getDevServerLocation';\n\n/**\n * With Webpack we don't use built-in metro-specific HMR client,\n * so the module `react-native/Libraries/Utilities/HMRClient.js` should be replaced with this one.\n *\n * Most of the code is noop apart from the `log` function which handles sending logs from client\n * application to the dev server.\n *\n * The console gets \"polyfilled\" here:\n * https://github.com/facebook/react-native/blob/v0.63.4/Libraries/Core/setUpDeveloperTools.js#L51-L69\n */\n\nclass DevServerClient {\n  socket?: WebSocket;\n  buffer: Array<{ level: string; data: any[] }> = [];\n\n  constructor() {\n    const initSocket = () => {\n      const address = `ws://${getDevServerLocation().host}/__client`;\n      this.socket = new WebSocket(address);\n\n      const onClose = (event: Event) => {\n        console.warn(\n          'Disconnected from the Dev Server:',\n          (event as unknown as { message: string | null }).message\n        );\n        this.socket = undefined;\n      };\n\n      this.socket.onclose = onClose;\n      this.socket.onerror = onClose;\n      this.socket.onopen = () => {\n        this.flushBuffer();\n      };\n    };\n\n    if (__DEV__) {\n      initSocket();\n    }\n  }\n\n  send(level: string, data: any[]) {\n    try {\n      this.socket?.send(\n        JSON.stringify({\n          type: 'client-log',\n          level,\n          data: data.map((item: any) =>\n            typeof item === 'string'\n              ? item\n              : prettyFormat(item, {\n                  escapeString: true,\n                  highlight: true,\n                  maxDepth: 3,\n                  min: true,\n                  plugins: [prettyFormat.plugins.ReactElement],\n                })\n          ),\n        })\n      );\n    } catch {\n      // Ignore error\n    }\n  }\n\n  flushBuffer() {\n    for (const { level, data } of this.buffer) {\n      this.send(level, data);\n    }\n\n    this.buffer = [];\n  }\n\n  log(level: string, data: any[]) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.flushBuffer();\n      this.send(level, data);\n    } else {\n      this.buffer.push({ level, data });\n    }\n  }\n}\n\nconst client = new DevServerClient();\n\nmodule.exports = {\n  setup() {},\n  enable() {},\n  disable() {},\n  registerBundle() {},\n  log(level: string, data: any[]) {\n    client.log(level, data);\n  },\n};\n"],"file":"DevServerClient.js"}