{"version":3,"sources":["../../../src/client/setup/setupRepack.ts"],"names":["hostname","__webpack_public_path__","replace","__repack__","loadChunk","url","cb","chunkName","chunkId","parentChunkId","undefined","ChunkManager","toString","error","__DEV__","module","hot","update","fetch","ok","LoadEvent","statusText","script","text","globalEvalWithSourceUrl","global","eval","call","console","Error"],"mappings":";;AAGA;;AACA;;AACA;;AALA;;AACA;AAMA;AACA;AACA;AACA;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAe,iDAArB,C,CACA;;AACAC,uBAAuB,GAAGA,uBAAuB,CAACC,OAAxB,CACxB,WADwB,EAExBF,QAFwB,CAA1B;;AAKAG,UAAU,CAACC,SAAX,GAAuB,OACrBC,GADqB,EAErBC,EAFqB,EAGrBC,SAHqB,EAIrBC,OAJqB,EAKrBC,aALqB,KAMlB;AACH,MAAIF,SAAS,KAAKG,SAAd,IAA2BF,OAAO,KAAKE,SAA3C,EAAsD;AACpD;AACA,QAAI;AACF,YAAMC,kBAAaP,SAAb,CACJI,OAAO,CAACI,QAAR,EADI,EAEJH,aAFI,aAEJA,aAFI,uBAEJA,aAAa,CAAEG,QAAf,EAFI,CAAN;AAID,KALD,CAKE,OAAOC,KAAP,EAAc;AACdP,MAAAA,EAAE,CAACO,KAAD,CAAF;AACD;AACF,GAVD,MAUO;AACL;AACA,QAAIC,OAAO,IAAIC,MAAM,CAACC,GAAtB,EAA2B;AACzB,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAACb,GAAD,CAA1B;;AACA,UAAI,CAACY,MAAM,CAACE,EAAZ,EAAgB;AACdb,QAAAA,EAAE,CAAC,IAAIc,oBAAJ,CAAcH,MAAM,CAACI,UAArB,EAAiChB,GAAjC,CAAD,CAAF;AACD,OAFD,MAEO;AACL,cAAMiB,MAAM,GAAG,MAAML,MAAM,CAACM,IAAP,EAArB;;AACA,YAAI;AACF;AACA,gBAAMC,uBAAuB,GAAGC,MAAM,CAACD,uBAAvC;AACC,uBAAY;AACX,gBAAIA,uBAAJ,EAA6B;AAC3BA,cAAAA,uBAAuB,CAACF,MAAD,EAAS,IAAT,CAAvB;AACD,aAFD,MAEO;AACLI,cAAAA,IAAI,CAACJ,MAAD,CAAJ;AACD;AACF,WANA,EAMCK,IAND,CAMMF,MANN,CAAD;AAOAnB,UAAAA,EAAE;AACH,SAXD,CAWE,OAAOO,KAAP,EAAc;AACde,UAAAA,OAAO,CAACf,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;AACAP,UAAAA,EAAE,CAAC,IAAIc,oBAAJ,CAAc,MAAd,EAAsBf,GAAtB,EAA2BQ,KAA3B,CAAD,CAAF;AACD;AACF;AACF,KAtBD,MAsBO;AACL,YAAM,IAAIgB,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;AACF,CA7CD","sourcesContent":["/* eslint-env browser */\n/* globals __repack__ __DEV__ */\n\nimport { ChunkManager } from '../api';\nimport { LoadEvent } from '../shared/LoadEvent';\nimport { getDevServerLocation } from './utils/getDevServerLocation';\n\n// We need to teak Webpack's public path, especially for Android, where `localhost`\n// is not a correct host but eg `10.0.2.2` is.\n// If the public path doesn't have `localhost` in it, it usually means a custom `host` was\n// provided, so the replace won't change that.\nconst { hostname } = getDevServerLocation();\n// eslint-disable-next-line\n__webpack_public_path__ = __webpack_public_path__.replace(\n  'localhost',\n  hostname\n);\n\n__repack__.loadChunk = async (\n  url: string,\n  cb: (event?: LoadEvent) => void,\n  chunkName?: string,\n  chunkId?: string | number,\n  parentChunkId?: string | number\n) => {\n  if (chunkName !== undefined && chunkId !== undefined) {\n    // Load webpack chunk\n    try {\n      await ChunkManager.loadChunk(\n        chunkId.toString(),\n        parentChunkId?.toString()\n      );\n    } catch (error) {\n      cb(error as LoadEvent);\n    }\n  } else {\n    // Load HMR update\n    if (__DEV__ && module.hot) {\n      const update = await fetch(url);\n      if (!update.ok) {\n        cb(new LoadEvent(update.statusText, url));\n      } else {\n        const script = await update.text();\n        try {\n          // @ts-ignore\n          const globalEvalWithSourceUrl = global.globalEvalWithSourceUrl;\n          (function () {\n            if (globalEvalWithSourceUrl) {\n              globalEvalWithSourceUrl(script, null);\n            } else {\n              eval(script);\n            }\n          }.call(global));\n          cb();\n        } catch (error) {\n          console.error('Loading HMR update chunk failed:', error);\n          cb(new LoadEvent('exec', url, error));\n        }\n      }\n    } else {\n      throw new Error('Loading HMR update chunks is disabled');\n    }\n  }\n};\n"],"file":"setupRepack.js"}