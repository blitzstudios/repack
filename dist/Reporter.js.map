{"version":3,"sources":["../src/Reporter.ts"],"names":["IS_SYMBOL_SUPPORTED","process","platform","env","CI","TERM","SYMBOLS","debug","colorette","gray","info","blue","warn","yellow","error","red","FALLBACK_SYMBOLS","Reporter","getSymbolForType","logType","colorizeText","text","constructor","config","isWorker","isVerbose","verbose","ora","start","getLogBuffer","logBuffer","stop","enableFileLogging","filename","outputFilename","flushFileLogs","fs","writeFileSync","fileLogBuffer","join","logEntry","push","JSON","stringify","shouldReport","type","shouldBroadcast","message","_skipBroadcast","console","log","isProgress","progress","value","label","updateProgress","wsDashboardServer","send","kind","transformedLogEntry","transformLogEntry","wsEventsServer","broadcastEvent","data","issuer","request","concat","slice","getOutputLogMessage","stopAndPersist","symbol","Math","round","Boolean","msg","req","reqId","res","responseTime","issuerOverride","rest","undefined","requestBuffer","bufferedReq","statusCode","method","url","Array","isArray","Object","keys","length","timestamp","body","rawStatus","status","green","util","inspect","colors","depth","Date","toISOString","split","bold"],"mappings":"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","sourcesContent":["import util from 'util';\nimport fs from 'fs';\nimport ora, { Ora } from 'ora';\nimport colorette from 'colorette';\nimport { LogEntry, LogType } from './types';\nimport { isVerbose, isWorker } from './env';\nimport { WebSocketEventsServer } from './server';\nimport { WebSocketDashboardServer } from './server/ws/WebSocketDashboardServer';\n\nconst IS_SYMBOL_SUPPORTED =\n  process.platform !== 'win32' ||\n  process.env.CI ||\n  process.env.TERM === 'xterm-256color';\n\nconst SYMBOLS: Record<LogType, string> = {\n  debug: colorette.gray('?'),\n  info: colorette.blue('ℹ'),\n  warn: colorette.yellow('⚠'),\n  error: colorette.red('✖'),\n};\n\nconst FALLBACK_SYMBOLS: Record<LogType, string> = {\n  debug: colorette.gray('?'),\n  info: colorette.blue('i'),\n  warn: colorette.yellow('!'),\n  error: colorette.red('x'),\n};\n\ninterface ReqLogData {\n  method: string;\n  url: string;\n}\n\ninterface ResLogData {\n  statusCode: number;\n}\n\n/**\n * {@link Reporter} configuration options.\n */\nexport interface ReporterConfig {\n  /** Whether to log additional debug messages. */\n  verbose?: boolean;\n  wsEventsServer?: WebSocketEventsServer;\n  wsDashboardServer?: WebSocketDashboardServer;\n}\n\n/**\n * Class that handles all reporting, logging and compilation progress handling.\n */\nexport class Reporter {\n  /**\n   * Get message symbol for given log type.\n   *\n   * @param logType Log type.\n   * @returns String with the symbol.\n   *\n   * @internal\n   */\n  static getSymbolForType(logType: LogType) {\n    if (IS_SYMBOL_SUPPORTED) {\n      return SYMBOLS[logType];\n    }\n\n    return FALLBACK_SYMBOLS[logType];\n  }\n\n  /**\n   * Apply ANSI colors to given text.\n   *\n   * @param logType Log type for the text, based on which different colors will be applied.\n   * @param text Text to apply the color onto.\n   * @returns Text wrapped in ANSI color sequences.\n   *\n   * @internal\n   */\n  static colorizeText(logType: LogType, text: string) {\n    if (logType === 'warn') {\n      return colorette.yellow(text);\n    } else if (logType === 'error') {\n      return colorette.red(text);\n    }\n\n    return text;\n  }\n\n  /** Whether reporter is running as a worker. */\n  public readonly isWorker: boolean;\n  /** Whether reporter is running in verbose mode. */\n  public readonly isVerbose: boolean;\n\n  private ora?: Ora;\n  private requestBuffer: Record<number, ReqLogData | undefined> = {};\n  private fileLogBuffer: string[] = [];\n  private outputFilename?: string;\n  private progress: Record<string, { value: number; label: string }> = {};\n  private logBuffer: LogEntry[] = [];\n\n  /**\n   * Create new instance of Reporter.\n   * If Reporter is running as a non-worker, it will start outputting to terminal.\n   *\n   * @param config Reporter configuration. Defaults to empty object.\n   */\n  constructor(private config: ReporterConfig = {}) {\n    this.isWorker = isWorker();\n    this.isVerbose = this.config.verbose ?? isVerbose();\n    if (!this.isWorker) {\n      this.ora = ora('Running...').start();\n    }\n  }\n\n  /**\n   * Get buffered server logs.\n   *\n   * @returns Array of server log entries.\n   */\n  getLogBuffer(): LogEntry[] {\n    return this.logBuffer;\n  }\n\n  /**\n   * Stop reporting and perform cleanup.\n   */\n  stop() {\n    if (!this.isWorker && this.ora) {\n      this.ora.stop();\n    }\n  }\n\n  /**\n   * Enable reporting to file alongside reporting to terminal.\n   *\n   * @param filename Absolute path to file to which write logs.\n   */\n  enableFileLogging(filename: string) {\n    this.outputFilename = filename;\n  }\n\n  /**\n   * Flush all buffered logs to a file provided that file\n   * reporting was enabled with {@link enableFileLogging}.\n   */\n  flushFileLogs() {\n    if (this.outputFilename) {\n      fs.writeFileSync(this.outputFilename, this.fileLogBuffer.join('\\n'));\n      this.fileLogBuffer = [];\n    }\n  }\n\n  /**\n   * Process new log entry and report it to terminal and file if file reporting was enabled with\n   * {@link enableFileLogging}.\n   *\n   * @param logEntry Log entry to process & report.\n   */\n  process(logEntry: LogEntry) {\n    if (this.outputFilename) {\n      this.fileLogBuffer.push(JSON.stringify(logEntry));\n    }\n\n    let shouldReport = logEntry.type !== 'debug' || this.isVerbose;\n    // Allow to skip broadcasting messages - e.g. if broadcasting fails we don't want to try\n    // to broadcast the failure as there's a high change it will fail again and cause infinite loop.\n    const shouldBroadcast = !logEntry.message?.[0]?._skipBroadcast;\n\n    // When reporter is running inside worker, simply stringify the entry\n    // and use console to log it to stdout. It will be later caught by DevSeverProxy.\n    if (this.isWorker) {\n      console.log(JSON.stringify(logEntry));\n    } else {\n      if (this.isProgress(logEntry)) {\n        const {\n          progress: { value, label, platform, message },\n        } = logEntry.message[0] as {\n          progress: {\n            value: number;\n            label: string;\n            platform: string;\n            message: string;\n          };\n        };\n        this.progress[platform] = { value, label };\n        this.updateProgress();\n\n        this.config.wsDashboardServer?.send(\n          JSON.stringify({ kind: 'progress', value, label, platform, message })\n        );\n      } else {\n        const transformedLogEntry = this.transformLogEntry(logEntry);\n        // Ignore empty logs\n        if (transformedLogEntry) {\n          if (shouldBroadcast) {\n            this.config.wsEventsServer?.broadcastEvent({\n              type: `repack_${transformedLogEntry.type}`,\n              data: [\n                transformedLogEntry.issuer,\n                ...transformedLogEntry.message,\n              ],\n            });\n          }\n\n          // Disable route logging if not verbose. It would be better to do it on per-router/Fastify\n          // level but unless webpack-dev-middleware is migrated to Fastify that's not a feasible solution.\n          // TODO: silence route logs on per-router/Fastify\n          if (transformedLogEntry.message[0].request && !this.isVerbose) {\n            shouldReport = false;\n          }\n\n          if (shouldReport) {\n            this.logBuffer = this.logBuffer.concat(logEntry).slice(-500);\n            this.config.wsDashboardServer?.send(\n              JSON.stringify({ kind: 'server-log', log: logEntry })\n            );\n          }\n\n          const text = this.getOutputLogMessage(transformedLogEntry);\n          if (shouldReport && this.ora) {\n            this.ora.stopAndPersist({\n              symbol: Reporter.getSymbolForType(logEntry.type),\n              text,\n            });\n            this.ora.start('Running...');\n          }\n        }\n      }\n    }\n  }\n\n  private updateProgress() {\n    let text = 'Running: ';\n    for (const platform in this.progress) {\n      const { value, label } = this.progress[platform];\n      text += `(${platform}) ${label} ${Math.round(value * 100)}% `;\n    }\n    this.ora?.start(text);\n  }\n\n  private isProgress(logEntry: LogEntry) {\n    return Boolean(logEntry.message?.[0]?.progress);\n  }\n\n  private transformLogEntry(logEntry: LogEntry): LogEntry | undefined {\n    const message = [];\n    let issuer = logEntry.issuer;\n    for (const value of logEntry.message) {\n      if (typeof value === 'string') {\n        message.push(value);\n      } else {\n        const {\n          msg,\n          req,\n          reqId,\n          res,\n          responseTime, // eslint-disable-line @typescript-eslint/no-unused-vars\n          issuer: issuerOverride,\n          ...rest\n        } = value as {\n          msg?: string | string[];\n          req?: ReqLogData;\n          reqId?: number;\n          res?: ResLogData;\n          responseTime?: number;\n          issuer?: string;\n          [key: string]: any; // For all unknown fields\n        };\n\n        if (issuerOverride) {\n          issuer = issuerOverride;\n        }\n\n        // Route logs from Fastify (DevServerProxy, DevServer)\n        if ((req || res) && reqId !== undefined) {\n          if (req) {\n            this.requestBuffer[reqId] = req;\n            // Logs in the future should have a `res` with the same `reqId`, so we will be\n            // able to match it. For now process next value.\n            continue;\n          }\n\n          if (res) {\n            const bufferedReq = this.requestBuffer[reqId];\n            if (bufferedReq) {\n              message.push({\n                request: {\n                  statusCode: res.statusCode,\n                  method: bufferedReq.method,\n                  url: bufferedReq.url,\n                },\n              });\n              // Ignore msg/other data and process next value\n              continue;\n            } else {\n              // Ignore and process next value\n              continue;\n            }\n          }\n        }\n\n        // Usually non-route logs from Fastify (DevServerProxy, DevServer will have a `msg` field)\n        if (msg) {\n          message.push(...(Array.isArray(msg) ? msg : [msg]));\n        }\n\n        if (Object.keys(rest).length) {\n          message.push(rest);\n        }\n      }\n    }\n\n    // Ignore empty logs\n    if (!message.length) {\n      return undefined;\n    }\n\n    return {\n      timestamp: logEntry.timestamp,\n      type: logEntry.type,\n      issuer,\n      message,\n    };\n  }\n\n  private getOutputLogMessage(logEntry: LogEntry): string {\n    let body = '';\n    for (const value of logEntry.message) {\n      if (typeof value === 'string') {\n        body += Reporter.colorizeText(logEntry.type, value);\n        body += ' ';\n      } else {\n        const { request, ...rest } = value as {\n          request?: { method: string; statusCode: number; url: string };\n          [key: string]: any; // For all unknown fields\n        };\n\n        if (request) {\n          let rawStatus = `${request.method} ${request.statusCode}`;\n          let status = colorette.green(rawStatus);\n          if (request.statusCode >= 500) {\n            status = colorette.red(rawStatus);\n          } else if (request.statusCode >= 400) {\n            status = colorette.yellow(rawStatus);\n          }\n\n          body += `${status} ${colorette.gray(request.url)}`;\n          body += ' ';\n        }\n\n        if (Object.keys(rest).length) {\n          body +=\n            util.inspect(rest, {\n              colors: true,\n              depth: 3,\n            }) + ' ';\n        }\n      }\n    }\n\n    return (\n      colorette.gray(\n        `[${new Date(logEntry.timestamp).toISOString().split('T')[1]}]`\n      ) +\n      colorette.bold(`[${logEntry.issuer}]`) +\n      ` ${body}`\n    );\n  }\n}\n"],"file":"Reporter.js"}