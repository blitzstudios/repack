{"version":3,"file":"Compiler.js","names":["_nodeFs","_interopRequireDefault","require","_nodePath","_core","_memfs","_cliError","_index","_consts","e","__esModule","default","Compiler","assetsCache","statsCache","resolvers","isCompilationInProgress","constructor","configs","reporter","rootDir","compiler","rspack","platforms","map","config","name","filesystem","memfs","createFsFromVolume","Volume","outputFileSystem","setupCompiler","devServerOptions","compilers","options","devServer","watchOptions","callPendingResolvers","platform","error","forEach","resolver","setDevServerContext","ctx","devServerContext","hooks","watchRun","tap","runAdbReverse","port","logger","log","notifyBuildStart","broadcastToHmrClients","action","body","invalid","done","multiStats","stats","toJson","all","assets","children","outputPath","timings","hash","errors","warnings","childStats","filter","asset","type","reduce","acc","info","size","assetPath","path","join","data","readFileSync","adaptFilenameToPlatform","related","sourceMap","sourceMapName","Array","isArray","sourceMapPath","sourceMapData","sourceMapAsset","hotModuleReplacement","length","process","issuer","timestamp","Date","now","message","String","notifyBuildEnd","start","watch","getAsset","filename","fileFromCache","Promise","reject","Error","resolve","concat","getSource","DEV_SERVER_ASSET_TYPES","test","CLIError","filePath","source","fs","promises","readFile","getSourceMap","sourceMapFilename","exports"],"sources":["../../../src/commands/rspack/Compiler.ts"],"sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\nimport type { Server } from '@callstack/repack-dev-server';\nimport { rspack } from '@rspack/core';\nimport type {\n  MultiCompiler,\n  MultiRspackOptions,\n  StatsCompilation,\n} from '@rspack/core';\nimport memfs from 'memfs';\nimport type { Reporter } from '../../logging/types.js';\nimport type { HMRMessage } from '../../types.js';\nimport { CLIError } from '../common/cliError.js';\nimport { adaptFilenameToPlatform, runAdbReverse } from '../common/index.js';\nimport { DEV_SERVER_ASSET_TYPES } from '../consts.js';\nimport type { CompilerAsset } from './types.js';\n\nexport class Compiler {\n  compiler: MultiCompiler;\n  filesystem: memfs.IFs;\n  platforms: string[];\n  assetsCache: Record<string, Record<string, CompilerAsset> | undefined> = {};\n  statsCache: Record<string, StatsCompilation | undefined> = {};\n  resolvers: Record<string, Array<(error?: Error) => void>> = {};\n  isCompilationInProgress = false;\n  // late-init\n  devServerContext!: Server.DelegateContext;\n\n  constructor(\n    configs: MultiRspackOptions,\n    private reporter: Reporter,\n    private rootDir: string\n  ) {\n    this.compiler = rspack.rspack(configs);\n    this.platforms = configs.map((config) => config.name as string);\n    this.filesystem = memfs.createFsFromVolume(new memfs.Volume());\n    // @ts-expect-error memfs is compatible enough\n    this.compiler.outputFileSystem = this.filesystem;\n\n    this.setupCompiler();\n  }\n\n  get devServerOptions() {\n    return this.compiler.compilers[0].options.devServer ?? {};\n  }\n\n  get watchOptions() {\n    return this.compiler.compilers[0].options.watchOptions ?? {};\n  }\n\n  private callPendingResolvers(platform: string, error?: Error) {\n    this.resolvers[platform]?.forEach((resolver) => resolver(error));\n    this.resolvers[platform] = [];\n  }\n\n  setDevServerContext(ctx: Server.DelegateContext) {\n    this.devServerContext = ctx;\n  }\n\n  private setupCompiler() {\n    this.compiler.hooks.watchRun.tap('repack:watch', () => {\n      this.isCompilationInProgress = true;\n      this.platforms.forEach((platform) => {\n        if (platform === 'android') {\n          void runAdbReverse({\n            port: this.devServerContext.options.port,\n            logger: this.devServerContext.log,\n          });\n        }\n        this.devServerContext.notifyBuildStart(platform);\n        this.devServerContext.broadcastToHmrClients<HMRMessage>({\n          action: 'compiling',\n          body: { name: platform },\n        });\n      });\n    });\n\n    this.compiler.hooks.invalid.tap('repack:invalid', () => {\n      this.isCompilationInProgress = true;\n      this.platforms.forEach((platform) => {\n        this.devServerContext.notifyBuildStart(platform);\n        this.devServerContext.broadcastToHmrClients<HMRMessage>({\n          action: 'compiling',\n          body: { name: platform },\n        });\n      });\n    });\n\n    this.compiler.hooks.done.tap('repack:done', (multiStats) => {\n      const stats = multiStats.toJson({\n        all: false,\n        assets: true,\n        children: true,\n        outputPath: true,\n        timings: true,\n        hash: true,\n        errors: true,\n        warnings: true,\n      });\n\n      try {\n        stats.children!.map((childStats) => {\n          const platform = childStats.name!;\n          this.devServerContext.broadcastToHmrClients<HMRMessage>({\n            action: 'hash',\n            body: { name: platform, hash: childStats.hash },\n          });\n\n          this.statsCache[platform] = childStats;\n          const assets = childStats.assets!;\n\n          this.assetsCache[platform] = assets\n            .filter((asset) => asset.type === 'asset')\n            .reduce(\n              (acc, { name, info, size }) => {\n                const assetPath = path.join(childStats.outputPath!, name);\n                const data = this.filesystem.readFileSync(assetPath) as Buffer;\n                const asset = { data, info, size };\n\n                acc[adaptFilenameToPlatform(name)] = asset;\n\n                if (info.related?.sourceMap) {\n                  const sourceMapName = Array.isArray(info.related.sourceMap)\n                    ? info.related.sourceMap[0]\n                    : info.related.sourceMap;\n                  const sourceMapPath = path.join(\n                    childStats.outputPath!,\n                    sourceMapName\n                  );\n                  const sourceMapData = this.filesystem.readFileSync(\n                    sourceMapPath\n                  ) as Buffer;\n                  const sourceMapAsset = {\n                    data: sourceMapData,\n                    info: {\n                      hotModuleReplacement: info.hotModuleReplacement,\n                      size: sourceMapData.length,\n                    },\n                    size: sourceMapData.length,\n                  };\n\n                  acc[adaptFilenameToPlatform(sourceMapName)] = sourceMapAsset;\n                }\n\n                return acc;\n              },\n              // keep old assets\n              this.assetsCache[platform] ?? {}\n            );\n        });\n      } catch (error) {\n        this.reporter.process({\n          type: 'error',\n          issuer: 'DevServer',\n          timestamp: Date.now(),\n          message: [\n            'An error occured while processing assets from compilation:',\n            String(error),\n          ],\n        });\n      }\n\n      this.isCompilationInProgress = false;\n\n      stats.children?.forEach((childStats) => {\n        const platform = childStats.name!;\n        this.callPendingResolvers(platform);\n        this.devServerContext.notifyBuildEnd(platform);\n        this.devServerContext.broadcastToHmrClients<HMRMessage>({\n          action: 'ok',\n          body: { name: platform },\n        });\n      });\n    });\n  }\n\n  start() {\n    this.reporter.process({\n      type: 'info',\n      issuer: 'DevServer',\n      timestamp: Date.now(),\n      message: ['Starting build for platforms:', this.platforms.join(', ')],\n    });\n\n    this.compiler.watch(this.watchOptions, (error) => {\n      if (!error) return;\n      this.platforms.forEach((platform) => {\n        this.callPendingResolvers(platform, error);\n      });\n    });\n  }\n\n  async getAsset(filename: string, platform: string): Promise<CompilerAsset> {\n    // Return file from assetsCache if exists\n    const fileFromCache = this.assetsCache[platform]?.[filename];\n    if (fileFromCache) {\n      return fileFromCache;\n    }\n\n    if (!this.isCompilationInProgress) {\n      return Promise.reject(\n        new Error(\n          `File ${filename} for ${platform} not found in compilation assets (no compilation in progress)`\n        )\n      );\n    }\n\n    return await new Promise<CompilerAsset>((resolve, reject) => {\n      // Add new resolver to be executed when compilation is finished\n      this.resolvers[platform] = (this.resolvers[platform] ?? []).concat(\n        (error?: Error) => {\n          if (error) {\n            reject(error);\n          } else {\n            const fileFromCache = this.assetsCache[platform]?.[filename];\n            if (fileFromCache) {\n              resolve(fileFromCache);\n            } else {\n              reject(\n                new Error(\n                  `File ${filename} for ${platform} not found in compilation assets`\n                )\n              );\n            }\n          }\n        }\n      );\n    });\n  }\n\n  async getSource(\n    filename: string,\n    platform: string | undefined\n  ): Promise<string | Buffer> {\n    if (DEV_SERVER_ASSET_TYPES.test(filename)) {\n      if (!platform) {\n        throw new CLIError(`Cannot detect platform for ${filename}`);\n      }\n      const asset = await this.getAsset(filename, platform);\n      return asset.data;\n    }\n\n    try {\n      const filePath = path.join(this.rootDir, filename);\n      const source = await fs.promises.readFile(filePath, 'utf8');\n      return source;\n    } catch {\n      throw new CLIError(`File ${filename} not found`);\n    }\n  }\n\n  async getSourceMap(\n    filename: string,\n    platform: string | undefined\n  ): Promise<string | Buffer> {\n    if (!platform) {\n      throw new CLIError(\n        `Cannot determine platform for source map of ${filename}`\n      );\n    }\n\n    try {\n      const { info } = await this.getAsset(filename, platform);\n      let sourceMapFilename = info.related?.sourceMap;\n\n      if (!sourceMapFilename) {\n        throw new CLIError(\n          `Cannot determine source map filename for ${filename} for ${platform}`\n        );\n      }\n\n      if (Array.isArray(sourceMapFilename)) {\n        sourceMapFilename = sourceMapFilename[0];\n      }\n\n      const sourceMap = await this.getAsset(sourceMapFilename, platform);\n      return sourceMap.data;\n    } catch {\n      throw new CLIError(\n        `Source map for ${filename} for ${platform} is missing`\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}