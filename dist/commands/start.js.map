{"version":3,"sources":["../../src/commands/start.ts"],"names":["start","_","config","args","webpackConfigPath","root","webpackConfig","cliOptions","reactNativePath","command","arguments","platform","process","argv","includes","env","VERBOSE_ENV_KEY","devServerProxy","DevServerProxy","host","port","DEFAULT_PORT","https","cert","key","context","run","interactive","stdin","setRawMode","fastify","log","warn","msg","readline","emitKeypressEvents","on","_key","data","ctrl","name","exit","emit","wsMessageServer","broadcast","info"],"mappings":"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","sourcesContent":["import readline from 'readline';\nimport { Config } from '@react-native-community/cli-types';\nimport { CliOptions, StartArguments } from '../types';\nimport { DEFAULT_PORT } from '../webpack/utils';\nimport { DevServerProxy } from '../server';\nimport { VERBOSE_ENV_KEY } from '../env';\nimport { getWebpackConfigPath } from './utils/getWebpackConfigPath';\n\n/**\n * Start command for React Native CLI.\n * It runs {@link DevServerProxy} to provide Development Server functionality to React Native apps\n * in development mode.\n *\n * @param _ Original, non-parsed arguments that were provided when running this command.\n * @param config React Native CLI configuration object.\n * @param args Parsed command line arguments.\n *\n * @internal\n * @category CLI command\n */\nexport function start(_: string[], config: Config, args: StartArguments) {\n  const webpackConfigPath = getWebpackConfigPath(\n    config.root,\n    args.webpackConfig\n  );\n  const cliOptions: CliOptions = {\n    config: {\n      root: config.root,\n      reactNativePath: config.reactNativePath,\n      webpackConfigPath,\n    },\n    command: 'start',\n    arguments: {\n      // `platform` is empty, since it will be filled in later by `DevServerProxy`\n      start: { ...args, platform: '' },\n    },\n  };\n\n  if (process.argv.includes('--verbose')) {\n    process.env[VERBOSE_ENV_KEY] = '1';\n  }\n\n  const devServerProxy = new DevServerProxy(\n    {\n      host: args.host,\n      port: args.port ?? DEFAULT_PORT,\n      https: args.https,\n      cert: args.cert,\n      key: args.key,\n      context: config.root,\n      platform: args.platform,\n    },\n    cliOptions\n  );\n  devServerProxy.run();\n\n  if (args.interactive) {\n    if (!process.stdin.setRawMode) {\n      devServerProxy.fastify.log.warn({\n        msg: 'Interactive mode is not supported in this environment',\n      });\n    }\n\n    readline.emitKeypressEvents(process.stdin);\n    process.stdin.setRawMode(true);\n\n    process.stdin.on('keypress', (_key, data) => {\n      const { ctrl, name } = data;\n      if (ctrl === true) {\n        switch (name) {\n          case 'c':\n            process.exit();\n            break;\n          case 'z':\n            process.emit('SIGTSTP', 'SIGTSTP');\n            break;\n        }\n      } else if (name === 'r') {\n        devServerProxy.wsMessageServer.broadcast('reload');\n        devServerProxy.fastify.log.info({\n          msg: 'Reloading app',\n        });\n      } else if (name === 'd') {\n        devServerProxy.wsMessageServer.broadcast('devMenu');\n        devServerProxy.fastify.log.info({\n          msg: 'Opening developer menu',\n        });\n      }\n    });\n  }\n}\n"],"file":"start.js"}