{"version":3,"file":"Compiler.js","names":["_nodeEvents","_interopRequireDefault","require","_nodeFs","_nodePath","_nodeWorker_threads","_env","_cliError","_consts","e","__esModule","default","Compiler","EventEmitter","workers","assetsCache","statsCache","resolvers","progressSenders","isCompilationInProgress","constructor","args","reporter","rootDir","reactNativePath","spawnWorker","platform","workerData","worker","Worker","path","join","__dirname","stdout","stderr","env","process","WORKER_ENV_KEY","onStdChunk","chunk","fallbackType","data","toString","trim","log","JSON","parse","timestamp","Date","now","type","issuer","message","on","callPendingResolvers","error","forEach","resolver","value","event","stats","Object","fromEntries","entries","assets","map","name","info","size","Buffer","from","emit","sendProgress","Number","isNaN","total","completed","progress","percentage","label","code","Error","addProgressSender","callback","push","removeProgressSender","filter","item","getAsset","filename","fileFromCache","Promise","reject","resolve","concat","getSource","DEV_SERVER_ASSET_TYPES","test","CLIError","asset","filePath","source","fs","promises","readFile","getSourceMap","sourceMapFilename","related","sourceMap","Array","isArray","exports"],"sources":["../../../src/commands/webpack/Compiler.ts"],"sourcesContent":["import EventEmitter from 'node:events';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { Worker } from 'node:worker_threads';\nimport type { SendProgress } from '@callstack/repack-dev-server';\nimport type webpack from 'webpack';\nimport { WORKER_ENV_KEY } from '../../env.js';\nimport type { LogType, Reporter } from '../../logging/types.js';\nimport { CLIError } from '../common/cliError.js';\nimport { DEV_SERVER_ASSET_TYPES } from '../consts.js';\nimport type { StartArguments } from '../types.js';\nimport type {\n  CompilerAsset,\n  WebpackWorkerOptions,\n  WorkerMessages,\n} from './types.js';\n\ntype Platform = string;\n\nexport class Compiler extends EventEmitter {\n  workers: Record<Platform, Worker> = {};\n  assetsCache: Record<Platform, Record<string, CompilerAsset>> = {};\n  statsCache: Record<Platform, webpack.StatsCompilation> = {};\n  resolvers: Record<Platform, Array<(error?: Error) => void>> = {};\n  progressSenders: Record<Platform, SendProgress[]> = {};\n  isCompilationInProgress: Record<Platform, boolean> = {};\n\n  constructor(\n    private args: StartArguments,\n    private reporter: Reporter,\n    private rootDir: string,\n    private reactNativePath: string\n  ) {\n    super();\n  }\n\n  private spawnWorker(platform: string) {\n    this.isCompilationInProgress[platform] = true;\n\n    const workerData: WebpackWorkerOptions = {\n      platform,\n      args: this.args,\n      rootDir: this.rootDir,\n      reactNativePath: this.reactNativePath,\n    };\n\n    const worker = new Worker(path.join(__dirname, './CompilerWorker.js'), {\n      stdout: true,\n      stderr: true,\n      env: {\n        ...process.env,\n        [WORKER_ENV_KEY]: '1',\n      },\n      workerData,\n    });\n\n    const onStdChunk = (chunk: string | Buffer, fallbackType: LogType) => {\n      const data = chunk.toString().trim();\n      if (data) {\n        try {\n          const log = JSON.parse(data);\n          this.reporter.process(log);\n        } catch {\n          this.reporter.process({\n            timestamp: Date.now(),\n            type: fallbackType,\n            issuer: 'WebpackCompilerWorker',\n            message: [data],\n          });\n        }\n      }\n    };\n\n    worker.stdout.on('data', (chunk) => {\n      onStdChunk(chunk, 'info');\n    });\n\n    worker.stderr.on('data', (chunk) => {\n      onStdChunk(chunk, 'info');\n    });\n\n    const callPendingResolvers = (error?: Error) => {\n      this.resolvers[platform].forEach((resolver) => resolver(error));\n      this.resolvers[platform] = [];\n    };\n\n    worker.on('message', (value: WorkerMessages.WorkerMessage) => {\n      if (value.event === 'done') {\n        this.isCompilationInProgress[platform] = false;\n        this.statsCache[platform] = value.stats;\n\n        this.assetsCache[platform] = {\n          // keep old assets\n          ...(this.assetsCache[platform] ?? {}),\n          // convert asset data Uint8Array to Buffer\n          ...Object.fromEntries(\n            Object.entries(value.assets).map(([name, { data, info, size }]) => {\n              return [name, { data: Buffer.from(data), info, size }];\n            })\n          ),\n        };\n        this.emit(value.event, { platform, stats: value.stats });\n        callPendingResolvers();\n      } else if (value.event === 'error') {\n        this.emit(value.event, value.error);\n      } else if (value.event === 'progress') {\n        this.progressSenders[platform].forEach((sendProgress) => {\n          if (Number.isNaN(value.total)) return;\n          if (Number.isNaN(value.completed)) return;\n          sendProgress({\n            total: value.total,\n            completed: value.completed,\n          });\n        });\n        this.reporter.process({\n          issuer: 'DevServer',\n          message: [\n            {\n              progress: {\n                value: value.percentage,\n                label: value.label,\n                message: value.message,\n                platform,\n              },\n            },\n          ],\n          timestamp: Date.now(),\n          type: 'progress',\n        });\n      } else {\n        this.isCompilationInProgress[platform] = true;\n        this.emit(value.event, { platform });\n      }\n    });\n\n    worker.on('error', (error) => {\n      callPendingResolvers(error);\n    });\n\n    worker.on('exit', (code) => {\n      callPendingResolvers(new Error(`Worker stopped with exit code ${code}`));\n    });\n\n    return worker;\n  }\n\n  private addProgressSender(platform: string, callback?: SendProgress) {\n    if (!callback) return;\n    this.progressSenders[platform] = this.progressSenders[platform] ?? [];\n    this.progressSenders[platform].push(callback);\n  }\n\n  private removeProgressSender(platform: string, callback?: SendProgress) {\n    if (!callback) return;\n    this.progressSenders[platform] = this.progressSenders[platform].filter(\n      (item) => item !== callback\n    );\n  }\n\n  async getAsset(\n    filename: string,\n    platform: string,\n    sendProgress?: SendProgress\n  ): Promise<CompilerAsset> {\n    // Return file from assetsCache if exists\n    const fileFromCache = this.assetsCache[platform]?.[filename];\n    if (fileFromCache) return fileFromCache;\n\n    this.addProgressSender(platform, sendProgress);\n\n    // Spawn new worker if not already running\n    if (!this.workers[platform]) {\n      this.workers[platform] = this.spawnWorker(platform);\n    } else if (!this.isCompilationInProgress[platform]) {\n      this.removeProgressSender(platform, sendProgress);\n      return Promise.reject(\n        new Error(\n          `File ${filename} for ${platform} not found in compilation assets`\n        )\n      );\n    }\n\n    return await new Promise<CompilerAsset>((resolve, reject) => {\n      // Add new resolver to be executed when compilation is finished\n      this.resolvers[platform] = (this.resolvers[platform] ?? []).concat(\n        (error?: Error) => {\n          this.removeProgressSender(platform, sendProgress);\n\n          if (error) {\n            reject(error);\n          } else {\n            const fileFromCache = this.assetsCache[platform]?.[filename];\n            if (fileFromCache) {\n              resolve(fileFromCache);\n            } else {\n              reject(\n                new Error(\n                  `File ${filename} for ${platform} not found in compilation assets`\n                )\n              );\n            }\n          }\n        }\n      );\n    });\n  }\n\n  async getSource(\n    filename: string,\n    platform: string | undefined,\n    sendProgress?: SendProgress\n  ): Promise<string | Buffer> {\n    if (DEV_SERVER_ASSET_TYPES.test(filename)) {\n      if (!platform) {\n        throw new CLIError(`Cannot detect platform for ${filename}`);\n      }\n      const asset = await this.getAsset(filename, platform, sendProgress);\n      return asset.data;\n    }\n\n    try {\n      const filePath = path.join(this.rootDir, filename);\n      const source = await fs.promises.readFile(filePath, 'utf8');\n      return source;\n    } catch {\n      throw new CLIError(`File ${filename} not found`);\n    }\n  }\n\n  async getSourceMap(\n    filename: string,\n    platform: string | undefined\n  ): Promise<string | Buffer> {\n    if (!platform) {\n      throw new CLIError(\n        `Cannot determine platform for source map of ${filename}`\n      );\n    }\n\n    try {\n      const { info } = await this.getAsset(filename, platform);\n      let sourceMapFilename = info.related?.sourceMap;\n\n      if (!sourceMapFilename) {\n        throw new CLIError(\n          `Cannot determine source map filename for ${filename} for ${platform}`\n        );\n      }\n\n      if (Array.isArray(sourceMapFilename)) {\n        sourceMapFilename = sourceMapFilename[0];\n      }\n\n      const sourceMap = await this.getAsset(sourceMapFilename, platform);\n      return sourceMap.data;\n    } catch {\n      throw new CLIError(\n        `Source map for ${filename} for ${platform} is missing`\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}