{"version":3,"file":"setupStatsWriter.js","names":["_nodeFs","_interopRequireDefault","require","_nodePath","_promises","_jsonExt","e","__esModule","default","normalizeFilepath","filepath","root","path","isAbsolute","resolve","ensureFilepathExists","fs","mkdirSync","dirname","recursive","normalizeStatsOptions","options","preset","undefined","writeStats","stats","logger","console","rootDir","outputPath","info","statsStream","stringifyStream","outputStream","createWriteStream","pipeline"],"sources":["../../../src/commands/common/setupStatsWriter.ts"],"sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\nimport { pipeline } from 'node:stream/promises';\nimport { stringifyStream } from '@discoveryjs/json-ext';\nimport type { Logger } from '../../types.js';\n\nfunction normalizeFilepath(filepath: string, root: string): string {\n  if (path.isAbsolute(filepath)) {\n    return filepath;\n  }\n  return path.resolve(root, filepath);\n}\n\nfunction ensureFilepathExists(filepath: string) {\n  fs.mkdirSync(path.dirname(filepath), { recursive: true });\n}\n\nexport function normalizeStatsOptions<Stats>(\n  options: Stats,\n  preset?: string\n): Stats {\n  if (preset !== undefined) {\n    return { preset: preset } as Stats;\n  }\n  if (options === true) {\n    return { preset: 'normal' } as Stats;\n  }\n  if (options === false) {\n    return { preset: 'none' } as Stats;\n  }\n  return options;\n}\n\ninterface WriteStatsOptions {\n  filepath: string;\n  logger?: Logger;\n  rootDir: string;\n}\n\nexport async function writeStats(\n  stats: any,\n  { filepath, logger = console, rootDir }: WriteStatsOptions\n) {\n  const outputPath = normalizeFilepath(filepath, rootDir);\n  logger.info('Writing compiler stats');\n\n  // Stats can be fairly big at which point their JSON no longer fits into a single string.\n  // Approach was copied from `webpack-cli`: https://github.com/webpack/webpack-cli/blob/c03fb03d0aa73d21f16bd9263fd3109efaf0cd28/packages/webpack-cli/src/webpack-cli.ts#L2471-L2482\n  const statsStream = stringifyStream(stats);\n  ensureFilepathExists(outputPath);\n  const outputStream = fs.createWriteStream(outputPath);\n  await pipeline(statsStream, outputStream);\n\n  logger.info(`Wrote compiler stats to ${outputPath}`);\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,SAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,SAAA,GAAAF,OAAA;AACA,IAAAG,QAAA,GAAAH,OAAA;AAAwD,SAAAD,uBAAAK,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAGxD,SAASG,iBAAiBA,CAACC,QAAgB,EAAEC,IAAY,EAAU;EACjE,IAAIC,iBAAI,CAACC,UAAU,CAACH,QAAQ,CAAC,EAAE;IAC7B,OAAOA,QAAQ;EACjB;EACA,OAAOE,iBAAI,CAACE,OAAO,CAACH,IAAI,EAAED,QAAQ,CAAC;AACrC;AAEA,SAASK,oBAAoBA,CAACL,QAAgB,EAAE;EAC9CM,eAAE,CAACC,SAAS,CAACL,iBAAI,CAACM,OAAO,CAACR,QAAQ,CAAC,EAAE;IAAES,SAAS,EAAE;EAAK,CAAC,CAAC;AAC3D;AAEO,SAASC,qBAAqBA,CACnCC,OAAc,EACdC,MAAe,EACR;EACP,IAAIA,MAAM,KAAKC,SAAS,EAAE;IACxB,OAAO;MAAED,MAAM,EAAEA;IAAO,CAAC;EAC3B;EACA,IAAID,OAAO,KAAK,IAAI,EAAE;IACpB,OAAO;MAAEC,MAAM,EAAE;IAAS,CAAC;EAC7B;EACA,IAAID,OAAO,KAAK,KAAK,EAAE;IACrB,OAAO;MAAEC,MAAM,EAAE;IAAO,CAAC;EAC3B;EACA,OAAOD,OAAO;AAChB;AAQO,eAAeG,UAAUA,CAC9BC,KAAU,EACV;EAAEf,QAAQ;EAAEgB,MAAM,GAAGC,OAAO;EAAEC;AAA2B,CAAC,EAC1D;EACA,MAAMC,UAAU,GAAGpB,iBAAiB,CAACC,QAAQ,EAAEkB,OAAO,CAAC;EACvDF,MAAM,CAACI,IAAI,CAAC,wBAAwB,CAAC;;EAErC;EACA;EACA,MAAMC,WAAW,GAAG,IAAAC,wBAAe,EAACP,KAAK,CAAC;EAC1CV,oBAAoB,CAACc,UAAU,CAAC;EAChC,MAAMI,YAAY,GAAGjB,eAAE,CAACkB,iBAAiB,CAACL,UAAU,CAAC;EACrD,MAAM,IAAAM,kBAAQ,EAACJ,WAAW,EAAEE,YAAY,CAAC;EAEzCP,MAAM,CAACI,IAAI,CAAC,2BAA2BD,UAAU,EAAE,CAAC;AACtD","ignoreList":[]}