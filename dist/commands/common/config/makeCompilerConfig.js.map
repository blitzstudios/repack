{"version":3,"file":"makeCompilerConfig.js","names":["_webpackMerge","require","_getCliOverrides","_getCommandConfig","_getConfigFilePath","_getEnvOptions","_getRepackConfig","_loadProjectConfig","_normalizeConfig","_validatePlugins","makeCompilerConfig","options","args","bundler","command","rootDir","reactNativePath","configPath","getConfigFilePath","config","webpackConfig","env","getEnvOptions","cliConfigOverrides","getCliOverrides","commandConfig","getCommandConfig","repackConfig","getRepackConfig","rawConfig","loadProjectConfig","projectConfigs","Promise","all","platforms","map","platform","configs","merge","normalizedConfigs","index","normalizeConfig","plugins","flatMap","validatePlugins"],"sources":["../../../../src/commands/common/config/makeCompilerConfig.ts"],"sourcesContent":["import { merge } from 'webpack-merge';\nimport type {\n  BundleArguments,\n  ConfigurationObject,\n  StartArguments,\n} from '../../types.js';\nimport { getCliOverrides } from './getCliOverrides.js';\nimport { getCommandConfig } from './getCommandConfig.js';\nimport { getConfigFilePath } from './getConfigFilePath.js';\nimport { getEnvOptions } from './getEnvOptions.js';\nimport { getRepackConfig } from './getRepackConfig.js';\nimport { loadProjectConfig } from './loadProjectConfig.js';\nimport { normalizeConfig } from './normalizeConfig.js';\nimport { validatePlugins } from './validatePlugins.js';\n\ninterface MakeCompilerConfigOptions {\n  args: StartArguments | BundleArguments;\n  bundler: 'rspack' | 'webpack';\n  command: 'start' | 'bundle';\n  rootDir: string;\n  platforms: string[];\n  reactNativePath: string;\n}\n\nexport async function makeCompilerConfig<C extends ConfigurationObject>(\n  options: MakeCompilerConfigOptions\n): Promise<C[]> {\n  const { args, bundler, command, rootDir, reactNativePath } = options;\n  // discover location of project config\n  const configPath = getConfigFilePath(\n    bundler,\n    rootDir,\n    args.config ?? args.webpackConfig\n  );\n\n  // get env options for backwards compatibility with 4.X configs\n  // injected as first argument to config functions\n  const env = getEnvOptions({ args, command, rootDir, reactNativePath });\n\n  // get cli overrides which take precedence over values from config files\n  const cliConfigOverrides = getCliOverrides<C>({ args, command });\n  // get defaults for use with specific commands\n  const commandConfig = getCommandConfig(command, bundler);\n\n  // get defaults that will be applied on top of built-in ones (Rspack/webpack)\n  const repackConfig = getRepackConfig();\n\n  // load the project config\n  const rawConfig = await loadProjectConfig<C>(configPath);\n\n  // inject env and create platform-specific configs\n  const projectConfigs: C[] = await Promise.all(\n    options.platforms.map((platform) => {\n      // eval the config and inject the platform\n      if (typeof rawConfig === 'function') {\n        return rawConfig({ ...env, platform }, {});\n      }\n      // shallow copy to avoid mutating the original config\n      return { ...rawConfig };\n    })\n  );\n\n  // merge in reverse order to create final configs\n  const configs = projectConfigs.map((config) =>\n    merge([repackConfig, commandConfig, config, cliConfigOverrides])\n  );\n\n  // normalize the configs\n  const normalizedConfigs = configs.map((config, index) =>\n    normalizeConfig(config, options.platforms[index])\n  );\n\n  const plugins = normalizedConfigs.flatMap((config) =>\n    'plugins' in config ? config.plugins : []\n  );\n\n  await validatePlugins(rootDir, plugins, options.bundler);\n\n  return normalizedConfigs as C[];\n}\n"],"mappings":";;;;;;AAAA,IAAAA,aAAA,GAAAC,OAAA;AAMA,IAAAC,gBAAA,GAAAD,OAAA;AACA,IAAAE,iBAAA,GAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AACA,IAAAI,cAAA,GAAAJ,OAAA;AACA,IAAAK,gBAAA,GAAAL,OAAA;AACA,IAAAM,kBAAA,GAAAN,OAAA;AACA,IAAAO,gBAAA,GAAAP,OAAA;AACA,IAAAQ,gBAAA,GAAAR,OAAA;AAWO,eAAeS,kBAAkBA,CACtCC,OAAkC,EACpB;EACd,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,OAAO;IAAEC,OAAO;IAAEC;EAAgB,CAAC,GAAGL,OAAO;EACpE;EACA,MAAMM,UAAU,GAAG,IAAAC,oCAAiB,EAClCL,OAAO,EACPE,OAAO,EACPH,IAAI,CAACO,MAAM,IAAIP,IAAI,CAACQ,aACtB,CAAC;;EAED;EACA;EACA,MAAMC,GAAG,GAAG,IAAAC,4BAAa,EAAC;IAAEV,IAAI;IAAEE,OAAO;IAAEC,OAAO;IAAEC;EAAgB,CAAC,CAAC;;EAEtE;EACA,MAAMO,kBAAkB,GAAG,IAAAC,gCAAe,EAAI;IAAEZ,IAAI;IAAEE;EAAQ,CAAC,CAAC;EAChE;EACA,MAAMW,aAAa,GAAG,IAAAC,kCAAgB,EAACZ,OAAO,EAAED,OAAO,CAAC;;EAExD;EACA,MAAMc,YAAY,GAAG,IAAAC,gCAAe,EAAC,CAAC;;EAEtC;EACA,MAAMC,SAAS,GAAG,MAAM,IAAAC,oCAAiB,EAAIb,UAAU,CAAC;;EAExD;EACA,MAAMc,cAAmB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC3CtB,OAAO,CAACuB,SAAS,CAACC,GAAG,CAAEC,QAAQ,IAAK;IAClC;IACA,IAAI,OAAOP,SAAS,KAAK,UAAU,EAAE;MACnC,OAAOA,SAAS,CAAC;QAAE,GAAGR,GAAG;QAAEe;MAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C;IACA;IACA,OAAO;MAAE,GAAGP;IAAU,CAAC;EACzB,CAAC,CACH,CAAC;;EAED;EACA,MAAMQ,OAAO,GAAGN,cAAc,CAACI,GAAG,CAAEhB,MAAM,IACxC,IAAAmB,mBAAK,EAAC,CAACX,YAAY,EAAEF,aAAa,EAAEN,MAAM,EAAEI,kBAAkB,CAAC,CACjE,CAAC;;EAED;EACA,MAAMgB,iBAAiB,GAAGF,OAAO,CAACF,GAAG,CAAC,CAAChB,MAAM,EAAEqB,KAAK,KAClD,IAAAC,gCAAe,EAACtB,MAAM,EAAER,OAAO,CAACuB,SAAS,CAACM,KAAK,CAAC,CAClD,CAAC;EAED,MAAME,OAAO,GAAGH,iBAAiB,CAACI,OAAO,CAAExB,MAAM,IAC/C,SAAS,IAAIA,MAAM,GAAGA,MAAM,CAACuB,OAAO,GAAG,EACzC,CAAC;EAED,MAAM,IAAAE,gCAAe,EAAC7B,OAAO,EAAE2B,OAAO,EAAE/B,OAAO,CAACE,OAAO,CAAC;EAExD,OAAO0B,iBAAiB;AAC1B","ignoreList":[]}