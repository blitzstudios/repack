{"version":3,"file":"runAdbReverse.js","names":["_nodePath","_interopRequireDefault","require","_execa","e","__esModule","default","getAdbPath","androidHome","process","env","ANDROID_HOME","path","join","parseAdbError","error","errorMessage","message","includes","split","trim","executeAdbCommand","command","logger","adbPath","result","execa","debug","Error","waitForDevice","test","reversePort","port","device","getDevices","stdout","devices","slice","map","line","filter","Boolean","length","runAdbReverse","console","verbose","wait","info","warn"],"sources":["../../../src/commands/common/runAdbReverse.ts"],"sourcesContent":["import path from 'node:path';\nimport execa from 'execa';\nimport type { Logger } from '../../types.js';\n\ninterface RunAdbReverseParams {\n  logger?: Logger;\n  port: number;\n  verbose?: boolean;\n  wait?: boolean;\n}\n\nfunction getAdbPath() {\n  const androidHome = process.env.ANDROID_HOME;\n  return androidHome ? path.join(androidHome, 'platform-tools', 'adb') : 'adb';\n}\n\nfunction parseAdbError(error: unknown) {\n  const errorMessage = (error as Error).message;\n  const message = errorMessage.includes('error:')\n    ? errorMessage.split('error:')[1]\n    : errorMessage;\n  return message.trim();\n}\n\nasync function executeAdbCommand(command: string, logger: Logger) {\n  const adbPath = getAdbPath();\n  try {\n    const result = await execa.command(`${adbPath} ${command}`);\n    logger.debug(`[ADB] \"adb ${command}\" executed successfully.`);\n    return result;\n  } catch (error) {\n    const message = parseAdbError(error);\n    logger.debug(`[ADB] \"adb ${command}\" failed: \"${message}\"`);\n    throw new Error(message);\n  }\n}\n\nasync function waitForDevice(logger: Logger) {\n  try {\n    await executeAdbCommand('wait-for-device', logger);\n  } catch (error) {\n    const message = (error as Error).message;\n    // Ignore the error if there are multiple devices/emulators\n    // we only care about about at least 1 device being online\n    if (/more than one device\\/emulator/.test(message)) {\n      return;\n    }\n    throw error;\n  }\n}\n\nasync function reversePort(port: number, device: string, logger: Logger) {\n  await executeAdbCommand(\n    `-s ${device} reverse tcp:${port} tcp:${port}`,\n    logger\n  );\n}\n\nasync function getDevices(logger: Logger): Promise<string[]> {\n  const { stdout } = await executeAdbCommand('devices', logger);\n  const devices = stdout\n    .split('\\n')\n    .slice(1)\n    .map((line) => line.split('\\t')[0])\n    .filter(Boolean);\n  logger.debug(`[ADB] Found ${devices.length} devices/emulators.`);\n  return devices;\n}\n\n/**\n * Runs the adb reverse command to reverse the specified port on all available devices.\n * Performs the following steps:\n * 1. (Optional) Waits for the device to be available.\n * 2. Get a list of all connected devices.\n * 3. Attempts to reverse the specified port using adb for all devices.\n */\nexport async function runAdbReverse({\n  logger = console,\n  port,\n  verbose = false,\n  wait = false,\n}: RunAdbReverseParams) {\n  try {\n    if (wait) {\n      await waitForDevice(logger);\n    }\n    const devices = await getDevices(logger);\n    for (const device of devices) {\n      await reversePort(port, device, logger);\n    }\n    if (verbose) {\n      logger.info('[ADB] port reverse success');\n    }\n  } catch (error) {\n    const message = (error as Error).message;\n    if (verbose) {\n      logger.warn(`[ADB] port reverse failed: \"${message}\"`);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}