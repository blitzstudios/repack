{"version":3,"file":"CodeSigningPlugin.js","names":["_nodeCrypto","_interopRequireDefault","require","_nodeFs","_nodePath","_nodeUtil","_jsonwebtoken","_config","e","__esModule","default","CodeSigningPlugin","constructor","config","validateConfig","excludeChunks","chunkFilenames","Set","shouldSignFile","file","mainOutputFilename","excludedChunks","has","some","chunk","RegExp","test","apply","compiler","logger","getInfrastructureLogger","enabled","options","output","filename","Error","TOKEN_BUFFER_SIZE","BEGIN_CS_MARK","privateKeyPath","path","isAbsolute","resolve","context","privateKey","fs","readFileSync","Array","isArray","hooks","emit","tap","compilation","chunks","forEach","files","add","assetEmitted","tapPromise","name","stage","outputPath","content","mainBundleName","outputOptions","debug","hash","crypto","createHash","update","digest","token","jwt","sign","algorithm","signedBundle","Buffer","concat","from","length","writeFileAsync","util","promisify","outputFileSystem","writeFile","join","exports"],"sources":["../../../src/plugins/CodeSigningPlugin/CodeSigningPlugin.ts"],"sourcesContent":["import crypto from 'node:crypto';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport util from 'node:util';\nimport type { Compiler, RspackPluginInstance } from '@rspack/core';\nimport jwt from 'jsonwebtoken';\nimport { type CodeSigningPluginConfig, validateConfig } from './config.js';\n\nexport class CodeSigningPlugin implements RspackPluginInstance {\n  private chunkFilenames: Set<string>;\n\n  /**\n   * Constructs new `RepackPlugin`.\n   *\n   * @param config Plugin configuration options.\n   */\n  constructor(private config: CodeSigningPluginConfig) {\n    validateConfig(config);\n    this.config.excludeChunks = this.config.excludeChunks ?? [];\n    this.chunkFilenames = new Set();\n  }\n\n  private shouldSignFile(\n    file: string,\n    mainOutputFilename: string,\n    excludedChunks: string[] | RegExp[]\n  ): boolean {\n    /** Exclude non-chunks & main chunk as it's always local */\n    if (!this.chunkFilenames.has(file) || file === mainOutputFilename) {\n      return false;\n    }\n\n    return !excludedChunks.some((chunk) => {\n      if (chunk instanceof RegExp) {\n        return chunk.test(file);\n      }\n      return chunk === file;\n    });\n  }\n\n  /**\n   * Apply the plugin.\n   *\n   * @param compiler Webpack compiler instance.\n   */\n  apply(compiler: Compiler) {\n    const logger = compiler.getInfrastructureLogger('RepackCodeSigningPlugin');\n\n    if (this.config.enabled === false) {\n      return;\n    }\n\n    if (typeof compiler.options.output.filename === 'function') {\n      throw new Error(\n        '[RepackCodeSigningPlugin] Dynamic output filename is not supported. Please use static filename instead.'\n      );\n    }\n    /**\n     * Reserve 1280 bytes for the token even if it's smaller\n     * to leave some space for future additions to the JWT without breaking compatibility\n     */\n    const TOKEN_BUFFER_SIZE = 1280;\n    /**\n     * Used to denote beginning of the code-signing section of the bundle\n     * alias for \"Repack Code-Signing Signature Begin\"\n     */\n    const BEGIN_CS_MARK = '/* RCSSB */';\n\n    const privateKeyPath = path.isAbsolute(this.config.privateKeyPath)\n      ? this.config.privateKeyPath\n      : path.resolve(compiler.context, this.config.privateKeyPath);\n    const privateKey = fs.readFileSync(privateKeyPath);\n\n    const excludedChunks = Array.isArray(this.config.excludeChunks)\n      ? this.config.excludeChunks\n      : [this.config.excludeChunks as RegExp];\n\n    compiler.hooks.emit.tap('RepackCodeSigningPlugin', (compilation) => {\n      compilation.chunks.forEach((chunk) => {\n        chunk.files.forEach((file) => this.chunkFilenames.add(file));\n      });\n    });\n\n    compiler.hooks.assetEmitted.tapPromise(\n      { name: 'RepackCodeSigningPlugin', stage: 20 },\n      async (file, { outputPath, content, compilation }) => {\n        const mainBundleName = compilation.outputOptions.filename as string;\n        if (!this.shouldSignFile(file, mainBundleName, excludedChunks)) {\n          return;\n        }\n        logger.debug(`Signing ${file}`);\n        /** generate bundle hash */\n        const hash = crypto.createHash('sha256').update(content).digest('hex');\n        /** generate token */\n        const token = jwt.sign({ hash }, privateKey, { algorithm: 'RS256' });\n        /** combine the bundle and the token */\n        const signedBundle = Buffer.concat(\n          [content, Buffer.from(BEGIN_CS_MARK), Buffer.from(token)],\n          content.length + TOKEN_BUFFER_SIZE\n        );\n\n        const writeFileAsync = util.promisify(\n          compiler.outputFileSystem!.writeFile\n        );\n        await writeFileAsync(path.join(outputPath, file), signedBundle);\n        logger.debug(`Signed ${file}`);\n      }\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}