{"version":3,"file":"getHermesCLIPath.js","names":["_nodeOs","_interopRequireDefault","require","_nodePath","e","__esModule","default","getHermesOSBin","os","platform","getHermesCLIPath","reactNativePath","osBin","Error","path","join","exports"],"sources":["../../../../src/plugins/HermesBytecodePlugin/utils/getHermesCLIPath.ts"],"sourcesContent":["import os from 'node:os';\nimport path from 'node:path';\n\n/**\n * Folder name of the Hermes compiler binary for the current OS.\n */\nconst getHermesOSBin = (): string | null => {\n  switch (os.platform()) {\n    case 'darwin':\n      return 'osx-bin';\n    case 'linux':\n      return 'linux64-bin';\n    case 'win32':\n      return 'win64-bin';\n    default:\n      return null;\n  }\n};\n\n/**\n * Determines the path to the Hermes compiler binary.\n *\n * Defaults to './node_modules/react-native/sdks/hermesc/{os-bin}/hermesc'\n */\nexport const getHermesCLIPath = (reactNativePath: string): string => {\n  const osBin = getHermesOSBin();\n\n  if (!osBin) {\n    throw new Error(\n      '[RepackHermesBytecodePlugin] OS not recognized. ' +\n        'Please set hermesCLIPath to the path of a working Hermes compiler.'\n    );\n  }\n\n  return path.join(reactNativePath, 'sdks', 'hermesc', osBin, 'hermesc');\n};\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,SAAA,GAAAF,sBAAA,CAAAC,OAAA;AAA6B,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE7B;AACA;AACA;AACA,MAAMG,cAAc,GAAGA,CAAA,KAAqB;EAC1C,QAAQC,eAAE,CAACC,QAAQ,CAAC,CAAC;IACnB,KAAK,QAAQ;MACX,OAAO,SAAS;IAClB,KAAK,OAAO;MACV,OAAO,aAAa;IACtB,KAAK,OAAO;MACV,OAAO,WAAW;IACpB;MACE,OAAO,IAAI;EACf;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACO,MAAMC,gBAAgB,GAAIC,eAAuB,IAAa;EACnE,MAAMC,KAAK,GAAGL,cAAc,CAAC,CAAC;EAE9B,IAAI,CAACK,KAAK,EAAE;IACV,MAAM,IAAIC,KAAK,CACb,kDAAkD,GAChD,oEACJ,CAAC;EACH;EAEA,OAAOC,iBAAI,CAACC,IAAI,CAACJ,eAAe,EAAE,MAAM,EAAE,SAAS,EAAEC,KAAK,EAAE,SAAS,CAAC;AACxE,CAAC;AAACI,OAAA,CAAAN,gBAAA,GAAAA,gBAAA","ignoreList":[]}