{"version":3,"file":"compilerPlugin.js","names":["fastifyPlugin","compilerPlugin","instance","delegate","route","method","url","schema","querystring","type","properties","platform","handler","request","reply","console","log","filename","params","query","error","notFound","compiler","inferPlatform","badRequest","startsWith","replace","multipart","asMultipart","sendProgress","completed","total","writeChunk","JSON","stringify","done","asset","getAsset","mimeType","getMimeType","buffer","Buffer","isBuffer","from","setHeader","String","byteLength","header","headers","range","parts","split","start","parseInt","end","length","chunk","slice","code","send","message","name","dependencies"],"sources":["../../../src/plugins/compiler/compilerPlugin.ts"],"sourcesContent":["import type { FastifyInstance } from 'fastify';\nimport fastifyPlugin from 'fastify-plugin';\nimport type { Server } from '../../types';\nimport type { SendProgress } from '../../types';\n\nasync function compilerPlugin(\n  instance: FastifyInstance,\n  { delegate }: { delegate: Server.Delegate }\n) {\n  instance.route({\n    method: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD'],\n    url: '/*',\n    schema: {\n      querystring: {\n        type: 'object',\n        properties: {\n          platform: {\n            type: 'string',\n          },\n        },\n      },\n    },\n    handler: async (request, reply) => {\n      console.log('[CompilerPlugin] compile:', request?.url);\n      let filename = (request.params as { '*'?: string })['*'];\n      let { platform } = request.query as { platform?: string };\n\n      if (!filename) {\n        // This technically should never happen - this route should not be called if file is missing.\n        request.log.error('File was not provided');\n        return reply.notFound();\n      }\n\n      // Let consumer infer the platform. If function is not provided fallback\n      // to platform query param.\n      platform = delegate.compiler.inferPlatform?.(request.url) ?? platform;\n\n      if (!platform || (platform !== 'ios' && platform !== 'android')) {\n        request.log.error('Cannot detect platform');\n        return reply.badRequest('Cannot detect platform');\n      }\n\n      // If platform happens to be in front of an asset remove it.\n      if (filename.startsWith(`${platform}/`)) {\n        filename = filename.replace(`${platform}/`, '');\n      }\n\n      const multipart = reply.asMultipart();\n\n      const sendProgress: SendProgress = ({ completed, total }) => {\n        multipart?.writeChunk(\n          { 'Content-Type': 'application/json' },\n          JSON.stringify({\n            done: completed,\n            total,\n          })\n        );\n      };\n\n      try {\n        const asset = await delegate.compiler.getAsset(\n          filename,\n          platform,\n          sendProgress\n        );\n        const mimeType = delegate.compiler.getMimeType(\n          filename,\n          platform,\n          asset\n        );\n        const buffer = Buffer.isBuffer(asset) ? asset : Buffer.from(asset);\n\n        if (multipart) {\n          multipart.setHeader('Content-Type', `${mimeType}; charset=UTF-8`);\n          multipart.setHeader(\n            'Content-Length',\n            String(Buffer.byteLength(buffer))\n          );\n        } else {\n          reply.header('Content-Type', `${mimeType}; charset=UTF-8`);\n          reply.header('Content-Length', String(Buffer.byteLength(buffer)));\n        }\n\n        if (request.headers.range) {\n          // Parse the range header to get the start and end bytes\n          const parts = request.headers.range.replace(/bytes=/, '').split('-');\n          const start = parseInt(parts[0], 10);\n          const end = parts[1] ? parseInt(parts[1], 10) : buffer.length - 1;\n\n          // Create a new buffer that only includes the part of the file requested\n          const chunk = buffer.slice(start, end + 1);\n\n          // Set the necessary headers\n          reply.header(\n            'Content-Range',\n            `bytes ${start}-${end}/${buffer.length}`\n          );\n          reply.header('Accept-Ranges', 'bytes');\n\n          if (multipart) {\n            multipart.setHeader('Content-Length', String(chunk.length));\n            multipart.end(chunk);\n          } else {\n            // Send the chunk with a 206 status code\n            return reply.code(206).send(chunk);\n          }\n        } else {\n          // If no range header is present, send the whole file like before\n          if (multipart) {\n            multipart.end(buffer);\n          } else {\n            return reply.code(200).send(asset);\n          }\n        }\n      } catch (error) {\n        request.log.error(error);\n        return reply.notFound((error as Error).message);\n      }\n    },\n  });\n}\n\nexport default fastifyPlugin(compilerPlugin, {\n  name: 'compiler-plugin',\n  dependencies: ['@fastify/sensible', 'multipart-plugin'],\n});\n"],"mappings":"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","ignoreList":[]}