{"version":3,"file":"NativeEntryPlugin.js","names":["_nodePath","_interopRequireDefault","require","e","__esModule","default","NativeEntryPlugin","constructor","config","getReactNativePath","candidate","reactNativePath","candidates","filter","Boolean","resolve","path","extname","dirname","apply","compiler","options","alias","getReactNativePolyfills","join","initializeCorePath","initializeCoreLocation","entries","concat","entry","webpack","EntryPlugin","context","name","undefined","exports"],"sources":["../../src/plugins/NativeEntryPlugin.ts"],"sourcesContent":["import path from 'node:path';\nimport type {\n  Compiler,\n  ResolveAlias,\n  RspackPluginInstance,\n} from '@rspack/core';\n\nexport interface NativeEntryPluginConfig {\n  /**\n   * Name of the chunk that is the first to load on the device.\n   */\n  entryName: string;\n  /**\n   * Absolute location to JS file with initialization logic for React Native.\n   * Useful if you want to built for out-of-tree platforms.\n   */\n  initializeCoreLocation?: string;\n}\n\nexport class NativeEntryPlugin implements RspackPluginInstance {\n  constructor(private config?: NativeEntryPluginConfig) {}\n  private getReactNativePath(candidate: ResolveAlias[string] | undefined) {\n    let reactNativePath: string | undefined;\n    if (typeof candidate === 'string') {\n      reactNativePath = candidate;\n    }\n    if (typeof candidate === 'object') {\n      const candidates = candidate.filter(Boolean) as string[];\n      reactNativePath = candidates[0];\n    }\n    if (!reactNativePath) {\n      reactNativePath = require.resolve('react-native');\n    }\n\n    return path.extname(reactNativePath)\n      ? path.dirname(reactNativePath)\n      : reactNativePath;\n  }\n\n  apply(compiler: Compiler) {\n    const reactNativePath = this.getReactNativePath(\n      compiler.options.resolve.alias?.['react-native']\n    );\n\n    const getReactNativePolyfills: () => string[] = require(\n      path.join(reactNativePath, 'rn-get-polyfills.js')\n    );\n\n    const initializeCorePath =\n      this.config?.initializeCoreLocation ??\n      path.join(reactNativePath, 'Libraries/Core/InitializeCore.js');\n\n    const entries = getReactNativePolyfills().concat(initializeCorePath);\n\n    // Add React-Native entries\n    for (const entry of entries) {\n      new compiler.webpack.EntryPlugin(compiler.context, entry, {\n        name: undefined,\n      }).apply(compiler);\n    }\n\n    // Initialize ScriptManager\n    new compiler.webpack.EntryPlugin(\n      compiler.context,\n      require.resolve('../modules/InitializeScriptManager'),\n      { name: undefined }\n    ).apply(compiler);\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,SAAA,GAAAC,sBAAA,CAAAC,OAAA;AAA6B,SAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAmBtB,MAAMG,iBAAiB,CAAiC;EAC7DC,WAAWA,CAASC,MAAgC,EAAE;IAAA,KAAlCA,MAAgC,GAAhCA,MAAgC;EAAG;EAC/CC,kBAAkBA,CAACC,SAA2C,EAAE;IACtE,IAAIC,eAAmC;IACvC,IAAI,OAAOD,SAAS,KAAK,QAAQ,EAAE;MACjCC,eAAe,GAAGD,SAAS;IAC7B;IACA,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;MACjC,MAAME,UAAU,GAAGF,SAAS,CAACG,MAAM,CAACC,OAAO,CAAa;MACxDH,eAAe,GAAGC,UAAU,CAAC,CAAC,CAAC;IACjC;IACA,IAAI,CAACD,eAAe,EAAE;MACpBA,eAAe,GAAGT,OAAO,CAACa,OAAO,CAAC,cAAc,CAAC;IACnD;IAEA,OAAOC,iBAAI,CAACC,OAAO,CAACN,eAAe,CAAC,GAChCK,iBAAI,CAACE,OAAO,CAACP,eAAe,CAAC,GAC7BA,eAAe;EACrB;EAEAQ,KAAKA,CAACC,QAAkB,EAAE;IACxB,MAAMT,eAAe,GAAG,IAAI,CAACF,kBAAkB,CAC7CW,QAAQ,CAACC,OAAO,CAACN,OAAO,CAACO,KAAK,GAAG,cAAc,CACjD,CAAC;IAED,MAAMC,uBAAuC,GAAGrB,OAAO,CACrDc,iBAAI,CAACQ,IAAI,CAACb,eAAe,EAAE,qBAAqB,CAClD,CAAC;IAED,MAAMc,kBAAkB,GACtB,IAAI,CAACjB,MAAM,EAAEkB,sBAAsB,IACnCV,iBAAI,CAACQ,IAAI,CAACb,eAAe,EAAE,kCAAkC,CAAC;IAEhE,MAAMgB,OAAO,GAAGJ,uBAAuB,CAAC,CAAC,CAACK,MAAM,CAACH,kBAAkB,CAAC;;IAEpE;IACA,KAAK,MAAMI,KAAK,IAAIF,OAAO,EAAE;MAC3B,IAAIP,QAAQ,CAACU,OAAO,CAACC,WAAW,CAACX,QAAQ,CAACY,OAAO,EAAEH,KAAK,EAAE;QACxDI,IAAI,EAAEC;MACR,CAAC,CAAC,CAACf,KAAK,CAACC,QAAQ,CAAC;IACpB;;IAEA;IACA,IAAIA,QAAQ,CAACU,OAAO,CAACC,WAAW,CAC9BX,QAAQ,CAACY,OAAO,EAChB9B,OAAO,CAACa,OAAO,CAAC,oCAAoC,CAAC,EACrD;MAAEkB,IAAI,EAAEC;IAAU,CACpB,CAAC,CAACf,KAAK,CAACC,QAAQ,CAAC;EACnB;AACF;AAACe,OAAA,CAAA7B,iBAAA,GAAAA,iBAAA","ignoreList":[]}