{"version":3,"file":"sybmolicatePlugin.js","names":["path","fastifyPlugin","Symbolicator","symbolicatePlugin","instance","delegate","symbolicator","post","request","reply","stack","JSON","parse","body","platform","query","i","length","bundle","file","base","log","debug","msg","badRequest","results","process","send","error","message","name","dependencies"],"sources":["../../../src/plugins/symbolicate/sybmolicatePlugin.ts"],"sourcesContent":["import path from 'path';\nimport type { FastifyInstance } from 'fastify';\nimport fastifyPlugin from 'fastify-plugin';\nimport type { Server } from '../../types';\nimport { Symbolicator } from './Symbolicator';\nimport type { ReactNativeStackFrame } from './types';\n\nasync function symbolicatePlugin(\n  instance: FastifyInstance,\n  {\n    delegate,\n  }: {\n    delegate: Server.Delegate;\n  }\n) {\n  const symbolicator = new Symbolicator(delegate.symbolicator);\n\n  instance.post('/symbolicate', async (request, reply) => {\n    // React Native sends stack as JSON but tests content-type to text/plain, so\n    // we cannot use JSON schema to validate the body.\n\n    try {\n      let { stack } = JSON.parse(request.body as string) as {\n        stack: ReactNativeStackFrame[];\n      };\n\n      const platform = (request.query as { platform?: string } | undefined)?.platform;\n\n      for (let i = 0; i < stack.length; i++) {\n        let bundle = path.parse(stack[i].file as string).base;\n        stack[i].file = `http://localhost:8081/${bundle}?platform=${platform}`;\n      }\n\n      if (!platform) {\n        request.log.debug({ msg: 'Received stack', stack });\n        reply.badRequest('Cannot infer platform from stack trace');\n      } else {\n        request.log.debug({ msg: 'Starting symbolication', platform, stack });\n        const results = await symbolicator.process(request.log, stack);\n        reply.send(results);\n      }\n    } catch (error) {\n      request.log.error({\n        msg: 'Failed to symbolicate',\n        error: (error as Error).message,\n      });\n      reply.badRequest('Failed to symbolicate');\n    }\n  });\n}\n\nexport default fastifyPlugin(symbolicatePlugin, {\n  name: 'symbolicate-plugin',\n  dependencies: ['fastify-sensible'],\n});\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;SAESC,Y;;AAGT,eAAeC,iBAAf,CACEC,QADF,EAEE;EACEC;AADF,CAFF,EAOE;EACA,MAAMC,YAAY,GAAG,IAAIJ,YAAJ,CAAiBG,QAAQ,CAACC,YAA1B,CAArB;EAEAF,QAAQ,CAACG,IAAT,CAAc,cAAd,EAA8B,OAAOC,OAAP,EAAgBC,KAAhB,KAA0B;IACtD;IACA;IAEA,IAAI;MAAA;;MACF,IAAI;QAAEC;MAAF,IAAYC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACK,IAAnB,CAAhB;MAIA,MAAMC,QAAQ,qBAAIN,OAAO,CAACO,KAAZ,mDAAG,eAAsDD,QAAvE;;MAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;QACrC,IAAIE,MAAM,GAAGlB,IAAI,CAACY,KAAL,CAAWF,KAAK,CAACM,CAAD,CAAL,CAASG,IAApB,EAAoCC,IAAjD;QACAV,KAAK,CAACM,CAAD,CAAL,CAASG,IAAT,GAAiB,yBAAwBD,MAAO,aAAYJ,QAAS,EAArE;MACD;;MAED,IAAI,CAACA,QAAL,EAAe;QACbN,OAAO,CAACa,GAAR,CAAYC,KAAZ,CAAkB;UAAEC,GAAG,EAAE,gBAAP;UAAyBb;QAAzB,CAAlB;QACAD,KAAK,CAACe,UAAN,CAAiB,wCAAjB;MACD,CAHD,MAGO;QACLhB,OAAO,CAACa,GAAR,CAAYC,KAAZ,CAAkB;UAAEC,GAAG,EAAE,wBAAP;UAAiCT,QAAjC;UAA2CJ;QAA3C,CAAlB;QACA,MAAMe,OAAO,GAAG,MAAMnB,YAAY,CAACoB,OAAb,CAAqBlB,OAAO,CAACa,GAA7B,EAAkCX,KAAlC,CAAtB;QACAD,KAAK,CAACkB,IAAN,CAAWF,OAAX;MACD;IACF,CApBD,CAoBE,OAAOG,KAAP,EAAc;MACdpB,OAAO,CAACa,GAAR,CAAYO,KAAZ,CAAkB;QAChBL,GAAG,EAAE,uBADW;QAEhBK,KAAK,EAAGA,KAAD,CAAiBC;MAFR,CAAlB;MAIApB,KAAK,CAACe,UAAN,CAAiB,uBAAjB;IACD;EACF,CA/BD;AAgCD;;AAED,eAAevB,aAAa,CAACE,iBAAD,EAAoB;EAC9C2B,IAAI,EAAE,oBADwC;EAE9CC,YAAY,EAAE,CAAC,kBAAD;AAFgC,CAApB,CAA5B"}