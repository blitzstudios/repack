{"version":3,"file":"sybmolicatePlugin.js","names":["path","fastifyPlugin","Symbolicator","symbolicatePlugin","instance","delegate","symbolicator","post","request","reply","stack","JSON","parse","body","platform","query","i","length","file","bundle","base","startsWith","log","debug","msg","badRequest","results","process","send","error","message","name","dependencies"],"sources":["../../../src/plugins/symbolicate/sybmolicatePlugin.ts"],"sourcesContent":["import path from 'path';\nimport type { FastifyInstance } from 'fastify';\nimport fastifyPlugin from 'fastify-plugin';\nimport type { Server } from '../../types';\nimport { Symbolicator } from './Symbolicator';\nimport type { ReactNativeStackFrame } from './types';\n\nasync function symbolicatePlugin(\n  instance: FastifyInstance,\n  {\n    delegate,\n  }: {\n    delegate: Server.Delegate;\n  }\n) {\n  const symbolicator = new Symbolicator(delegate.symbolicator);\n\n  instance.post('/symbolicate', async (request, reply) => {\n    // React Native sends stack as JSON but tests content-type to text/plain, so\n    // we cannot use JSON schema to validate the body.\n\n    try {\n      let { stack } = JSON.parse(request.body as string) as {\n        stack: ReactNativeStackFrame[];\n      };\n\n      const platform = (request.query as { platform?: string } | undefined)\n        ?.platform;\n\n      for (let i = 0; i < stack.length; i++) {\n        let file = stack[i].file as string;\n        let bundle = path.parse(file).base;\n\n        // When running in visual studio code, our bundle is copied to a local location:\n        // clients/app-mobile/.vscode/.react/index.bundle.\n        // In order to parse source maps we need to point to localhost instead.\n        if (file.startsWith('http://')) {\n          break;\n        }\n\n        if (bundle === '<anonymous>') {\n          break;\n        }\n\n        stack[i].file = `http://localhost:8081/${bundle}?platform=${platform}`;\n      }\n\n      if (!platform) {\n        request.log.debug({ msg: 'Received stack', stack });\n        reply.badRequest('Cannot infer platform from stack trace');\n      } else {\n        request.log.debug({ msg: 'Starting symbolication', platform, stack });\n        const results = await symbolicator.process(request.log, stack);\n        reply.send(results);\n      }\n    } catch (error) {\n      request.log.error({\n        msg: 'Failed to symbolicate',\n        error: (error as Error).message,\n      });\n      reply.badRequest('Failed to symbolicate');\n    }\n  });\n}\n\nexport default fastifyPlugin(symbolicatePlugin, {\n  name: 'symbolicate-plugin',\n  dependencies: ['@fastify/sensible'],\n});\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AAEvB,OAAOC,aAAa,MAAM,gBAAgB;AAAC,SAElCC,YAAY;AAGrB,eAAeC,iBAAiBA,CAC9BC,QAAyB,EACzB;EACEC;AAGF,CAAC,EACD;EACA,MAAMC,YAAY,GAAG,IAAIJ,YAAY,CAACG,QAAQ,CAACC,YAAY,CAAC;EAE5DF,QAAQ,CAACG,IAAI,CAAC,cAAc,EAAE,OAAOC,OAAO,EAAEC,KAAK,KAAK;IACtD;IACA;;IAEA,IAAI;MACF,IAAI;QAAEC;MAAM,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACK,IAAc,CAEhD;MAED,MAAMC,QAAQ,GAAIN,OAAO,CAACO,KAAK,EAC3BD,QAAQ;MAEZ,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;QACrC,IAAIE,IAAI,GAAGR,KAAK,CAACM,CAAC,CAAC,CAACE,IAAc;QAClC,IAAIC,MAAM,GAAGnB,IAAI,CAACY,KAAK,CAACM,IAAI,CAAC,CAACE,IAAI;;QAElC;QACA;QACA;QACA,IAAIF,IAAI,CAACG,UAAU,CAAC,SAAS,CAAC,EAAE;UAC9B;QACF;QAEA,IAAIF,MAAM,KAAK,aAAa,EAAE;UAC5B;QACF;QAEAT,KAAK,CAACM,CAAC,CAAC,CAACE,IAAI,GAAG,yBAAyBC,MAAM,aAAaL,QAAQ,EAAE;MACxE;MAEA,IAAI,CAACA,QAAQ,EAAE;QACbN,OAAO,CAACc,GAAG,CAACC,KAAK,CAAC;UAAEC,GAAG,EAAE,gBAAgB;UAAEd;QAAM,CAAC,CAAC;QACnDD,KAAK,CAACgB,UAAU,CAAC,wCAAwC,CAAC;MAC5D,CAAC,MAAM;QACLjB,OAAO,CAACc,GAAG,CAACC,KAAK,CAAC;UAAEC,GAAG,EAAE,wBAAwB;UAAEV,QAAQ;UAAEJ;QAAM,CAAC,CAAC;QACrE,MAAMgB,OAAO,GAAG,MAAMpB,YAAY,CAACqB,OAAO,CAACnB,OAAO,CAACc,GAAG,EAAEZ,KAAK,CAAC;QAC9DD,KAAK,CAACmB,IAAI,CAACF,OAAO,CAAC;MACrB;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdrB,OAAO,CAACc,GAAG,CAACO,KAAK,CAAC;QAChBL,GAAG,EAAE,uBAAuB;QAC5BK,KAAK,EAAGA,KAAK,CAAWC;MAC1B,CAAC,CAAC;MACFrB,KAAK,CAACgB,UAAU,CAAC,uBAAuB,CAAC;IAC3C;EACF,CAAC,CAAC;AACJ;AAEA,eAAexB,aAAa,CAACE,iBAAiB,EAAE;EAC9C4B,IAAI,EAAE,oBAAoB;EAC1BC,YAAY,EAAE,CAAC,mBAAmB;AACpC,CAAC,CAAC","ignoreList":[]}