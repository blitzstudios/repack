{"version":3,"file":"Symbolicator.js","names":["URL","codeFrameColumns","SourceMapConsumer","Symbolicator","inferPlatformFromStack","stack","frame","file","searchParams","pathname","platform","get","bundleFilename","split","reverse","platformOrExtension","extension","sourceMapConsumerCache","constructor","delegate","process","logger","debug","msg","frames","startsWith","push","processedFrames","fileUrl","rawSourceMap","getSourceMap","sourceMapLength","length","sourceMapConsumer","toString","processedFrame","processFrame","codeFrame","getCodeFrame","key","destroy","lineNumber","column","collapse","consumer","lookup","originalPositionFor","line","bias","LEAST_UPPER_BOUND","source","methodName","name","shouldIncludeFrame","undefined","content","getSource","start","forceColor","location","row","fileName","error","message"],"sources":["../../../src/plugins/symbolicate/Symbolicator.ts"],"sourcesContent":["import { URL } from 'node:url';\nimport { codeFrameColumns } from '@babel/code-frame';\nimport type { FastifyLoggerInstance } from 'fastify';\nimport { SourceMapConsumer } from 'source-map';\nimport type {\n  CodeFrame,\n  InputStackFrame,\n  ReactNativeStackFrame,\n  StackFrame,\n  SymbolicatorDelegate,\n  SymbolicatorResults,\n} from './types';\n\n/**\n * Class for transforming stack traces from React Native application with using Source Map.\n * Raw stack frames produced by React Native, points to some location from the bundle\n * eg `index.bundle?platform=ios:567:1234`. By using Source Map for that bundle `Symbolicator`\n * produces frames that point to source code inside your project eg `Hello.tsx:10:9`.\n */\nexport class Symbolicator {\n  /**\n   * Infer platform from stack frames.\n   * Usually at least one frame has `file` field with the bundle URL eg:\n   * `http://localhost:8081/index.bundle?platform=ios&...`, which can be used to infer platform.\n   *\n   * @param stack Array of stack frames.\n   * @returns Inferred platform or `undefined` if cannot infer.\n   */\n  static inferPlatformFromStack(stack: ReactNativeStackFrame[]) {\n    for (const frame of stack) {\n      if (!frame.file) {\n        continue;\n      }\n\n      const { searchParams, pathname } = new URL(frame.file, 'file://');\n      const platform = searchParams.get('platform');\n      if (platform) {\n        return platform;\n      }\n      const [bundleFilename] = pathname.split('/').reverse();\n      const [, platformOrExtension, extension] = bundleFilename.split('.');\n      if (extension) {\n        return platformOrExtension;\n      }\n    }\n  }\n\n  /**\n   * Cache with initialized `SourceMapConsumer` to improve symbolication performance.\n   */\n  sourceMapConsumerCache: Record<string, SourceMapConsumer> = {};\n\n  /**\n   * Constructs new `Symbolicator` instance.\n   *\n   * @param delegate Delegate instance with symbolication functions.\n   */\n  constructor(private delegate: SymbolicatorDelegate) {}\n\n  /**\n   * Process raw React Native stack frames and transform them using Source Maps.\n   * Method will try to symbolicate as much data as possible, but if the Source Maps\n   * are not available, invalid or the original positions/data is not found in Source Maps,\n   * the method will return raw values - the same as supplied with `stack` parameter.\n   * For example out of 10 frames, it's possible that only first 7 will be symbolicated and the\n   * remaining 3 will be unchanged.\n   *\n   * @param logger Fastify logger instance.\n   * @param stack Raw stack frames.\n   * @returns Symbolicated stack frames.\n   */\n  async process(\n    logger: FastifyLoggerInstance,\n    stack: ReactNativeStackFrame[]\n  ): Promise<SymbolicatorResults> {\n    logger.debug({ msg: 'Filtering out unnecessary frames' });\n\n    const frames: InputStackFrame[] = [];\n    for (const frame of stack) {\n      const { file } = frame;\n      if (file?.startsWith('http')) {\n        frames.push(frame as InputStackFrame);\n      }\n    }\n\n    try {\n      logger.debug({ msg: 'Processing frames', frames });\n\n      const processedFrames: StackFrame[] = [];\n      for (const frame of frames) {\n        if (!this.sourceMapConsumerCache[frame.file]) {\n          logger.debug({\n            msg: 'Loading raw source map data',\n            fileUrl: frame.file,\n          });\n\n          const rawSourceMap = await this.delegate.getSourceMap(frame.file);\n\n          logger.debug({\n            msg: 'Creating source map instance',\n            fileUrl: frame.file,\n            sourceMapLength: rawSourceMap.length,\n          });\n          const sourceMapConsumer = await new SourceMapConsumer(\n            rawSourceMap.toString()\n          );\n\n          logger.debug({\n            msg: 'Saving source map instance into cache',\n            fileUrl: frame.file,\n          });\n          this.sourceMapConsumerCache[frame.file] = sourceMapConsumer;\n        }\n\n        logger.debug({\n          msg: 'Symbolicating frame',\n          frame,\n        });\n        const processedFrame = this.processFrame(frame);\n\n        logger.debug({\n          msg: 'Finished symbolicating frame',\n          frame,\n        });\n        processedFrames.push(processedFrame);\n      }\n\n      const codeFrame =\n        (await this.getCodeFrame(logger, processedFrames)) ?? null;\n\n      logger.debug({\n        msg: 'Finished symbolicating frames',\n        processedFrames,\n        codeFrame,\n      });\n\n      return {\n        stack: processedFrames,\n        codeFrame,\n      };\n    } finally {\n      for (const key in this.sourceMapConsumerCache) {\n        this.sourceMapConsumerCache[key].destroy();\n        delete this.sourceMapConsumerCache[key];\n      }\n    }\n  }\n\n  private processFrame(frame: InputStackFrame): StackFrame {\n    if (!frame.lineNumber || !frame.column) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const consumer = this.sourceMapConsumerCache[frame.file];\n    if (!consumer) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const lookup = consumer.originalPositionFor({\n      line: frame.lineNumber,\n      column: frame.column,\n      bias: SourceMapConsumer.LEAST_UPPER_BOUND,\n    });\n\n    // If lookup fails, we get the same shape object, but with\n    // all values set to null\n    if (!lookup.source) {\n      // It is better to gracefully return the original frame\n      // than to throw an exception\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    return {\n      lineNumber: lookup.line || frame.lineNumber,\n      column: lookup.column || frame.column,\n      file: lookup.source,\n      methodName: lookup.name || frame.methodName,\n      collapse: false,\n    };\n  }\n\n  private async getCodeFrame(\n    logger: FastifyLoggerInstance,\n    processedFrames: StackFrame[]\n  ): Promise<CodeFrame | undefined> {\n    for (const frame of processedFrames) {\n      if (frame.collapse || !frame.lineNumber || !frame.column) {\n        continue;\n      }\n\n      if (!this.delegate.shouldIncludeFrame(frame)) {\n        return undefined;\n      }\n\n      logger.debug({\n        msg: 'Generating code frame',\n        frame,\n      });\n\n      try {\n        return {\n          content: codeFrameColumns(\n            (await this.delegate.getSource(frame.file)).toString(),\n            {\n              start: { column: frame.column, line: frame.lineNumber },\n            },\n            { forceColor: true }\n          ),\n          location: {\n            row: frame.lineNumber,\n            column: frame.column,\n          },\n          fileName: frame.file,\n        };\n      } catch (error) {\n        logger.error({\n          msg: 'Failed to create code frame',\n          error: (error as Error).message,\n        });\n      }\n\n      return undefined;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}