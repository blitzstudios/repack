{"version":3,"file":"options.js","names":["_schemaUtils","require","optionsSchema","exports","type","required","properties","platform","scalableAssetExtensions","scalableAssetResolutions","inline","devServerEnabled","publicPath","remote","enabled","assetPath","instanceOf","pattern","getOptions","loaderContext","options","validate","name"],"sources":["../../../src/loaders/assetsLoader/options.ts"],"sourcesContent":["import type { LoaderContext } from '@rspack/core';\nimport { validate } from 'schema-utils';\n\n/**\n * Note: devServer enabled can be inferred from loader context:\n *       - we can access this.mode & this.hot\n * Note: publicPath could be obtained from webpack config in the future\n */\nexport interface AssetLoaderOptions {\n  platform: string;\n  scalableAssetExtensions?: string[];\n  scalableAssetResolutions?: string[];\n  devServerEnabled?: boolean;\n  inline?: boolean;\n  publicPath?: string;\n  remote?: {\n    enabled: boolean;\n    assetPath?: (args: {\n      resourcePath: string;\n      resourceFilename: string;\n      resourceDirname: string;\n      resourceExtensionType: string;\n    }) => string;\n    publicPath: string;\n  };\n}\n\nexport interface AssetLoaderContext extends LoaderContext<AssetLoaderOptions> {}\n\ntype Schema = Parameters<typeof validate>[0];\n\nexport const optionsSchema: Schema = {\n  type: 'object',\n  required: ['platform'],\n  properties: {\n    platform: {\n      type: 'string',\n    },\n    scalableAssetExtensions: {\n      type: 'array',\n    },\n    scalableAssetResolutions: {\n      type: 'array',\n    },\n    inline: { type: 'boolean' },\n    devServerEnabled: { type: 'boolean' },\n    publicPath: { type: 'string' },\n    remote: {\n      type: 'object',\n      required: ['enabled', 'publicPath'],\n      properties: {\n        enabled: { type: 'boolean' },\n        assetPath: { instanceOf: 'Function' },\n        publicPath: { type: 'string', pattern: '^https?://' },\n      },\n    },\n  },\n};\n\nexport function getOptions(\n  loaderContext: LoaderContext<AssetLoaderOptions>\n): AssetLoaderOptions {\n  const options = loaderContext.getOptions() || {};\n\n  validate(optionsSchema, options, { name: 'repackAssetsLoader' });\n\n  return options;\n}\n"],"mappings":";;;;;;;AACA,IAAAA,YAAA,GAAAC,OAAA;AAEA;AACA;AACA;AACA;AACA;;AAwBO,MAAMC,aAAqB,GAAAC,OAAA,CAAAD,aAAA,GAAG;EACnCE,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE,CAAC,UAAU,CAAC;EACtBC,UAAU,EAAE;IACVC,QAAQ,EAAE;MACRH,IAAI,EAAE;IACR,CAAC;IACDI,uBAAuB,EAAE;MACvBJ,IAAI,EAAE;IACR,CAAC;IACDK,wBAAwB,EAAE;MACxBL,IAAI,EAAE;IACR,CAAC;IACDM,MAAM,EAAE;MAAEN,IAAI,EAAE;IAAU,CAAC;IAC3BO,gBAAgB,EAAE;MAAEP,IAAI,EAAE;IAAU,CAAC;IACrCQ,UAAU,EAAE;MAAER,IAAI,EAAE;IAAS,CAAC;IAC9BS,MAAM,EAAE;MACNT,IAAI,EAAE,QAAQ;MACdC,QAAQ,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;MACnCC,UAAU,EAAE;QACVQ,OAAO,EAAE;UAAEV,IAAI,EAAE;QAAU,CAAC;QAC5BW,SAAS,EAAE;UAAEC,UAAU,EAAE;QAAW,CAAC;QACrCJ,UAAU,EAAE;UAAER,IAAI,EAAE,QAAQ;UAAEa,OAAO,EAAE;QAAa;MACtD;IACF;EACF;AACF,CAAC;AAEM,SAASC,UAAUA,CACxBC,aAAgD,EAC5B;EACpB,MAAMC,OAAO,GAAGD,aAAa,CAACD,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;EAEhD,IAAAG,qBAAQ,EAACnB,aAAa,EAAEkB,OAAO,EAAE;IAAEE,IAAI,EAAE;EAAqB,CAAC,CAAC;EAEhE,OAAOF,OAAO;AAChB","ignoreList":[]}