{"version":3,"file":"inlineAssets.js","names":["_dedent","_interopRequireDefault","require","_mimeTypes","e","__esModule","default","inlineAssets","assets","resourcePath","mimeType","mimeTypes","lookup","undefined","Error","sourceSet","reduce","sources","data","dimensions","scale","uri","toString","width","height","scales","JSON","stringify","Object","keys","map","Number","dedent"],"sources":["../../../src/loaders/assetsLoader/inlineAssets.ts"],"sourcesContent":["import dedent from 'dedent';\nimport mimeTypes from 'mime-types';\nimport type { Asset, URISource } from './types.js';\n\nexport function inlineAssets({\n  assets,\n  resourcePath,\n}: {\n  assets: Asset[];\n  resourcePath: string;\n}) {\n  const mimeType = mimeTypes.lookup(resourcePath) || undefined;\n\n  if (!mimeType) {\n    throw new Error(\n      `Cannot inline asset for request ${resourcePath} - unable to detect MIME type`\n    );\n  }\n\n  // keys are always converted to strings\n  const sourceSet = assets.reduce(\n    (sources, { data, dimensions, scale }) => {\n      sources[scale] = {\n        uri: `data:${mimeType};base64,${data.toString('base64')}`,\n        width: dimensions?.width,\n        height: dimensions?.height,\n        scale: scale,\n      };\n      return sources;\n    },\n    {} as Record<string, URISource>\n  );\n\n  const scales = JSON.stringify(Object.keys(sourceSet).map(Number));\n\n  /**\n   * To enable scale resolution in runtime we need to import PixelRatio & AssetSourceResolver\n   * Although we could use AssetSourceResolver as it is, we need to import PixelRatio to remain\n   * compatible with older versions of React-Native. Newer versions of React-Native use\n   * ESM for PixelRatio, so we need to check if PixelRatio is an ESM module and if so, adjust the import.\n   */\n  return dedent`\n    var PixelRatio = require('react-native/Libraries/Utilities/PixelRatio');\n    var AssetSourceResolver = require('react-native/Libraries/Image/AssetSourceResolver');\n\n    if (PixelRatio.__esModule) PixelRatio = PixelRatio.default;\n    var prefferedScale = AssetSourceResolver.pickScale(${scales}, PixelRatio.get());\n\n    module.exports = ${JSON.stringify(sourceSet)}[prefferedScale];\n  `;\n}\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAmC,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAG5B,SAASG,YAAYA,CAAC;EAC3BC,MAAM;EACNC;AAIF,CAAC,EAAE;EACD,MAAMC,QAAQ,GAAGC,kBAAS,CAACC,MAAM,CAACH,YAAY,CAAC,IAAII,SAAS;EAE5D,IAAI,CAACH,QAAQ,EAAE;IACb,MAAM,IAAII,KAAK,CACb,mCAAmCL,YAAY,+BACjD,CAAC;EACH;;EAEA;EACA,MAAMM,SAAS,GAAGP,MAAM,CAACQ,MAAM,CAC7B,CAACC,OAAO,EAAE;IAAEC,IAAI;IAAEC,UAAU;IAAEC;EAAM,CAAC,KAAK;IACxCH,OAAO,CAACG,KAAK,CAAC,GAAG;MACfC,GAAG,EAAE,QAAQX,QAAQ,WAAWQ,IAAI,CAACI,QAAQ,CAAC,QAAQ,CAAC,EAAE;MACzDC,KAAK,EAAEJ,UAAU,EAAEI,KAAK;MACxBC,MAAM,EAAEL,UAAU,EAAEK,MAAM;MAC1BJ,KAAK,EAAEA;IACT,CAAC;IACD,OAAOH,OAAO;EAChB,CAAC,EACD,CAAC,CACH,CAAC;EAED,MAAMQ,MAAM,GAAGC,IAAI,CAACC,SAAS,CAACC,MAAM,CAACC,IAAI,CAACd,SAAS,CAAC,CAACe,GAAG,CAACC,MAAM,CAAC,CAAC;;EAEjE;AACF;AACA;AACA;AACA;AACA;EACE,OAAO,IAAAC,eAAM;AACf;AACA;AACA;AACA;AACA,yDAAyDP,MAAM;AAC/D;AACA,uBAAuBC,IAAI,CAACC,SAAS,CAACZ,SAAS,CAAC;AAChD,GAAG;AACH","ignoreList":[]}