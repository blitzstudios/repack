{"version":3,"file":"FederationRuntimePlugin.js","names":["repackFederationRuntimePlugin","name","afterResolve","args","ScriptManager","require","remoteInfo","shared","addResolver","scriptId","caller","referenceUrl","entryGlobalName","url","entry","publicPath","split","slice","join","bundlePath","key","loadEntry","client","getWebpackContext","loadScript","undefined","globalThis","Error","console","error"],"sources":["../../src/modules/FederationRuntimePlugin.ts"],"sourcesContent":["import type { FederationRuntimePlugin } from '@module-federation/enhanced/runtime';\nimport type * as RepackClient from './ScriptManager';\n\nconst repackFederationRuntimePlugin: () => FederationRuntimePlugin = () => ({\n  name: 'repack-federation-runtime-plugin',\n  afterResolve(args) {\n    const { ScriptManager } = require('./ScriptManager') as typeof RepackClient;\n    const { remoteInfo } = args;\n\n    ScriptManager.shared.addResolver(\n      async (scriptId, caller, referenceUrl) => {\n        if (scriptId === remoteInfo.entryGlobalName) {\n          return { url: remoteInfo.entry };\n        }\n\n        if (referenceUrl && caller === remoteInfo.entryGlobalName) {\n          const publicPath = remoteInfo.entry.split('/').slice(0, -1).join('/');\n          const bundlePath = scriptId + referenceUrl.split(scriptId)[1];\n          return { url: publicPath + '/' + bundlePath };\n        }\n      },\n      { key: remoteInfo.entryGlobalName }\n    );\n\n    return args;\n  },\n  loadEntry: async ({ remoteInfo }) => {\n    const client = require('./ScriptManager') as typeof RepackClient;\n    const { ScriptManager, getWebpackContext } = client;\n    const { entry, entryGlobalName } = remoteInfo;\n\n    try {\n      await ScriptManager.shared.loadScript(\n        entryGlobalName,\n        undefined,\n        getWebpackContext(),\n        entry\n      );\n\n      // @ts-ignore\n      if (!globalThis[entryGlobalName]) {\n        throw new Error();\n      }\n\n      // @ts-ignore\n      return globalThis[entryGlobalName];\n    } catch {\n      console.error(`Failed to load ${entryGlobalName} entry`);\n    }\n  },\n});\n\nexport default repackFederationRuntimePlugin;\n"],"mappings":"AAGA,MAAMA,6BAA4D,GAAGA,CAAA,MAAO;EAC1EC,IAAI,EAAE,kCAAkC;EACxCC,YAAYA,CAACC,IAAI,EAAE;IACjB,MAAM;MAAEC;IAAc,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAwB;IAC3E,MAAM;MAAEC;IAAW,CAAC,GAAGH,IAAI;IAE3BC,aAAa,CAACG,MAAM,CAACC,WAAW,CAC9B,OAAOC,QAAQ,EAAEC,MAAM,EAAEC,YAAY,KAAK;MACxC,IAAIF,QAAQ,KAAKH,UAAU,CAACM,eAAe,EAAE;QAC3C,OAAO;UAAEC,GAAG,EAAEP,UAAU,CAACQ;QAAM,CAAC;MAClC;MAEA,IAAIH,YAAY,IAAID,MAAM,KAAKJ,UAAU,CAACM,eAAe,EAAE;QACzD,MAAMG,UAAU,GAAGT,UAAU,CAACQ,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;QACrE,MAAMC,UAAU,GAAGV,QAAQ,GAAGE,YAAY,CAACK,KAAK,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC7D,OAAO;UAAEI,GAAG,EAAEE,UAAU,GAAG,GAAG,GAAGI;QAAW,CAAC;MAC/C;IACF,CAAC,EACD;MAAEC,GAAG,EAAEd,UAAU,CAACM;IAAgB,CACpC,CAAC;IAED,OAAOT,IAAI;EACb,CAAC;EACDkB,SAAS,EAAE,MAAAA,CAAO;IAAEf;EAAW,CAAC,KAAK;IACnC,MAAMgB,MAAM,GAAGjB,OAAO,CAAC,iBAAiB,CAAwB;IAChE,MAAM;MAAED,aAAa;MAAEmB;IAAkB,CAAC,GAAGD,MAAM;IACnD,MAAM;MAAER,KAAK;MAAEF;IAAgB,CAAC,GAAGN,UAAU;IAE7C,IAAI;MACF,MAAMF,aAAa,CAACG,MAAM,CAACiB,UAAU,CACnCZ,eAAe,EACfa,SAAS,EACTF,iBAAiB,CAAC,CAAC,EACnBT,KACF,CAAC;;MAED;MACA,IAAI,CAACY,UAAU,CAACd,eAAe,CAAC,EAAE;QAChC,MAAM,IAAIe,KAAK,CAAC,CAAC;MACnB;;MAEA;MACA,OAAOD,UAAU,CAACd,eAAe,CAAC;IACpC,CAAC,CAAC,MAAM;MACNgB,OAAO,CAACC,KAAK,CAAC,kBAAkBjB,eAAe,QAAQ,CAAC;IAC1D;EACF;AACF,CAAC,CAAC;AAEF,eAAeZ,6BAA6B","ignoreList":[]}