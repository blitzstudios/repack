{"version":3,"file":"ResolverPlugin.js","names":["createScriptLocator","entryUrl","config","locator","url","getPublicPath","split","slice","join","getAssetPath","assetPath","startsWith","rebaseRemoteUrl","from","to","publicPath","registerResolver","remoteInfo","version","entry","Error","name","resolver","scriptId","caller","referenceUrl","runtime","__webpack_require__","repack","shared","scriptManager","addResolver","key","enqueuedResolvers","push","RepackResolverPlugin","registerRemote","args","remote"],"sources":["../../../src/modules/FederationRuntimePlugins/ResolverPlugin.ts"],"sourcesContent":["import type {\n  FederationHost,\n  FederationRuntimePlugin,\n} from '@module-federation/enhanced/runtime';\nimport type { ScriptLocator } from '../ScriptManager/index.js';\n\ntype MFRemote = Parameters<FederationHost['registerRemotes']>[0][0];\n\nexport type RepackResolverPluginConfiguration =\n  | Omit<ScriptLocator, 'url'>\n  | ((url: string) => Promise<ScriptLocator>);\n\nconst createScriptLocator = async (\n  entryUrl: string,\n  config?: RepackResolverPluginConfiguration\n) => {\n  if (typeof config === 'function') {\n    const locator = await config(entryUrl);\n    return locator;\n  }\n  if (typeof config === 'object') {\n    return { url: entryUrl, ...config };\n  }\n  return { url: entryUrl };\n};\n\nconst getPublicPath = (url: string) => {\n  return url.split('/').slice(0, -1).join('/');\n};\n\nconst getAssetPath = (url: string) => {\n  const assetPath = url.split(getPublicPath(url))[1];\n  // normalize by removing leading slash\n  return assetPath.startsWith('/') ? assetPath.slice(1) : assetPath;\n};\n\nconst rebaseRemoteUrl = (from: string, to: string) => {\n  const assetPath = getAssetPath(from);\n  const publicPath = getPublicPath(to);\n  return [publicPath, assetPath].join('/');\n};\n\nconst registerResolver = async (\n  remoteInfo: MFRemote,\n  config?: RepackResolverPluginConfiguration\n) => {\n  // when manifest is used, the valid entry URL comes from the version field\n  // otherwise, the entry URL comes from the entry field which has the correct publicPath for the remote set\n  let entryUrl: string | undefined;\n  if ('version' in remoteInfo && remoteInfo.version) {\n    entryUrl = remoteInfo.version;\n  } else if ('entry' in remoteInfo) {\n    entryUrl = remoteInfo.entry;\n  }\n\n  if (!entryUrl) {\n    throw new Error(\n      '[RepackResolverPlugin] Cannot determine entry URL for remote: ' +\n        remoteInfo.name\n    );\n  }\n\n  const resolver = async (\n    scriptId: string,\n    caller?: string,\n    referenceUrl?: string\n  ) => {\n    if (scriptId === remoteInfo.name || caller === remoteInfo.name) {\n      // referenceUrl should always be present and this should never happen\n      if (!referenceUrl) {\n        throw new Error('[RepackResolverPlugin] Reference URL is missing');\n      }\n\n      const url = rebaseRemoteUrl(referenceUrl, entryUrl);\n      const locator = await createScriptLocator(url, config);\n      return locator;\n    }\n  };\n\n  const runtime = __webpack_require__.repack.shared;\n  if (runtime.scriptManager) {\n    runtime.scriptManager.addResolver(resolver, { key: remoteInfo.name });\n  } else {\n    runtime.enqueuedResolvers.push([resolver, { key: remoteInfo.name }]);\n  }\n};\n\nconst RepackResolverPlugin: (\n  config?: RepackResolverPluginConfiguration\n) => FederationRuntimePlugin = (config) => ({\n  name: 'repack-resolver-plugin',\n  registerRemote: (args) => {\n    registerResolver(args.remote, config);\n    return args;\n  },\n});\n\nexport default RepackResolverPlugin;\n"],"mappings":"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","ignoreList":[]}